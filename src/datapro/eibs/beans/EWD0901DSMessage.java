package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from EWD0901DS physical file definition.
* 
* File level identifier is 1070122164824.
* Record format level identifier is 329697899B1B4.
*/

public class EWD0901DSMessage extends MessageRecord
{
  final static String fldnames[] = {
                                     "RWDUSR",
                                     "RWDMOD",
                                     "RWDRPN",
                                     "RWDPER",
                                     "RWDFRC",
                                     "EWDRPN",
                                     "EWDDSC",
                                     "EWDMOD",
                                     "EWDPER",
                                     "EWDPRG",
                                     "EWDPRM",
                                     "EWDREC",
                                     "EWDOPE"
                                   };
  final static String tnames[] = {
                                   "RWDUSR",
                                   "RWDMOD",
                                   "RWDRPN",
                                   "RWDPER",
                                   "RWDFRC",
                                   "EWDRPN",
                                   "EWDDSC",
                                   "EWDMOD",
                                   "EWDPER",
                                   "EWDPRG",
                                   "EWDPRM",
                                   "EWDREC",
                                   "EWDOPE"
                                 };
  final static String fid = "1070122164824";
  final static String rid = "329697899B1B4";
  final static String fmtname = "EWD0901DS";
  final int FIELDCOUNT = 13;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldRWDUSR = null;
  private CharacterField fieldRWDMOD = null;
  private CharacterField fieldRWDRPN = null;
  private CharacterField fieldRWDPER = null;
  private DecimalField fieldRWDFRC = null;
  private CharacterField fieldEWDRPN = null;
  private CharacterField fieldEWDDSC = null;
  private CharacterField fieldEWDMOD = null;
  private CharacterField fieldEWDPER = null;
  private CharacterField fieldEWDPRG = null;
  private CharacterField fieldEWDPRM = null;
  private DecimalField fieldEWDREC = null;
  private CharacterField fieldEWDOPE = null;

  /**
  * Constructor for EWD0901DSMessage.
  */
  public EWD0901DSMessage()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 114;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldRWDUSR =
    new CharacterField(message, HEADERSIZE + 0, 10, "RWDUSR");
    fields[1] = fieldRWDMOD =
    new CharacterField(message, HEADERSIZE + 10, 2, "RWDMOD");
    fields[2] = fieldRWDRPN =
    new CharacterField(message, HEADERSIZE + 12, 10, "RWDRPN");
    fields[3] = fieldRWDPER =
    new CharacterField(message, HEADERSIZE + 22, 1, "RWDPER");
    fields[4] = fieldRWDFRC =
    new DecimalField(message, HEADERSIZE + 23, 8, 0, "RWDFRC");
    fields[5] = fieldEWDRPN =
    new CharacterField(message, HEADERSIZE + 31, 10, "EWDRPN");
    fields[6] = fieldEWDDSC =
    new CharacterField(message, HEADERSIZE + 41, 50, "EWDDSC");
    fields[7] = fieldEWDMOD =
    new CharacterField(message, HEADERSIZE + 91, 2, "EWDMOD");
    fields[8] = fieldEWDPER =
    new CharacterField(message, HEADERSIZE + 93, 1, "EWDPER");
    fields[9] = fieldEWDPRG =
    new CharacterField(message, HEADERSIZE + 94, 10, "EWDPRG");
    fields[10] = fieldEWDPRM =
    new CharacterField(message, HEADERSIZE + 104, 1, "EWDPRM");
    fields[11] = fieldEWDREC =
    new DecimalField(message, HEADERSIZE + 105, 8, 0, "EWDREC");
    fields[12] = fieldEWDOPE =
    new CharacterField(message, HEADERSIZE + 113, 1, "EWDOPE");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field RWDUSR using a String value.
  */
  public void setRWDUSR(String newvalue)
  {
    fieldRWDUSR.setString(newvalue);
  }

  /**
  * Get value of field RWDUSR as a String.
  */
  public String getRWDUSR()
  {
    return fieldRWDUSR.getString();
  }

  /**
  * Set field RWDMOD using a String value.
  */
  public void setRWDMOD(String newvalue)
  {
    fieldRWDMOD.setString(newvalue);
  }

  /**
  * Get value of field RWDMOD as a String.
  */
  public String getRWDMOD()
  {
    return fieldRWDMOD.getString();
  }

  /**
  * Set field RWDRPN using a String value.
  */
  public void setRWDRPN(String newvalue)
  {
    fieldRWDRPN.setString(newvalue);
  }

  /**
  * Get value of field RWDRPN as a String.
  */
  public String getRWDRPN()
  {
    return fieldRWDRPN.getString();
  }

  /**
  * Set field RWDPER using a String value.
  */
  public void setRWDPER(String newvalue)
  {
    fieldRWDPER.setString(newvalue);
  }

  /**
  * Get value of field RWDPER as a String.
  */
  public String getRWDPER()
  {
    return fieldRWDPER.getString();
  }

  /**
  * Set field RWDFRC using a String value.
  */
  public void setRWDFRC(String newvalue)
  {
    fieldRWDFRC.setString(newvalue);
  }

  /**
  * Get value of field RWDFRC as a String.
  */
  public String getRWDFRC()
  {
    return fieldRWDFRC.getString();
  }

  /**
  * Set numeric field RWDFRC using a BigDecimal value.
  */
  public void setRWDFRC(BigDecimal newvalue)
  {
    fieldRWDFRC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field RWDFRC as a BigDecimal.
  */
  public BigDecimal getBigDecimalRWDFRC()
  {
    return fieldRWDFRC.getBigDecimal();
  }

  /**
  * Set field EWDRPN using a String value.
  */
  public void setEWDRPN(String newvalue)
  {
    fieldEWDRPN.setString(newvalue);
  }

  /**
  * Get value of field EWDRPN as a String.
  */
  public String getEWDRPN()
  {
    return fieldEWDRPN.getString();
  }

  /**
  * Set field EWDDSC using a String value.
  */
  public void setEWDDSC(String newvalue)
  {
    fieldEWDDSC.setString(newvalue);
  }

  /**
  * Get value of field EWDDSC as a String.
  */
  public String getEWDDSC()
  {
    return fieldEWDDSC.getString();
  }

  /**
  * Set field EWDMOD using a String value.
  */
  public void setEWDMOD(String newvalue)
  {
    fieldEWDMOD.setString(newvalue);
  }

  /**
  * Get value of field EWDMOD as a String.
  */
  public String getEWDMOD()
  {
    return fieldEWDMOD.getString();
  }

  /**
  * Set field EWDPER using a String value.
  */
  public void setEWDPER(String newvalue)
  {
    fieldEWDPER.setString(newvalue);
  }

  /**
  * Get value of field EWDPER as a String.
  */
  public String getEWDPER()
  {
    return fieldEWDPER.getString();
  }

  /**
  * Set field EWDPRG using a String value.
  */
  public void setEWDPRG(String newvalue)
  {
    fieldEWDPRG.setString(newvalue);
  }

  /**
  * Get value of field EWDPRG as a String.
  */
  public String getEWDPRG()
  {
    return fieldEWDPRG.getString();
  }

  /**
  * Set field EWDPRM using a String value.
  */
  public void setEWDPRM(String newvalue)
  {
    fieldEWDPRM.setString(newvalue);
  }

  /**
  * Get value of field EWDPRM as a String.
  */
  public String getEWDPRM()
  {
    return fieldEWDPRM.getString();
  }

  /**
  * Set field EWDREC using a String value.
  */
  public void setEWDREC(String newvalue)
  {
    fieldEWDREC.setString(newvalue);
  }

  /**
  * Get value of field EWDREC as a String.
  */
  public String getEWDREC()
  {
    return fieldEWDREC.getString();
  }

  /**
  * Set numeric field EWDREC using a BigDecimal value.
  */
  public void setEWDREC(BigDecimal newvalue)
  {
    fieldEWDREC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EWDREC as a BigDecimal.
  */
  public BigDecimal getBigDecimalEWDREC()
  {
    return fieldEWDREC.getBigDecimal();
  }

  /**
  * Set field EWDOPE using a String value.
  */
  public void setEWDOPE(String newvalue)
  {
    fieldEWDOPE.setString(newvalue);
  }

  /**
  * Get value of field EWDOPE as a String.
  */
  public String getEWDOPE()
  {
    return fieldEWDOPE.getString();
  }

}
