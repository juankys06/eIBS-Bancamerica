package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from EWD0029DS physical file definition.
* 
* File level identifier is 1030121192020.
* Record format level identifier is 33911C55B8759.
*/

public class EWD0029DSMessage extends MessageRecord
{
  final static String fldnames[] = {
                                     "EWDTCD",
                                     "EWDITD",
                                     "EWDTYP",
                                     "EWDOPE"
                                   };
  final static String tnames[] = {
                                   "EWDTCD",
                                   "EWDITD",
                                   "EWDTYP",
                                   "EWDOPE"
                                 };
  final static String fid = "1030121192020";
  final static String rid = "33911C55B8759";
  final static String fmtname = "EWD0029DS";
  final int FIELDCOUNT = 4;
  private static Hashtable tlookup = new Hashtable();
  private DecimalField fieldEWDTCD = null;
  private CharacterField fieldEWDITD = null;
  private CharacterField fieldEWDTYP = null;
  private CharacterField fieldEWDOPE = null;

  /**
  * Constructor for EWD0029DSMessage.
  */
  public EWD0029DSMessage()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 48;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldEWDTCD =
    new DecimalField(message, HEADERSIZE + 0, 5, 0, "EWDTCD");
    fields[1] = fieldEWDITD =
    new CharacterField(message, HEADERSIZE + 5, 40, "EWDITD");
    fields[2] = fieldEWDTYP =
    new CharacterField(message, HEADERSIZE + 45, 2, "EWDTYP");
    fields[3] = fieldEWDOPE =
    new CharacterField(message, HEADERSIZE + 47, 1, "EWDOPE");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field EWDTCD using a String value.
  */
  public void setEWDTCD(String newvalue)
  {
    fieldEWDTCD.setString(newvalue);
  }

  /**
  * Get value of field EWDTCD as a String.
  */
  public String getEWDTCD()
  {
    return fieldEWDTCD.getString();
  }

  /**
  * Set numeric field EWDTCD using a BigDecimal value.
  */
  public void setEWDTCD(BigDecimal newvalue)
  {
    fieldEWDTCD.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EWDTCD as a BigDecimal.
  */
  public BigDecimal getBigDecimalEWDTCD()
  {
    return fieldEWDTCD.getBigDecimal();
  }

  /**
  * Set field EWDITD using a String value.
  */
  public void setEWDITD(String newvalue)
  {
    fieldEWDITD.setString(newvalue);
  }

  /**
  * Get value of field EWDITD as a String.
  */
  public String getEWDITD()
  {
    return fieldEWDITD.getString();
  }

  /**
  * Set field EWDTYP using a String value.
  */
  public void setEWDTYP(String newvalue)
  {
    fieldEWDTYP.setString(newvalue);
  }

  /**
  * Get value of field EWDTYP as a String.
  */
  public String getEWDTYP()
  {
    return fieldEWDTYP.getString();
  }

  /**
  * Set field EWDOPE using a String value.
  */
  public void setEWDOPE(String newvalue)
  {
    fieldEWDOPE.setString(newvalue);
  }

  /**
  * Get value of field EWDOPE as a String.
  */
  public String getEWDOPE()
  {
    return fieldEWDOPE.getString();
  }

}
