package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from EWD0018DS physical file definition.
* 
* File level identifier is 1041115103658.
* Record format level identifier is 428F6D225FAA1.
*/

public class EWD0018DSMessage extends MessageRecord
{
  final static String fldnames[] = {
                                     "RWDUSR",
                                     "RWDTYP",
                                     "RWDFRC",
                                     "RWDSHN",
                                     "RWDSHO",
                                     "EWDSTC",
                                     "EWDSAC",
                                     "EWDSDS",
                                     "EWDCTC",
                                     "EWDDSC",
                                     "EWDMSA",
                                     "EWDREC",
                                     "EWDOPE"
                                   };
  final static String tnames[] = {
                                   "RWDUSR",
                                   "RWDTYP",
                                   "RWDFRC",
                                   "RWDSHN",
                                   "RWDSHO",
                                   "EWDSTC",
                                   "EWDSAC",
                                   "EWDSDS",
                                   "EWDCTC",
                                   "EWDDSC",
                                   "EWDMSA",
                                   "EWDREC",
                                   "EWDOPE"
                                 };
  final static String fid = "1041115103658";
  final static String rid = "428F6D225FAA1";
  final static String fmtname = "EWD0018DS";
  final int FIELDCOUNT = 13;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldRWDUSR = null;
  private CharacterField fieldRWDTYP = null;
  private DecimalField fieldRWDFRC = null;
  private CharacterField fieldRWDSHN = null;
  private CharacterField fieldRWDSHO = null;
  private DecimalField fieldEWDSTC = null;
  private CharacterField fieldEWDSAC = null;
  private CharacterField fieldEWDSDS = null;
  private DecimalField fieldEWDCTC = null;
  private CharacterField fieldEWDDSC = null;
  private CharacterField fieldEWDMSA = null;
  private DecimalField fieldEWDREC = null;
  private CharacterField fieldEWDOPE = null;

  /**
  * Constructor for EWD0018DSMessage.
  */
  public EWD0018DSMessage()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 142;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldRWDUSR =
    new CharacterField(message, HEADERSIZE + 0, 10, "RWDUSR");
    fields[1] = fieldRWDTYP =
    new CharacterField(message, HEADERSIZE + 10, 1, "RWDTYP");
    fields[2] = fieldRWDFRC =
    new DecimalField(message, HEADERSIZE + 11, 8, 0, "RWDFRC");
    fields[3] = fieldRWDSHN =
    new CharacterField(message, HEADERSIZE + 19, 20, "RWDSHN");
    fields[4] = fieldRWDSHO =
    new CharacterField(message, HEADERSIZE + 39, 20, "RWDSHO");
    fields[5] = fieldEWDSTC =
    new DecimalField(message, HEADERSIZE + 59, 3, 0, "EWDSTC");
    fields[6] = fieldEWDSAC =
    new CharacterField(message, HEADERSIZE + 62, 2, "EWDSAC");
    fields[7] = fieldEWDSDS =
    new CharacterField(message, HEADERSIZE + 64, 30, "EWDSDS");
    fields[8] = fieldEWDCTC =
    new DecimalField(message, HEADERSIZE + 94, 4, 0, "EWDCTC");
    fields[9] = fieldEWDDSC =
    new CharacterField(message, HEADERSIZE + 98, 30, "EWDDSC");
    fields[10] = fieldEWDMSA =
    new CharacterField(message, HEADERSIZE + 128, 5, "EWDMSA");
    fields[11] = fieldEWDREC =
    new DecimalField(message, HEADERSIZE + 133, 8, 0, "EWDREC");
    fields[12] = fieldEWDOPE =
    new CharacterField(message, HEADERSIZE + 141, 1, "EWDOPE");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field RWDUSR using a String value.
  */
  public void setRWDUSR(String newvalue)
  {
    fieldRWDUSR.setString(newvalue);
  }

  /**
  * Get value of field RWDUSR as a String.
  */
  public String getRWDUSR()
  {
    return fieldRWDUSR.getString();
  }

  /**
  * Set field RWDTYP using a String value.
  */
  public void setRWDTYP(String newvalue)
  {
    fieldRWDTYP.setString(newvalue);
  }

  /**
  * Get value of field RWDTYP as a String.
  */
  public String getRWDTYP()
  {
    return fieldRWDTYP.getString();
  }

  /**
  * Set field RWDFRC using a String value.
  */
  public void setRWDFRC(String newvalue)
  {
    fieldRWDFRC.setString(newvalue);
  }

  /**
  * Get value of field RWDFRC as a String.
  */
  public String getRWDFRC()
  {
    return fieldRWDFRC.getString();
  }

  /**
  * Set numeric field RWDFRC using a BigDecimal value.
  */
  public void setRWDFRC(BigDecimal newvalue)
  {
    fieldRWDFRC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field RWDFRC as a BigDecimal.
  */
  public BigDecimal getBigDecimalRWDFRC()
  {
    return fieldRWDFRC.getBigDecimal();
  }

  /**
  * Set field RWDSHN using a String value.
  */
  public void setRWDSHN(String newvalue)
  {
    fieldRWDSHN.setString(newvalue);
  }

  /**
  * Get value of field RWDSHN as a String.
  */
  public String getRWDSHN()
  {
    return fieldRWDSHN.getString();
  }

  /**
  * Set field RWDSHO using a String value.
  */
  public void setRWDSHO(String newvalue)
  {
    fieldRWDSHO.setString(newvalue);
  }

  /**
  * Get value of field RWDSHO as a String.
  */
  public String getRWDSHO()
  {
    return fieldRWDSHO.getString();
  }

  /**
  * Set field EWDSTC using a String value.
  */
  public void setEWDSTC(String newvalue)
  {
    fieldEWDSTC.setString(newvalue);
  }

  /**
  * Get value of field EWDSTC as a String.
  */
  public String getEWDSTC()
  {
    return fieldEWDSTC.getString();
  }

  /**
  * Set numeric field EWDSTC using a BigDecimal value.
  */
  public void setEWDSTC(BigDecimal newvalue)
  {
    fieldEWDSTC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EWDSTC as a BigDecimal.
  */
  public BigDecimal getBigDecimalEWDSTC()
  {
    return fieldEWDSTC.getBigDecimal();
  }

  /**
  * Set field EWDSAC using a String value.
  */
  public void setEWDSAC(String newvalue)
  {
    fieldEWDSAC.setString(newvalue);
  }

  /**
  * Get value of field EWDSAC as a String.
  */
  public String getEWDSAC()
  {
    return fieldEWDSAC.getString();
  }

  /**
  * Set field EWDSDS using a String value.
  */
  public void setEWDSDS(String newvalue)
  {
    fieldEWDSDS.setString(newvalue);
  }

  /**
  * Get value of field EWDSDS as a String.
  */
  public String getEWDSDS()
  {
    return fieldEWDSDS.getString();
  }

  /**
  * Set field EWDCTC using a String value.
  */
  public void setEWDCTC(String newvalue)
  {
    fieldEWDCTC.setString(newvalue);
  }

  /**
  * Get value of field EWDCTC as a String.
  */
  public String getEWDCTC()
  {
    return fieldEWDCTC.getString();
  }

  /**
  * Set numeric field EWDCTC using a BigDecimal value.
  */
  public void setEWDCTC(BigDecimal newvalue)
  {
    fieldEWDCTC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EWDCTC as a BigDecimal.
  */
  public BigDecimal getBigDecimalEWDCTC()
  {
    return fieldEWDCTC.getBigDecimal();
  }

  /**
  * Set field EWDDSC using a String value.
  */
  public void setEWDDSC(String newvalue)
  {
    fieldEWDDSC.setString(newvalue);
  }

  /**
  * Get value of field EWDDSC as a String.
  */
  public String getEWDDSC()
  {
    return fieldEWDDSC.getString();
  }

  /**
  * Set field EWDMSA using a String value.
  */
  public void setEWDMSA(String newvalue)
  {
    fieldEWDMSA.setString(newvalue);
  }

  /**
  * Get value of field EWDMSA as a String.
  */
  public String getEWDMSA()
  {
    return fieldEWDMSA.getString();
  }

  /**
  * Set field EWDREC using a String value.
  */
  public void setEWDREC(String newvalue)
  {
    fieldEWDREC.setString(newvalue);
  }

  /**
  * Get value of field EWDREC as a String.
  */
  public String getEWDREC()
  {
    return fieldEWDREC.getString();
  }

  /**
  * Set numeric field EWDREC using a BigDecimal value.
  */
  public void setEWDREC(BigDecimal newvalue)
  {
    fieldEWDREC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EWDREC as a BigDecimal.
  */
  public BigDecimal getBigDecimalEWDREC()
  {
    return fieldEWDREC.getBigDecimal();
  }

  /**
  * Set field EWDOPE using a String value.
  */
  public void setEWDOPE(String newvalue)
  {
    fieldEWDOPE.setString(newvalue);
  }

  /**
  * Get value of field EWDOPE as a String.
  */
  public String getEWDOPE()
  {
    return fieldEWDOPE.getString();
  }

}
