package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from EWD0155DS physical file definition.
* 
* File level identifier is 1030121192029.
* Record format level identifier is 441040CAA072A.
*/

public class EWD0155DSMessage extends MessageRecord
{
  final static String fldnames[] = {
                                     "EWDTYP",
                                     "EWDACC",
                                     "EWDTIT",
                                     "EWDUSR",
                                     "EWDDT1",
                                     "EWDDT2",
                                     "EWDDT3",
                                     "EWDTIM",
                                     "EWDREC",
                                     "EWDOPE"
                                   };
  final static String tnames[] = {
                                   "EWDTYP",
                                   "EWDACC",
                                   "EWDTIT",
                                   "EWDUSR",
                                   "EWDDT1",
                                   "EWDDT2",
                                   "EWDDT3",
                                   "EWDTIM",
                                   "EWDREC",
                                   "EWDOPE"
                                 };
  final static String fid = "1030121192029";
  final static String rid = "441040CAA072A";
  final static String fmtname = "EWD0155DS";
  final int FIELDCOUNT = 10;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldEWDTYP = null;
  private DecimalField fieldEWDACC = null;
  private CharacterField fieldEWDTIT = null;
  private CharacterField fieldEWDUSR = null;
  private DecimalField fieldEWDDT1 = null;
  private DecimalField fieldEWDDT2 = null;
  private DecimalField fieldEWDDT3 = null;
  private DecimalField fieldEWDTIM = null;
  private DecimalField fieldEWDREC = null;
  private CharacterField fieldEWDOPE = null;

  /**
  * Constructor for EWD0155DSMessage.
  */
  public EWD0155DSMessage()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 84;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldEWDTYP =
    new CharacterField(message, HEADERSIZE + 0, 1, "EWDTYP");
    fields[1] = fieldEWDACC =
    new DecimalField(message, HEADERSIZE + 1, 13, 0, "EWDACC");
    fields[2] = fieldEWDTIT =
    new CharacterField(message, HEADERSIZE + 14, 35, "EWDTIT");
    fields[3] = fieldEWDUSR =
    new CharacterField(message, HEADERSIZE + 49, 10, "EWDUSR");
    fields[4] = fieldEWDDT1 =
    new DecimalField(message, HEADERSIZE + 59, 3, 0, "EWDDT1");
    fields[5] = fieldEWDDT2 =
    new DecimalField(message, HEADERSIZE + 62, 3, 0, "EWDDT2");
    fields[6] = fieldEWDDT3 =
    new DecimalField(message, HEADERSIZE + 65, 3, 0, "EWDDT3");
    fields[7] = fieldEWDTIM =
    new DecimalField(message, HEADERSIZE + 68, 7, 0, "EWDTIM");
    fields[8] = fieldEWDREC =
    new DecimalField(message, HEADERSIZE + 75, 8, 0, "EWDREC");
    fields[9] = fieldEWDOPE =
    new CharacterField(message, HEADERSIZE + 83, 1, "EWDOPE");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field EWDTYP using a String value.
  */
  public void setEWDTYP(String newvalue)
  {
    fieldEWDTYP.setString(newvalue);
  }

  /**
  * Get value of field EWDTYP as a String.
  */
  public String getEWDTYP()
  {
    return fieldEWDTYP.getString();
  }

  /**
  * Set field EWDACC using a String value.
  */
  public void setEWDACC(String newvalue)
  {
    fieldEWDACC.setString(newvalue);
  }

  /**
  * Get value of field EWDACC as a String.
  */
  public String getEWDACC()
  {
    return fieldEWDACC.getString();
  }

  /**
  * Set numeric field EWDACC using a BigDecimal value.
  */
  public void setEWDACC(BigDecimal newvalue)
  {
    fieldEWDACC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EWDACC as a BigDecimal.
  */
  public BigDecimal getBigDecimalEWDACC()
  {
    return fieldEWDACC.getBigDecimal();
  }

  /**
  * Set field EWDTIT using a String value.
  */
  public void setEWDTIT(String newvalue)
  {
    fieldEWDTIT.setString(newvalue);
  }

  /**
  * Get value of field EWDTIT as a String.
  */
  public String getEWDTIT()
  {
    return fieldEWDTIT.getString();
  }

  /**
  * Set field EWDUSR using a String value.
  */
  public void setEWDUSR(String newvalue)
  {
    fieldEWDUSR.setString(newvalue);
  }

  /**
  * Get value of field EWDUSR as a String.
  */
  public String getEWDUSR()
  {
    return fieldEWDUSR.getString();
  }

  /**
  * Set field EWDDT1 using a String value.
  */
  public void setEWDDT1(String newvalue)
  {
    fieldEWDDT1.setString(newvalue);
  }

  /**
  * Get value of field EWDDT1 as a String.
  */
  public String getEWDDT1()
  {
    return fieldEWDDT1.getString();
  }

  /**
  * Set numeric field EWDDT1 using a BigDecimal value.
  */
  public void setEWDDT1(BigDecimal newvalue)
  {
    fieldEWDDT1.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EWDDT1 as a BigDecimal.
  */
  public BigDecimal getBigDecimalEWDDT1()
  {
    return fieldEWDDT1.getBigDecimal();
  }

  /**
  * Set field EWDDT2 using a String value.
  */
  public void setEWDDT2(String newvalue)
  {
    fieldEWDDT2.setString(newvalue);
  }

  /**
  * Get value of field EWDDT2 as a String.
  */
  public String getEWDDT2()
  {
    return fieldEWDDT2.getString();
  }

  /**
  * Set numeric field EWDDT2 using a BigDecimal value.
  */
  public void setEWDDT2(BigDecimal newvalue)
  {
    fieldEWDDT2.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EWDDT2 as a BigDecimal.
  */
  public BigDecimal getBigDecimalEWDDT2()
  {
    return fieldEWDDT2.getBigDecimal();
  }

  /**
  * Set field EWDDT3 using a String value.
  */
  public void setEWDDT3(String newvalue)
  {
    fieldEWDDT3.setString(newvalue);
  }

  /**
  * Get value of field EWDDT3 as a String.
  */
  public String getEWDDT3()
  {
    return fieldEWDDT3.getString();
  }

  /**
  * Set numeric field EWDDT3 using a BigDecimal value.
  */
  public void setEWDDT3(BigDecimal newvalue)
  {
    fieldEWDDT3.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EWDDT3 as a BigDecimal.
  */
  public BigDecimal getBigDecimalEWDDT3()
  {
    return fieldEWDDT3.getBigDecimal();
  }

  /**
  * Set field EWDTIM using a String value.
  */
  public void setEWDTIM(String newvalue)
  {
    fieldEWDTIM.setString(newvalue);
  }

  /**
  * Get value of field EWDTIM as a String.
  */
  public String getEWDTIM()
  {
    return fieldEWDTIM.getString();
  }

  /**
  * Set numeric field EWDTIM using a BigDecimal value.
  */
  public void setEWDTIM(BigDecimal newvalue)
  {
    fieldEWDTIM.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EWDTIM as a BigDecimal.
  */
  public BigDecimal getBigDecimalEWDTIM()
  {
    return fieldEWDTIM.getBigDecimal();
  }

  /**
  * Set field EWDREC using a String value.
  */
  public void setEWDREC(String newvalue)
  {
    fieldEWDREC.setString(newvalue);
  }

  /**
  * Get value of field EWDREC as a String.
  */
  public String getEWDREC()
  {
    return fieldEWDREC.getString();
  }

  /**
  * Set numeric field EWDREC using a BigDecimal value.
  */
  public void setEWDREC(BigDecimal newvalue)
  {
    fieldEWDREC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EWDREC as a BigDecimal.
  */
  public BigDecimal getBigDecimalEWDREC()
  {
    return fieldEWDREC.getBigDecimal();
  }

  /**
  * Set field EWDOPE using a String value.
  */
  public void setEWDOPE(String newvalue)
  {
    fieldEWDOPE.setString(newvalue);
  }

  /**
  * Get value of field EWDOPE as a String.
  */
  public String getEWDOPE()
  {
    return fieldEWDOPE.getString();
  }

}
