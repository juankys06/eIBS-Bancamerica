package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from EWD0366DS physical file definition.
* 
* File level identifier is 1041116165634.
* Record format level identifier is 3BE610FB1638B.
*/

public class EWD0366DSMessage extends MessageRecord
{
  final static String fldnames[] = {
                                     "RWDUSR",
                                     "RWDTYP",
                                     "RWDSTC",
                                     "RWDASC",
                                     "RWDCTC",
                                     "RWDZPC",
                                     "RWDSTS",
                                     "RWDFRC",
                                     "RWDSHN",
                                     "RWDSHO",
                                     "SWDSTC",
                                     "SWDCTC",
                                     "SWDMSA",
                                     "SWDCET",
                                     "SWDZPC",
                                     "SWDSTS",
                                     "SWDSTCDSC",
                                     "SWDCTCDSC",
                                     "SWDMSADSC",
                                     "SWDSTSDSC",
                                     "SWDREC",
                                     "SWDOPE"
                                   };
  final static String tnames[] = {
                                   "RWDUSR",
                                   "RWDTYP",
                                   "RWDSTC",
                                   "RWDASC",
                                   "RWDCTC",
                                   "RWDZPC",
                                   "RWDSTS",
                                   "RWDFRC",
                                   "RWDSHN",
                                   "RWDSHO",
                                   "SWDSTC",
                                   "SWDCTC",
                                   "SWDMSA",
                                   "SWDCET",
                                   "SWDZPC",
                                   "SWDSTS",
                                   "SWDSTCDSC",
                                   "SWDCTCDSC",
                                   "SWDMSADSC",
                                   "SWDSTSDSC",
                                   "SWDREC",
                                   "SWDOPE"
                                 };
  final static String fid = "1041116165634";
  final static String rid = "3BE610FB1638B";
  final static String fmtname = "EWD0366DS";
  final int FIELDCOUNT = 22;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldRWDUSR = null;
  private CharacterField fieldRWDTYP = null;
  private DecimalField fieldRWDSTC = null;
  private CharacterField fieldRWDASC = null;
  private DecimalField fieldRWDCTC = null;
  private CharacterField fieldRWDZPC = null;
  private CharacterField fieldRWDSTS = null;
  private DecimalField fieldRWDFRC = null;
  private CharacterField fieldRWDSHN = null;
  private CharacterField fieldRWDSHO = null;
  private DecimalField fieldSWDSTC = null;
  private DecimalField fieldSWDCTC = null;
  private CharacterField fieldSWDMSA = null;
  private CharacterField fieldSWDCET = null;
  private CharacterField fieldSWDZPC = null;
  private CharacterField fieldSWDSTS = null;
  private CharacterField fieldSWDSTCDSC = null;
  private CharacterField fieldSWDCTCDSC = null;
  private CharacterField fieldSWDMSADSC = null;
  private CharacterField fieldSWDSTSDSC = null;
  private DecimalField fieldSWDREC = null;
  private CharacterField fieldSWDOPE = null;

  /**
  * Constructor for EWD0366DSMessage.
  */
  public EWD0366DSMessage()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 258;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldRWDUSR =
    new CharacterField(message, HEADERSIZE + 0, 10, "RWDUSR");
    fields[1] = fieldRWDTYP =
    new CharacterField(message, HEADERSIZE + 10, 1, "RWDTYP");
    fields[2] = fieldRWDSTC =
    new DecimalField(message, HEADERSIZE + 11, 3, 0, "RWDSTC");
    fields[3] = fieldRWDASC =
    new CharacterField(message, HEADERSIZE + 14, 3, "RWDASC");
    fields[4] = fieldRWDCTC =
    new DecimalField(message, HEADERSIZE + 17, 4, 0, "RWDCTC");
    fields[5] = fieldRWDZPC =
    new CharacterField(message, HEADERSIZE + 21, 10, "RWDZPC");
    fields[6] = fieldRWDSTS =
    new CharacterField(message, HEADERSIZE + 31, 1, "RWDSTS");
    fields[7] = fieldRWDFRC =
    new DecimalField(message, HEADERSIZE + 32, 8, 0, "RWDFRC");
    fields[8] = fieldRWDSHN =
    new CharacterField(message, HEADERSIZE + 40, 20, "RWDSHN");
    fields[9] = fieldRWDSHO =
    new CharacterField(message, HEADERSIZE + 60, 20, "RWDSHO");
    fields[10] = fieldSWDSTC =
    new DecimalField(message, HEADERSIZE + 80, 3, 0, "SWDSTC");
    fields[11] = fieldSWDCTC =
    new DecimalField(message, HEADERSIZE + 83, 4, 0, "SWDCTC");
    fields[12] = fieldSWDMSA =
    new CharacterField(message, HEADERSIZE + 87, 5, "SWDMSA");
    fields[13] = fieldSWDCET =
    new CharacterField(message, HEADERSIZE + 92, 6, "SWDCET");
    fields[14] = fieldSWDZPC =
    new CharacterField(message, HEADERSIZE + 98, 10, "SWDZPC");
    fields[15] = fieldSWDSTS =
    new CharacterField(message, HEADERSIZE + 108, 1, "SWDSTS");
    fields[16] = fieldSWDSTCDSC =
    new CharacterField(message, HEADERSIZE + 109, 35, "SWDSTCDSC");
    fields[17] = fieldSWDCTCDSC =
    new CharacterField(message, HEADERSIZE + 144, 35, "SWDCTCDSC");
    fields[18] = fieldSWDMSADSC =
    new CharacterField(message, HEADERSIZE + 179, 35, "SWDMSADSC");
    fields[19] = fieldSWDSTSDSC =
    new CharacterField(message, HEADERSIZE + 214, 35, "SWDSTSDSC");
    fields[20] = fieldSWDREC =
    new DecimalField(message, HEADERSIZE + 249, 8, 0, "SWDREC");
    fields[21] = fieldSWDOPE =
    new CharacterField(message, HEADERSIZE + 257, 1, "SWDOPE");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field RWDUSR using a String value.
  */
  public void setRWDUSR(String newvalue)
  {
    fieldRWDUSR.setString(newvalue);
  }

  /**
  * Get value of field RWDUSR as a String.
  */
  public String getRWDUSR()
  {
    return fieldRWDUSR.getString();
  }

  /**
  * Set field RWDTYP using a String value.
  */
  public void setRWDTYP(String newvalue)
  {
    fieldRWDTYP.setString(newvalue);
  }

  /**
  * Get value of field RWDTYP as a String.
  */
  public String getRWDTYP()
  {
    return fieldRWDTYP.getString();
  }

  /**
  * Set field RWDSTC using a String value.
  */
  public void setRWDSTC(String newvalue)
  {
    fieldRWDSTC.setString(newvalue);
  }

  /**
  * Get value of field RWDSTC as a String.
  */
  public String getRWDSTC()
  {
    return fieldRWDSTC.getString();
  }

  /**
  * Set numeric field RWDSTC using a BigDecimal value.
  */
  public void setRWDSTC(BigDecimal newvalue)
  {
    fieldRWDSTC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field RWDSTC as a BigDecimal.
  */
  public BigDecimal getBigDecimalRWDSTC()
  {
    return fieldRWDSTC.getBigDecimal();
  }

  /**
  * Set field RWDASC using a String value.
  */
  public void setRWDASC(String newvalue)
  {
    fieldRWDASC.setString(newvalue);
  }

  /**
  * Get value of field RWDASC as a String.
  */
  public String getRWDASC()
  {
    return fieldRWDASC.getString();
  }

  /**
  * Set field RWDCTC using a String value.
  */
  public void setRWDCTC(String newvalue)
  {
    fieldRWDCTC.setString(newvalue);
  }

  /**
  * Get value of field RWDCTC as a String.
  */
  public String getRWDCTC()
  {
    return fieldRWDCTC.getString();
  }

  /**
  * Set numeric field RWDCTC using a BigDecimal value.
  */
  public void setRWDCTC(BigDecimal newvalue)
  {
    fieldRWDCTC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field RWDCTC as a BigDecimal.
  */
  public BigDecimal getBigDecimalRWDCTC()
  {
    return fieldRWDCTC.getBigDecimal();
  }

  /**
  * Set field RWDZPC using a String value.
  */
  public void setRWDZPC(String newvalue)
  {
    fieldRWDZPC.setString(newvalue);
  }

  /**
  * Get value of field RWDZPC as a String.
  */
  public String getRWDZPC()
  {
    return fieldRWDZPC.getString();
  }

  /**
  * Set field RWDSTS using a String value.
  */
  public void setRWDSTS(String newvalue)
  {
    fieldRWDSTS.setString(newvalue);
  }

  /**
  * Get value of field RWDSTS as a String.
  */
  public String getRWDSTS()
  {
    return fieldRWDSTS.getString();
  }

  /**
  * Set field RWDFRC using a String value.
  */
  public void setRWDFRC(String newvalue)
  {
    fieldRWDFRC.setString(newvalue);
  }

  /**
  * Get value of field RWDFRC as a String.
  */
  public String getRWDFRC()
  {
    return fieldRWDFRC.getString();
  }

  /**
  * Set numeric field RWDFRC using a BigDecimal value.
  */
  public void setRWDFRC(BigDecimal newvalue)
  {
    fieldRWDFRC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field RWDFRC as a BigDecimal.
  */
  public BigDecimal getBigDecimalRWDFRC()
  {
    return fieldRWDFRC.getBigDecimal();
  }

  /**
  * Set field RWDSHN using a String value.
  */
  public void setRWDSHN(String newvalue)
  {
    fieldRWDSHN.setString(newvalue);
  }

  /**
  * Get value of field RWDSHN as a String.
  */
  public String getRWDSHN()
  {
    return fieldRWDSHN.getString();
  }

  /**
  * Set field RWDSHO using a String value.
  */
  public void setRWDSHO(String newvalue)
  {
    fieldRWDSHO.setString(newvalue);
  }

  /**
  * Get value of field RWDSHO as a String.
  */
  public String getRWDSHO()
  {
    return fieldRWDSHO.getString();
  }

  /**
  * Set field SWDSTC using a String value.
  */
  public void setSWDSTC(String newvalue)
  {
    fieldSWDSTC.setString(newvalue);
  }

  /**
  * Get value of field SWDSTC as a String.
  */
  public String getSWDSTC()
  {
    return fieldSWDSTC.getString();
  }

  /**
  * Set numeric field SWDSTC using a BigDecimal value.
  */
  public void setSWDSTC(BigDecimal newvalue)
  {
    fieldSWDSTC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field SWDSTC as a BigDecimal.
  */
  public BigDecimal getBigDecimalSWDSTC()
  {
    return fieldSWDSTC.getBigDecimal();
  }

  /**
  * Set field SWDCTC using a String value.
  */
  public void setSWDCTC(String newvalue)
  {
    fieldSWDCTC.setString(newvalue);
  }

  /**
  * Get value of field SWDCTC as a String.
  */
  public String getSWDCTC()
  {
    return fieldSWDCTC.getString();
  }

  /**
  * Set numeric field SWDCTC using a BigDecimal value.
  */
  public void setSWDCTC(BigDecimal newvalue)
  {
    fieldSWDCTC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field SWDCTC as a BigDecimal.
  */
  public BigDecimal getBigDecimalSWDCTC()
  {
    return fieldSWDCTC.getBigDecimal();
  }

  /**
  * Set field SWDMSA using a String value.
  */
  public void setSWDMSA(String newvalue)
  {
    fieldSWDMSA.setString(newvalue);
  }

  /**
  * Get value of field SWDMSA as a String.
  */
  public String getSWDMSA()
  {
    return fieldSWDMSA.getString();
  }

  /**
  * Set field SWDCET using a String value.
  */
  public void setSWDCET(String newvalue)
  {
    fieldSWDCET.setString(newvalue);
  }

  /**
  * Get value of field SWDCET as a String.
  */
  public String getSWDCET()
  {
    return fieldSWDCET.getString();
  }

  /**
  * Set field SWDZPC using a String value.
  */
  public void setSWDZPC(String newvalue)
  {
    fieldSWDZPC.setString(newvalue);
  }

  /**
  * Get value of field SWDZPC as a String.
  */
  public String getSWDZPC()
  {
    return fieldSWDZPC.getString();
  }

  /**
  * Set field SWDSTS using a String value.
  */
  public void setSWDSTS(String newvalue)
  {
    fieldSWDSTS.setString(newvalue);
  }

  /**
  * Get value of field SWDSTS as a String.
  */
  public String getSWDSTS()
  {
    return fieldSWDSTS.getString();
  }

  /**
  * Set field SWDSTCDSC using a String value.
  */
  public void setSWDSTCDSC(String newvalue)
  {
    fieldSWDSTCDSC.setString(newvalue);
  }

  /**
  * Get value of field SWDSTCDSC as a String.
  */
  public String getSWDSTCDSC()
  {
    return fieldSWDSTCDSC.getString();
  }

  /**
  * Set field SWDCTCDSC using a String value.
  */
  public void setSWDCTCDSC(String newvalue)
  {
    fieldSWDCTCDSC.setString(newvalue);
  }

  /**
  * Get value of field SWDCTCDSC as a String.
  */
  public String getSWDCTCDSC()
  {
    return fieldSWDCTCDSC.getString();
  }

  /**
  * Set field SWDMSADSC using a String value.
  */
  public void setSWDMSADSC(String newvalue)
  {
    fieldSWDMSADSC.setString(newvalue);
  }

  /**
  * Get value of field SWDMSADSC as a String.
  */
  public String getSWDMSADSC()
  {
    return fieldSWDMSADSC.getString();
  }

  /**
  * Set field SWDSTSDSC using a String value.
  */
  public void setSWDSTSDSC(String newvalue)
  {
    fieldSWDSTSDSC.setString(newvalue);
  }

  /**
  * Get value of field SWDSTSDSC as a String.
  */
  public String getSWDSTSDSC()
  {
    return fieldSWDSTSDSC.getString();
  }

  /**
  * Set field SWDREC using a String value.
  */
  public void setSWDREC(String newvalue)
  {
    fieldSWDREC.setString(newvalue);
  }

  /**
  * Get value of field SWDREC as a String.
  */
  public String getSWDREC()
  {
    return fieldSWDREC.getString();
  }

  /**
  * Set numeric field SWDREC using a BigDecimal value.
  */
  public void setSWDREC(BigDecimal newvalue)
  {
    fieldSWDREC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field SWDREC as a BigDecimal.
  */
  public BigDecimal getBigDecimalSWDREC()
  {
    return fieldSWDREC.getBigDecimal();
  }

  /**
  * Set field SWDOPE using a String value.
  */
  public void setSWDOPE(String newvalue)
  {
    fieldSWDOPE.setString(newvalue);
  }

  /**
  * Get value of field SWDOPE as a String.
  */
  public String getSWDOPE()
  {
    return fieldSWDOPE.getString();
  }

}
