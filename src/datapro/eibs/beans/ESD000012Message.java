package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from ESD000012 physical file definition.
* 
* File level identifier is 1030129195628.
* Record format level identifier is 378A960177593.
*/

public class ESD000012Message extends MessageRecord
{
  final static String fldnames[] = {
                                     "H12USR",
                                     "H12PGM",
                                     "H12TIM",
                                     "H12SCR",
                                     "H12OPE",
                                     "H12MAS",
                                     "H12WK1",
                                     "H12WK2",
                                     "H12WK3",
                                     "E12ACC",
                                     "E12LNE",
                                     "E12TYP",
                                     "E12SEQ",
                                     "E12DSC",
                                     "E12F01",
                                     "E12RCN"
                                   };
  final static String tnames[] = {
                                   "H12USR",
                                   "H12PGM",
                                   "H12TIM",
                                   "H12SCR",
                                   "H12OPE",
                                   "H12MAS",
                                   "H12WK1",
                                   "H12WK2",
                                   "H12WK3",
                                   "E12ACC",
                                   "E12LNE",
                                   "E12TYP",
                                   "E12SEQ",
                                   "E12DSC",
                                   "E12F01",
                                   "E12RCN"
                                 };
  final static String fid = "1030129195628";
  final static String rid = "378A960177593";
  final static String fmtname = "ESD000012";
  final int FIELDCOUNT = 16;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldH12USR = null;
  private CharacterField fieldH12PGM = null;
  private CharacterField fieldH12TIM = null;
  private CharacterField fieldH12SCR = null;
  private CharacterField fieldH12OPE = null;
  private CharacterField fieldH12MAS = null;
  private CharacterField fieldH12WK1 = null;
  private CharacterField fieldH12WK2 = null;
  private CharacterField fieldH12WK3 = null;
  private DecimalField fieldE12ACC = null;
  private DecimalField fieldE12LNE = null;
  private CharacterField fieldE12TYP = null;
  private DecimalField fieldE12SEQ = null;
  private CharacterField fieldE12DSC = null;
  private CharacterField fieldE12F01 = null;
  private DecimalField fieldE12RCN = null;

  /**
  * Constructor for ESD000012Message.
  */
  public ESD000012Message()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 158;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldH12USR =
    new CharacterField(message, HEADERSIZE + 0, 10, "H12USR");
    fields[1] = fieldH12PGM =
    new CharacterField(message, HEADERSIZE + 10, 10, "H12PGM");
    fields[2] = fieldH12TIM =
    new CharacterField(message, HEADERSIZE + 20, 12, "H12TIM");
    fields[3] = fieldH12SCR =
    new CharacterField(message, HEADERSIZE + 32, 2, "H12SCR");
    fields[4] = fieldH12OPE =
    new CharacterField(message, HEADERSIZE + 34, 4, "H12OPE");
    fields[5] = fieldH12MAS =
    new CharacterField(message, HEADERSIZE + 38, 1, "H12MAS");
    fields[6] = fieldH12WK1 =
    new CharacterField(message, HEADERSIZE + 39, 1, "H12WK1");
    fields[7] = fieldH12WK2 =
    new CharacterField(message, HEADERSIZE + 40, 1, "H12WK2");
    fields[8] = fieldH12WK3 =
    new CharacterField(message, HEADERSIZE + 41, 1, "H12WK3");
    fields[9] = fieldE12ACC =
    new DecimalField(message, HEADERSIZE + 42, 13, 0, "E12ACC");
    fields[10] = fieldE12LNE =
    new DecimalField(message, HEADERSIZE + 55, 5, 0, "E12LNE");
    fields[11] = fieldE12TYP =
    new CharacterField(message, HEADERSIZE + 60, 1, "E12TYP");
    fields[12] = fieldE12SEQ =
    new DecimalField(message, HEADERSIZE + 61, 4, 0, "E12SEQ");
    fields[13] = fieldE12DSC =
    new CharacterField(message, HEADERSIZE + 65, 80, "E12DSC");
    fields[14] = fieldE12F01 =
    new CharacterField(message, HEADERSIZE + 145, 3, "E12F01");
    fields[15] = fieldE12RCN =
    new DecimalField(message, HEADERSIZE + 148, 10, 0, "E12RCN");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field H12USR using a String value.
  */
  public void setH12USR(String newvalue)
  {
    fieldH12USR.setString(newvalue);
  }

  /**
  * Get value of field H12USR as a String.
  */
  public String getH12USR()
  {
    return fieldH12USR.getString();
  }

  /**
  * Set field H12PGM using a String value.
  */
  public void setH12PGM(String newvalue)
  {
    fieldH12PGM.setString(newvalue);
  }

  /**
  * Get value of field H12PGM as a String.
  */
  public String getH12PGM()
  {
    return fieldH12PGM.getString();
  }

  /**
  * Set field H12TIM using a String value.
  */
  public void setH12TIM(String newvalue)
  {
    fieldH12TIM.setString(newvalue);
  }

  /**
  * Get value of field H12TIM as a String.
  */
  public String getH12TIM()
  {
    return fieldH12TIM.getString();
  }

  /**
  * Set field H12SCR using a String value.
  */
  public void setH12SCR(String newvalue)
  {
    fieldH12SCR.setString(newvalue);
  }

  /**
  * Get value of field H12SCR as a String.
  */
  public String getH12SCR()
  {
    return fieldH12SCR.getString();
  }

  /**
  * Set field H12OPE using a String value.
  */
  public void setH12OPE(String newvalue)
  {
    fieldH12OPE.setString(newvalue);
  }

  /**
  * Get value of field H12OPE as a String.
  */
  public String getH12OPE()
  {
    return fieldH12OPE.getString();
  }

  /**
  * Set field H12MAS using a String value.
  */
  public void setH12MAS(String newvalue)
  {
    fieldH12MAS.setString(newvalue);
  }

  /**
  * Get value of field H12MAS as a String.
  */
  public String getH12MAS()
  {
    return fieldH12MAS.getString();
  }

  /**
  * Set field H12WK1 using a String value.
  */
  public void setH12WK1(String newvalue)
  {
    fieldH12WK1.setString(newvalue);
  }

  /**
  * Get value of field H12WK1 as a String.
  */
  public String getH12WK1()
  {
    return fieldH12WK1.getString();
  }

  /**
  * Set field H12WK2 using a String value.
  */
  public void setH12WK2(String newvalue)
  {
    fieldH12WK2.setString(newvalue);
  }

  /**
  * Get value of field H12WK2 as a String.
  */
  public String getH12WK2()
  {
    return fieldH12WK2.getString();
  }

  /**
  * Set field H12WK3 using a String value.
  */
  public void setH12WK3(String newvalue)
  {
    fieldH12WK3.setString(newvalue);
  }

  /**
  * Get value of field H12WK3 as a String.
  */
  public String getH12WK3()
  {
    return fieldH12WK3.getString();
  }

  /**
  * Set field E12ACC using a String value.
  */
  public void setE12ACC(String newvalue)
  {
    fieldE12ACC.setString(newvalue);
  }

  /**
  * Get value of field E12ACC as a String.
  */
  public String getE12ACC()
  {
    return fieldE12ACC.getString();
  }

  /**
  * Set numeric field E12ACC using a BigDecimal value.
  */
  public void setE12ACC(BigDecimal newvalue)
  {
    fieldE12ACC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E12ACC as a BigDecimal.
  */
  public BigDecimal getBigDecimalE12ACC()
  {
    return fieldE12ACC.getBigDecimal();
  }

  /**
  * Set field E12LNE using a String value.
  */
  public void setE12LNE(String newvalue)
  {
    fieldE12LNE.setString(newvalue);
  }

  /**
  * Get value of field E12LNE as a String.
  */
  public String getE12LNE()
  {
    return fieldE12LNE.getString();
  }

  /**
  * Set numeric field E12LNE using a BigDecimal value.
  */
  public void setE12LNE(BigDecimal newvalue)
  {
    fieldE12LNE.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E12LNE as a BigDecimal.
  */
  public BigDecimal getBigDecimalE12LNE()
  {
    return fieldE12LNE.getBigDecimal();
  }

  /**
  * Set field E12TYP using a String value.
  */
  public void setE12TYP(String newvalue)
  {
    fieldE12TYP.setString(newvalue);
  }

  /**
  * Get value of field E12TYP as a String.
  */
  public String getE12TYP()
  {
    return fieldE12TYP.getString();
  }

  /**
  * Set field E12SEQ using a String value.
  */
  public void setE12SEQ(String newvalue)
  {
    fieldE12SEQ.setString(newvalue);
  }

  /**
  * Get value of field E12SEQ as a String.
  */
  public String getE12SEQ()
  {
    return fieldE12SEQ.getString();
  }

  /**
  * Set numeric field E12SEQ using a BigDecimal value.
  */
  public void setE12SEQ(BigDecimal newvalue)
  {
    fieldE12SEQ.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E12SEQ as a BigDecimal.
  */
  public BigDecimal getBigDecimalE12SEQ()
  {
    return fieldE12SEQ.getBigDecimal();
  }

  /**
  * Set field E12DSC using a String value.
  */
  public void setE12DSC(String newvalue)
  {
    fieldE12DSC.setString(newvalue);
  }

  /**
  * Get value of field E12DSC as a String.
  */
  public String getE12DSC()
  {
    return fieldE12DSC.getString();
  }

  /**
  * Set field E12F01 using a String value.
  */
  public void setE12F01(String newvalue)
  {
    fieldE12F01.setString(newvalue);
  }

  /**
  * Get value of field E12F01 as a String.
  */
  public String getE12F01()
  {
    return fieldE12F01.getString();
  }

  /**
  * Set field E12RCN using a String value.
  */
  public void setE12RCN(String newvalue)
  {
    fieldE12RCN.setString(newvalue);
  }

  /**
  * Get value of field E12RCN as a String.
  */
  public String getE12RCN()
  {
    return fieldE12RCN.getString();
  }

  /**
  * Set numeric field E12RCN using a BigDecimal value.
  */
  public void setE12RCN(BigDecimal newvalue)
  {
    fieldE12RCN.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E12RCN as a BigDecimal.
  */
  public BigDecimal getBigDecimalE12RCN()
  {
    return fieldE12RCN.getBigDecimal();
  }

}
