package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from ESS024002 physical file definition.
* 
* File level identifier is 1060804175723.
* Record format level identifier is 389BF2DAB0C64.
*/

public class ESS024002Message extends MessageRecord
{
  final static String fldnames[] = {
                                     "H02USERID",
                                     "H02PROGRM",
                                     "H02TIMSYS",
                                     "H02SCRCOD",
                                     "H02OPECOD",
                                     "H02FLGMAS",
                                     "H02FLGWK1",
                                     "H02FLGWK2",
                                     "H02FLGWK3",
                                     "E02NUMREF",
                                     "E02FLDDSC",
                                     "E02VALBEF",
                                     "E02VALAFT",
                                     "E02DATER1",
                                     "E02DATER2",
                                     "E02DATER3",
                                     "E02USERID",
                                     "E02VALTIM",
                                     "E02APLCDE",
                                     "E02CDTYPE",
                                     "E02NUMACC"
                                   };
  final static String tnames[] = {
                                   "H02USERID",
                                   "H02PROGRM",
                                   "H02TIMSYS",
                                   "H02SCRCOD",
                                   "H02OPECOD",
                                   "H02FLGMAS",
                                   "H02FLGWK1",
                                   "H02FLGWK2",
                                   "H02FLGWK3",
                                   "E02NUMREF",
                                   "E02FLDDSC",
                                   "E02VALBEF",
                                   "E02VALAFT",
                                   "E02DATER1",
                                   "E02DATER2",
                                   "E02DATER3",
                                   "E02USERID",
                                   "E02VALTIM",
                                   "E02APLCDE",
                                   "E02CDTYPE",
                                   "E02NUMACC"
                                 };
  final static String fid = "1060804175723";
  final static String rid = "389BF2DAB0C64";
  final static String fmtname = "ESS024002";
  final int FIELDCOUNT = 21;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldH02USERID = null;
  private CharacterField fieldH02PROGRM = null;
  private CharacterField fieldH02TIMSYS = null;
  private CharacterField fieldH02SCRCOD = null;
  private CharacterField fieldH02OPECOD = null;
  private CharacterField fieldH02FLGMAS = null;
  private CharacterField fieldH02FLGWK1 = null;
  private CharacterField fieldH02FLGWK2 = null;
  private CharacterField fieldH02FLGWK3 = null;
  private CharacterField fieldE02NUMREF = null;
  private CharacterField fieldE02FLDDSC = null;
  private CharacterField fieldE02VALBEF = null;
  private CharacterField fieldE02VALAFT = null;
  private DecimalField fieldE02DATER1 = null;
  private DecimalField fieldE02DATER2 = null;
  private DecimalField fieldE02DATER3 = null;
  private CharacterField fieldE02USERID = null;
  private DecimalField fieldE02VALTIM = null;
  private CharacterField fieldE02APLCDE = null;
  private CharacterField fieldE02CDTYPE = null;
  private DecimalField fieldE02NUMACC = null;

  /**
  * Constructor for ESS024002Message.
  */
  public ESS024002Message()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 174;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldH02USERID =
    new CharacterField(message, HEADERSIZE + 0, 10, "H02USERID");
    fields[1] = fieldH02PROGRM =
    new CharacterField(message, HEADERSIZE + 10, 10, "H02PROGRM");
    fields[2] = fieldH02TIMSYS =
    new CharacterField(message, HEADERSIZE + 20, 12, "H02TIMSYS");
    fields[3] = fieldH02SCRCOD =
    new CharacterField(message, HEADERSIZE + 32, 2, "H02SCRCOD");
    fields[4] = fieldH02OPECOD =
    new CharacterField(message, HEADERSIZE + 34, 4, "H02OPECOD");
    fields[5] = fieldH02FLGMAS =
    new CharacterField(message, HEADERSIZE + 38, 1, "H02FLGMAS");
    fields[6] = fieldH02FLGWK1 =
    new CharacterField(message, HEADERSIZE + 39, 1, "H02FLGWK1");
    fields[7] = fieldH02FLGWK2 =
    new CharacterField(message, HEADERSIZE + 40, 1, "H02FLGWK2");
    fields[8] = fieldH02FLGWK3 =
    new CharacterField(message, HEADERSIZE + 41, 1, "H02FLGWK3");
    fields[9] = fieldE02NUMREF =
    new CharacterField(message, HEADERSIZE + 42, 12, "E02NUMREF");
    fields[10] = fieldE02FLDDSC =
    new CharacterField(message, HEADERSIZE + 54, 35, "E02FLDDSC");
    fields[11] = fieldE02VALBEF =
    new CharacterField(message, HEADERSIZE + 89, 20, "E02VALBEF");
    fields[12] = fieldE02VALAFT =
    new CharacterField(message, HEADERSIZE + 109, 20, "E02VALAFT");
    fields[13] = fieldE02DATER1 =
    new DecimalField(message, HEADERSIZE + 129, 3, 0, "E02DATER1");
    fields[14] = fieldE02DATER2 =
    new DecimalField(message, HEADERSIZE + 132, 3, 0, "E02DATER2");
    fields[15] = fieldE02DATER3 =
    new DecimalField(message, HEADERSIZE + 135, 3, 0, "E02DATER3");
    fields[16] = fieldE02USERID =
    new CharacterField(message, HEADERSIZE + 138, 10, "E02USERID");
    fields[17] = fieldE02VALTIM =
    new DecimalField(message, HEADERSIZE + 148, 7, 0, "E02VALTIM");
    fields[18] = fieldE02APLCDE =
    new CharacterField(message, HEADERSIZE + 155, 2, "E02APLCDE");
    fields[19] = fieldE02CDTYPE =
    new CharacterField(message, HEADERSIZE + 157, 4, "E02CDTYPE");
    fields[20] = fieldE02NUMACC =
    new DecimalField(message, HEADERSIZE + 161, 13, 0, "E02NUMACC");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field H02USERID using a String value.
  */
  public void setH02USERID(String newvalue)
  {
    fieldH02USERID.setString(newvalue);
  }

  /**
  * Get value of field H02USERID as a String.
  */
  public String getH02USERID()
  {
    return fieldH02USERID.getString();
  }

  /**
  * Set field H02PROGRM using a String value.
  */
  public void setH02PROGRM(String newvalue)
  {
    fieldH02PROGRM.setString(newvalue);
  }

  /**
  * Get value of field H02PROGRM as a String.
  */
  public String getH02PROGRM()
  {
    return fieldH02PROGRM.getString();
  }

  /**
  * Set field H02TIMSYS using a String value.
  */
  public void setH02TIMSYS(String newvalue)
  {
    fieldH02TIMSYS.setString(newvalue);
  }

  /**
  * Get value of field H02TIMSYS as a String.
  */
  public String getH02TIMSYS()
  {
    return fieldH02TIMSYS.getString();
  }

  /**
  * Set field H02SCRCOD using a String value.
  */
  public void setH02SCRCOD(String newvalue)
  {
    fieldH02SCRCOD.setString(newvalue);
  }

  /**
  * Get value of field H02SCRCOD as a String.
  */
  public String getH02SCRCOD()
  {
    return fieldH02SCRCOD.getString();
  }

  /**
  * Set field H02OPECOD using a String value.
  */
  public void setH02OPECOD(String newvalue)
  {
    fieldH02OPECOD.setString(newvalue);
  }

  /**
  * Get value of field H02OPECOD as a String.
  */
  public String getH02OPECOD()
  {
    return fieldH02OPECOD.getString();
  }

  /**
  * Set field H02FLGMAS using a String value.
  */
  public void setH02FLGMAS(String newvalue)
  {
    fieldH02FLGMAS.setString(newvalue);
  }

  /**
  * Get value of field H02FLGMAS as a String.
  */
  public String getH02FLGMAS()
  {
    return fieldH02FLGMAS.getString();
  }

  /**
  * Set field H02FLGWK1 using a String value.
  */
  public void setH02FLGWK1(String newvalue)
  {
    fieldH02FLGWK1.setString(newvalue);
  }

  /**
  * Get value of field H02FLGWK1 as a String.
  */
  public String getH02FLGWK1()
  {
    return fieldH02FLGWK1.getString();
  }

  /**
  * Set field H02FLGWK2 using a String value.
  */
  public void setH02FLGWK2(String newvalue)
  {
    fieldH02FLGWK2.setString(newvalue);
  }

  /**
  * Get value of field H02FLGWK2 as a String.
  */
  public String getH02FLGWK2()
  {
    return fieldH02FLGWK2.getString();
  }

  /**
  * Set field H02FLGWK3 using a String value.
  */
  public void setH02FLGWK3(String newvalue)
  {
    fieldH02FLGWK3.setString(newvalue);
  }

  /**
  * Get value of field H02FLGWK3 as a String.
  */
  public String getH02FLGWK3()
  {
    return fieldH02FLGWK3.getString();
  }

  /**
  * Set field E02NUMREF using a String value.
  */
  public void setE02NUMREF(String newvalue)
  {
    fieldE02NUMREF.setString(newvalue);
  }

  /**
  * Get value of field E02NUMREF as a String.
  */
  public String getE02NUMREF()
  {
    return fieldE02NUMREF.getString();
  }

  /**
  * Set field E02FLDDSC using a String value.
  */
  public void setE02FLDDSC(String newvalue)
  {
    fieldE02FLDDSC.setString(newvalue);
  }

  /**
  * Get value of field E02FLDDSC as a String.
  */
  public String getE02FLDDSC()
  {
    return fieldE02FLDDSC.getString();
  }

  /**
  * Set field E02VALBEF using a String value.
  */
  public void setE02VALBEF(String newvalue)
  {
    fieldE02VALBEF.setString(newvalue);
  }

  /**
  * Get value of field E02VALBEF as a String.
  */
  public String getE02VALBEF()
  {
    return fieldE02VALBEF.getString();
  }

  /**
  * Set field E02VALAFT using a String value.
  */
  public void setE02VALAFT(String newvalue)
  {
    fieldE02VALAFT.setString(newvalue);
  }

  /**
  * Get value of field E02VALAFT as a String.
  */
  public String getE02VALAFT()
  {
    return fieldE02VALAFT.getString();
  }

  /**
  * Set field E02DATER1 using a String value.
  */
  public void setE02DATER1(String newvalue)
  {
    fieldE02DATER1.setString(newvalue);
  }

  /**
  * Get value of field E02DATER1 as a String.
  */
  public String getE02DATER1()
  {
    return fieldE02DATER1.getString();
  }

  /**
  * Set numeric field E02DATER1 using a BigDecimal value.
  */
  public void setE02DATER1(BigDecimal newvalue)
  {
    fieldE02DATER1.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E02DATER1 as a BigDecimal.
  */
  public BigDecimal getBigDecimalE02DATER1()
  {
    return fieldE02DATER1.getBigDecimal();
  }

  /**
  * Set field E02DATER2 using a String value.
  */
  public void setE02DATER2(String newvalue)
  {
    fieldE02DATER2.setString(newvalue);
  }

  /**
  * Get value of field E02DATER2 as a String.
  */
  public String getE02DATER2()
  {
    return fieldE02DATER2.getString();
  }

  /**
  * Set numeric field E02DATER2 using a BigDecimal value.
  */
  public void setE02DATER2(BigDecimal newvalue)
  {
    fieldE02DATER2.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E02DATER2 as a BigDecimal.
  */
  public BigDecimal getBigDecimalE02DATER2()
  {
    return fieldE02DATER2.getBigDecimal();
  }

  /**
  * Set field E02DATER3 using a String value.
  */
  public void setE02DATER3(String newvalue)
  {
    fieldE02DATER3.setString(newvalue);
  }

  /**
  * Get value of field E02DATER3 as a String.
  */
  public String getE02DATER3()
  {
    return fieldE02DATER3.getString();
  }

  /**
  * Set numeric field E02DATER3 using a BigDecimal value.
  */
  public void setE02DATER3(BigDecimal newvalue)
  {
    fieldE02DATER3.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E02DATER3 as a BigDecimal.
  */
  public BigDecimal getBigDecimalE02DATER3()
  {
    return fieldE02DATER3.getBigDecimal();
  }

  /**
  * Set field E02USERID using a String value.
  */
  public void setE02USERID(String newvalue)
  {
    fieldE02USERID.setString(newvalue);
  }

  /**
  * Get value of field E02USERID as a String.
  */
  public String getE02USERID()
  {
    return fieldE02USERID.getString();
  }

  /**
  * Set field E02VALTIM using a String value.
  */
  public void setE02VALTIM(String newvalue)
  {
    fieldE02VALTIM.setString(newvalue);
  }

  /**
  * Get value of field E02VALTIM as a String.
  */
  public String getE02VALTIM()
  {
    return fieldE02VALTIM.getString();
  }

  /**
  * Set numeric field E02VALTIM using a BigDecimal value.
  */
  public void setE02VALTIM(BigDecimal newvalue)
  {
    fieldE02VALTIM.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E02VALTIM as a BigDecimal.
  */
  public BigDecimal getBigDecimalE02VALTIM()
  {
    return fieldE02VALTIM.getBigDecimal();
  }

  /**
  * Set field E02APLCDE using a String value.
  */
  public void setE02APLCDE(String newvalue)
  {
    fieldE02APLCDE.setString(newvalue);
  }

  /**
  * Get value of field E02APLCDE as a String.
  */
  public String getE02APLCDE()
  {
    return fieldE02APLCDE.getString();
  }

  /**
  * Set field E02CDTYPE using a String value.
  */
  public void setE02CDTYPE(String newvalue)
  {
    fieldE02CDTYPE.setString(newvalue);
  }

  /**
  * Get value of field E02CDTYPE as a String.
  */
  public String getE02CDTYPE()
  {
    return fieldE02CDTYPE.getString();
  }

  /**
  * Set field E02NUMACC using a String value.
  */
  public void setE02NUMACC(String newvalue)
  {
    fieldE02NUMACC.setString(newvalue);
  }

  /**
  * Get value of field E02NUMACC as a String.
  */
  public String getE02NUMACC()
  {
    return fieldE02NUMACC.getString();
  }

  /**
  * Set numeric field E02NUMACC using a BigDecimal value.
  */
  public void setE02NUMACC(BigDecimal newvalue)
  {
    fieldE02NUMACC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E02NUMACC as a BigDecimal.
  */
  public BigDecimal getBigDecimalE02NUMACC()
  {
    return fieldE02NUMACC.getBigDecimal();
  }

}
