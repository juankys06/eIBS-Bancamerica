package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from EUT0811DS physical file definition.
* 
* File level identifier is 1030121192014.
* Record format level identifier is 2AF1403382B32.
*/

public class EUT0811DSMessage extends MessageRecord
{
  final static String fldnames[] = {
                                     "EUTFMT",
                                     "EUTCON",
                                     "EUTOPE",
                                     "EUTFLD"
                                   };
  final static String tnames[] = {
                                   "EUTFMT",
                                   "EUTCON",
                                   "EUTOPE",
                                   "EUTFLD"
                                 };
  final static String fid = "1030121192014";
  final static String rid = "2AF1403382B32";
  final static String fmtname = "EUT0811DS";
  final int FIELDCOUNT = 4;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldEUTFMT = null;
  private DecimalField fieldEUTCON = null;
  private CharacterField fieldEUTOPE = null;
  private CharacterField fieldEUTFLD = null;

  /**
  * Constructor for EUT0811DSMessage.
  */
  public EUT0811DSMessage()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 7515;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldEUTFMT =
    new CharacterField(message, HEADERSIZE + 0, 10, "EUTFMT");
    fields[1] = fieldEUTCON =
    new DecimalField(message, HEADERSIZE + 10, 4, 0, "EUTCON");
    fields[2] = fieldEUTOPE =
    new CharacterField(message, HEADERSIZE + 14, 1, "EUTOPE");
    fields[3] = fieldEUTFLD =
    new CharacterField(message, HEADERSIZE + 15, 7500, "EUTFLD");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field EUTFMT using a String value.
  */
  public void setEUTFMT(String newvalue)
  {
    fieldEUTFMT.setString(newvalue);
  }

  /**
  * Get value of field EUTFMT as a String.
  */
  public String getEUTFMT()
  {
    return fieldEUTFMT.getString();
  }

  /**
  * Set field EUTCON using a String value.
  */
  public void setEUTCON(String newvalue)
  {
    fieldEUTCON.setString(newvalue);
  }

  /**
  * Get value of field EUTCON as a String.
  */
  public String getEUTCON()
  {
    return fieldEUTCON.getString();
  }

  /**
  * Set numeric field EUTCON using a BigDecimal value.
  */
  public void setEUTCON(BigDecimal newvalue)
  {
    fieldEUTCON.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EUTCON as a BigDecimal.
  */
  public BigDecimal getBigDecimalEUTCON()
  {
    return fieldEUTCON.getBigDecimal();
  }

  /**
  * Set field EUTOPE using a String value.
  */
  public void setEUTOPE(String newvalue)
  {
    fieldEUTOPE.setString(newvalue);
  }

  /**
  * Get value of field EUTOPE as a String.
  */
  public String getEUTOPE()
  {
    return fieldEUTOPE.getString();
  }

  /**
  * Set field EUTFLD using a String value.
  */
  public void setEUTFLD(String newvalue)
  {
    fieldEUTFLD.setString(newvalue);
  }

  /**
  * Get value of field EUTFLD as a String.
  */
  public String getEUTFLD()
  {
    return fieldEUTFLD.getString();
  }

}
