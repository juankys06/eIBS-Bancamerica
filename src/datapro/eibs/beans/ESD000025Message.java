package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from ESD000025 physical file definition.
* 
* File level identifier is 1030129195633.
* Record format level identifier is 5CC4460DC396B.
*/

public class ESD000025Message extends MessageRecord
{
  final static String fldnames[] = {
                                     "H25USERID",
                                     "H25PROGRM",
                                     "H25TIMSYS",
                                     "H25SCRCOD",
                                     "H25OPECOD",
                                     "H25FLGMAS",
                                     "H25FLGWK1",
                                     "H25FLGWK2",
                                     "H25FLGWK3",
                                     "E25NUMACC",
                                     "E25CUSCUN",
                                     "E25ACTAMT",
                                     "E25PASAMT"
                                   };
  final static String tnames[] = {
                                   "H25USERID",
                                   "H25PROGRM",
                                   "H25TIMSYS",
                                   "H25SCRCOD",
                                   "H25OPECOD",
                                   "H25FLGMAS",
                                   "H25FLGWK1",
                                   "H25FLGWK2",
                                   "H25FLGWK3",
                                   "E25NUMACC",
                                   "E25CUSCUN",
                                   "E25ACTAMT",
                                   "E25PASAMT"
                                 };
  final static String fid = "1030129195633";
  final static String rid = "5CC4460DC396B";
  final static String fmtname = "ESD000025";
  final int FIELDCOUNT = 13;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldH25USERID = null;
  private CharacterField fieldH25PROGRM = null;
  private CharacterField fieldH25TIMSYS = null;
  private CharacterField fieldH25SCRCOD = null;
  private CharacterField fieldH25OPECOD = null;
  private CharacterField fieldH25FLGMAS = null;
  private CharacterField fieldH25FLGWK1 = null;
  private CharacterField fieldH25FLGWK2 = null;
  private CharacterField fieldH25FLGWK3 = null;
  private DecimalField fieldE25NUMACC = null;
  private DecimalField fieldE25CUSCUN = null;
  private DecimalField fieldE25ACTAMT = null;
  private DecimalField fieldE25PASAMT = null;

  /**
  * Constructor for ESD000025Message.
  */
  public ESD000025Message()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 95;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldH25USERID =
    new CharacterField(message, HEADERSIZE + 0, 10, "H25USERID");
    fields[1] = fieldH25PROGRM =
    new CharacterField(message, HEADERSIZE + 10, 10, "H25PROGRM");
    fields[2] = fieldH25TIMSYS =
    new CharacterField(message, HEADERSIZE + 20, 12, "H25TIMSYS");
    fields[3] = fieldH25SCRCOD =
    new CharacterField(message, HEADERSIZE + 32, 2, "H25SCRCOD");
    fields[4] = fieldH25OPECOD =
    new CharacterField(message, HEADERSIZE + 34, 4, "H25OPECOD");
    fields[5] = fieldH25FLGMAS =
    new CharacterField(message, HEADERSIZE + 38, 1, "H25FLGMAS");
    fields[6] = fieldH25FLGWK1 =
    new CharacterField(message, HEADERSIZE + 39, 1, "H25FLGWK1");
    fields[7] = fieldH25FLGWK2 =
    new CharacterField(message, HEADERSIZE + 40, 1, "H25FLGWK2");
    fields[8] = fieldH25FLGWK3 =
    new CharacterField(message, HEADERSIZE + 41, 1, "H25FLGWK3");
    fields[9] = fieldE25NUMACC =
    new DecimalField(message, HEADERSIZE + 42, 13, 0, "E25NUMACC");
    fields[10] = fieldE25CUSCUN =
    new DecimalField(message, HEADERSIZE + 55, 10, 0, "E25CUSCUN");
    fields[11] = fieldE25ACTAMT =
    new DecimalField(message, HEADERSIZE + 65, 15, 2, "E25ACTAMT");
    fields[12] = fieldE25PASAMT =
    new DecimalField(message, HEADERSIZE + 80, 15, 2, "E25PASAMT");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field H25USERID using a String value.
  */
  public void setH25USERID(String newvalue)
  {
    fieldH25USERID.setString(newvalue);
  }

  /**
  * Get value of field H25USERID as a String.
  */
  public String getH25USERID()
  {
    return fieldH25USERID.getString();
  }

  /**
  * Set field H25PROGRM using a String value.
  */
  public void setH25PROGRM(String newvalue)
  {
    fieldH25PROGRM.setString(newvalue);
  }

  /**
  * Get value of field H25PROGRM as a String.
  */
  public String getH25PROGRM()
  {
    return fieldH25PROGRM.getString();
  }

  /**
  * Set field H25TIMSYS using a String value.
  */
  public void setH25TIMSYS(String newvalue)
  {
    fieldH25TIMSYS.setString(newvalue);
  }

  /**
  * Get value of field H25TIMSYS as a String.
  */
  public String getH25TIMSYS()
  {
    return fieldH25TIMSYS.getString();
  }

  /**
  * Set field H25SCRCOD using a String value.
  */
  public void setH25SCRCOD(String newvalue)
  {
    fieldH25SCRCOD.setString(newvalue);
  }

  /**
  * Get value of field H25SCRCOD as a String.
  */
  public String getH25SCRCOD()
  {
    return fieldH25SCRCOD.getString();
  }

  /**
  * Set field H25OPECOD using a String value.
  */
  public void setH25OPECOD(String newvalue)
  {
    fieldH25OPECOD.setString(newvalue);
  }

  /**
  * Get value of field H25OPECOD as a String.
  */
  public String getH25OPECOD()
  {
    return fieldH25OPECOD.getString();
  }

  /**
  * Set field H25FLGMAS using a String value.
  */
  public void setH25FLGMAS(String newvalue)
  {
    fieldH25FLGMAS.setString(newvalue);
  }

  /**
  * Get value of field H25FLGMAS as a String.
  */
  public String getH25FLGMAS()
  {
    return fieldH25FLGMAS.getString();
  }

  /**
  * Set field H25FLGWK1 using a String value.
  */
  public void setH25FLGWK1(String newvalue)
  {
    fieldH25FLGWK1.setString(newvalue);
  }

  /**
  * Get value of field H25FLGWK1 as a String.
  */
  public String getH25FLGWK1()
  {
    return fieldH25FLGWK1.getString();
  }

  /**
  * Set field H25FLGWK2 using a String value.
  */
  public void setH25FLGWK2(String newvalue)
  {
    fieldH25FLGWK2.setString(newvalue);
  }

  /**
  * Get value of field H25FLGWK2 as a String.
  */
  public String getH25FLGWK2()
  {
    return fieldH25FLGWK2.getString();
  }

  /**
  * Set field H25FLGWK3 using a String value.
  */
  public void setH25FLGWK3(String newvalue)
  {
    fieldH25FLGWK3.setString(newvalue);
  }

  /**
  * Get value of field H25FLGWK3 as a String.
  */
  public String getH25FLGWK3()
  {
    return fieldH25FLGWK3.getString();
  }

  /**
  * Set field E25NUMACC using a String value.
  */
  public void setE25NUMACC(String newvalue)
  {
    fieldE25NUMACC.setString(newvalue);
  }

  /**
  * Get value of field E25NUMACC as a String.
  */
  public String getE25NUMACC()
  {
    return fieldE25NUMACC.getString();
  }

  /**
  * Set numeric field E25NUMACC using a BigDecimal value.
  */
  public void setE25NUMACC(BigDecimal newvalue)
  {
    fieldE25NUMACC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E25NUMACC as a BigDecimal.
  */
  public BigDecimal getBigDecimalE25NUMACC()
  {
    return fieldE25NUMACC.getBigDecimal();
  }

  /**
  * Set field E25CUSCUN using a String value.
  */
  public void setE25CUSCUN(String newvalue)
  {
    fieldE25CUSCUN.setString(newvalue);
  }

  /**
  * Get value of field E25CUSCUN as a String.
  */
  public String getE25CUSCUN()
  {
    return fieldE25CUSCUN.getString();
  }

  /**
  * Set numeric field E25CUSCUN using a BigDecimal value.
  */
  public void setE25CUSCUN(BigDecimal newvalue)
  {
    fieldE25CUSCUN.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E25CUSCUN as a BigDecimal.
  */
  public BigDecimal getBigDecimalE25CUSCUN()
  {
    return fieldE25CUSCUN.getBigDecimal();
  }

  /**
  * Set field E25ACTAMT using a String value.
  */
  public void setE25ACTAMT(String newvalue)
  {
    fieldE25ACTAMT.setString(newvalue);
  }

  /**
  * Get value of field E25ACTAMT as a String.
  */
  public String getE25ACTAMT()
  {
    return fieldE25ACTAMT.getString();
  }

  /**
  * Set numeric field E25ACTAMT using a BigDecimal value.
  */
  public void setE25ACTAMT(BigDecimal newvalue)
  {
    fieldE25ACTAMT.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E25ACTAMT as a BigDecimal.
  */
  public BigDecimal getBigDecimalE25ACTAMT()
  {
    return fieldE25ACTAMT.getBigDecimal();
  }

  /**
  * Set field E25PASAMT using a String value.
  */
  public void setE25PASAMT(String newvalue)
  {
    fieldE25PASAMT.setString(newvalue);
  }

  /**
  * Get value of field E25PASAMT as a String.
  */
  public String getE25PASAMT()
  {
    return fieldE25PASAMT.getString();
  }

  /**
  * Set numeric field E25PASAMT using a BigDecimal value.
  */
  public void setE25PASAMT(BigDecimal newvalue)
  {
    fieldE25PASAMT.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E25PASAMT as a BigDecimal.
  */
  public BigDecimal getBigDecimalE25PASAMT()
  {
    return fieldE25PASAMT.getBigDecimal();
  }

}
