package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from EWD0170DS physical file definition.
* 
* File level identifier is 1050211131508.
* Record format level identifier is 3AC4873967557.
*/

public class EWD0170DSMessage extends MessageRecord
{
  final static String fldnames[] = {
                                     "EWDSHN",
                                     "EWDSHO",
                                     "EWDRTP",
                                     "EWDCOD",
                                     "EWDNME",
                                     "EWDAD1",
                                     "EWDCIT",
                                     "EWDNM1",
                                     "EWDCOM",
                                     "EWDNM2",
                                     "EWDBRN",
                                     "EWDREC",
                                     "EWDOPE"
                                   };
  final static String tnames[] = {
                                   "EWDSHN",
                                   "EWDSHO",
                                   "EWDRTP",
                                   "EWDCOD",
                                   "EWDNME",
                                   "EWDAD1",
                                   "EWDCIT",
                                   "EWDNM1",
                                   "EWDCOM",
                                   "EWDNM2",
                                   "EWDBRN",
                                   "EWDREC",
                                   "EWDOPE"
                                 };
  final static String fid = "1050211131508";
  final static String rid = "3AC4873967557";
  final static String fmtname = "EWD0170DS";
  final int FIELDCOUNT = 13;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldEWDSHN = null;
  private CharacterField fieldEWDSHO = null;
  private CharacterField fieldEWDRTP = null;
  private CharacterField fieldEWDCOD = null;
  private CharacterField fieldEWDNME = null;
  private CharacterField fieldEWDAD1 = null;
  private CharacterField fieldEWDCIT = null;
  private CharacterField fieldEWDNM1 = null;
  private CharacterField fieldEWDCOM = null;
  private CharacterField fieldEWDNM2 = null;
  private DecimalField fieldEWDBRN = null;
  private DecimalField fieldEWDREC = null;
  private CharacterField fieldEWDOPE = null;

  /**
  * Constructor for EWD0170DSMessage.
  */
  public EWD0170DSMessage()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 219;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldEWDSHN =
    new CharacterField(message, HEADERSIZE + 0, 20, "EWDSHN");
    fields[1] = fieldEWDSHO =
    new CharacterField(message, HEADERSIZE + 20, 20, "EWDSHO");
    fields[2] = fieldEWDRTP =
    new CharacterField(message, HEADERSIZE + 40, 2, "EWDRTP");
    fields[3] = fieldEWDCOD =
    new CharacterField(message, HEADERSIZE + 42, 6, "EWDCOD");
    fields[4] = fieldEWDNME =
    new CharacterField(message, HEADERSIZE + 48, 45, "EWDNME");
    fields[5] = fieldEWDAD1 =
    new CharacterField(message, HEADERSIZE + 93, 35, "EWDAD1");
    fields[6] = fieldEWDCIT =
    new CharacterField(message, HEADERSIZE + 128, 4, "EWDCIT");
    fields[7] = fieldEWDNM1 =
    new CharacterField(message, HEADERSIZE + 132, 35, "EWDNM1");
    fields[8] = fieldEWDCOM =
    new CharacterField(message, HEADERSIZE + 167, 4, "EWDCOM");
    fields[9] = fieldEWDNM2 =
    new CharacterField(message, HEADERSIZE + 171, 35, "EWDNM2");
    fields[10] = fieldEWDBRN =
    new DecimalField(message, HEADERSIZE + 206, 4, 0, "EWDBRN");
    fields[11] = fieldEWDREC =
    new DecimalField(message, HEADERSIZE + 210, 8, 0, "EWDREC");
    fields[12] = fieldEWDOPE =
    new CharacterField(message, HEADERSIZE + 218, 1, "EWDOPE");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field EWDSHN using a String value.
  */
  public void setEWDSHN(String newvalue)
  {
    fieldEWDSHN.setString(newvalue);
  }

  /**
  * Get value of field EWDSHN as a String.
  */
  public String getEWDSHN()
  {
    return fieldEWDSHN.getString();
  }

  /**
  * Set field EWDSHO using a String value.
  */
  public void setEWDSHO(String newvalue)
  {
    fieldEWDSHO.setString(newvalue);
  }

  /**
  * Get value of field EWDSHO as a String.
  */
  public String getEWDSHO()
  {
    return fieldEWDSHO.getString();
  }

  /**
  * Set field EWDRTP using a String value.
  */
  public void setEWDRTP(String newvalue)
  {
    fieldEWDRTP.setString(newvalue);
  }

  /**
  * Get value of field EWDRTP as a String.
  */
  public String getEWDRTP()
  {
    return fieldEWDRTP.getString();
  }

  /**
  * Set field EWDCOD using a String value.
  */
  public void setEWDCOD(String newvalue)
  {
    fieldEWDCOD.setString(newvalue);
  }

  /**
  * Get value of field EWDCOD as a String.
  */
  public String getEWDCOD()
  {
    return fieldEWDCOD.getString();
  }

  /**
  * Set field EWDNME using a String value.
  */
  public void setEWDNME(String newvalue)
  {
    fieldEWDNME.setString(newvalue);
  }

  /**
  * Get value of field EWDNME as a String.
  */
  public String getEWDNME()
  {
    return fieldEWDNME.getString();
  }

  /**
  * Set field EWDAD1 using a String value.
  */
  public void setEWDAD1(String newvalue)
  {
    fieldEWDAD1.setString(newvalue);
  }

  /**
  * Get value of field EWDAD1 as a String.
  */
  public String getEWDAD1()
  {
    return fieldEWDAD1.getString();
  }

  /**
  * Set field EWDCIT using a String value.
  */
  public void setEWDCIT(String newvalue)
  {
    fieldEWDCIT.setString(newvalue);
  }

  /**
  * Get value of field EWDCIT as a String.
  */
  public String getEWDCIT()
  {
    return fieldEWDCIT.getString();
  }

  /**
  * Set field EWDNM1 using a String value.
  */
  public void setEWDNM1(String newvalue)
  {
    fieldEWDNM1.setString(newvalue);
  }

  /**
  * Get value of field EWDNM1 as a String.
  */
  public String getEWDNM1()
  {
    return fieldEWDNM1.getString();
  }

  /**
  * Set field EWDCOM using a String value.
  */
  public void setEWDCOM(String newvalue)
  {
    fieldEWDCOM.setString(newvalue);
  }

  /**
  * Get value of field EWDCOM as a String.
  */
  public String getEWDCOM()
  {
    return fieldEWDCOM.getString();
  }

  /**
  * Set field EWDNM2 using a String value.
  */
  public void setEWDNM2(String newvalue)
  {
    fieldEWDNM2.setString(newvalue);
  }

  /**
  * Get value of field EWDNM2 as a String.
  */
  public String getEWDNM2()
  {
    return fieldEWDNM2.getString();
  }

  /**
  * Set field EWDBRN using a String value.
  */
  public void setEWDBRN(String newvalue)
  {
    fieldEWDBRN.setString(newvalue);
  }

  /**
  * Get value of field EWDBRN as a String.
  */
  public String getEWDBRN()
  {
    return fieldEWDBRN.getString();
  }

  /**
  * Set numeric field EWDBRN using a BigDecimal value.
  */
  public void setEWDBRN(BigDecimal newvalue)
  {
    fieldEWDBRN.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EWDBRN as a BigDecimal.
  */
  public BigDecimal getBigDecimalEWDBRN()
  {
    return fieldEWDBRN.getBigDecimal();
  }

  /**
  * Set field EWDREC using a String value.
  */
  public void setEWDREC(String newvalue)
  {
    fieldEWDREC.setString(newvalue);
  }

  /**
  * Get value of field EWDREC as a String.
  */
  public String getEWDREC()
  {
    return fieldEWDREC.getString();
  }

  /**
  * Set numeric field EWDREC using a BigDecimal value.
  */
  public void setEWDREC(BigDecimal newvalue)
  {
    fieldEWDREC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EWDREC as a BigDecimal.
  */
  public BigDecimal getBigDecimalEWDREC()
  {
    return fieldEWDREC.getBigDecimal();
  }

  /**
  * Set field EWDOPE using a String value.
  */
  public void setEWDOPE(String newvalue)
  {
    fieldEWDOPE.setString(newvalue);
  }

  /**
  * Get value of field EWDOPE as a String.
  */
  public String getEWDOPE()
  {
    return fieldEWDOPE.getString();
  }

}
