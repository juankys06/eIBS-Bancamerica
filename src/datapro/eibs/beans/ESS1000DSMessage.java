package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from ESS1000DS physical file definition.
* 
* File level identifier is 1030121192013.
* Record format level identifier is 3A132323FB658.
*/

public class ESS1000DSMessage extends MessageRecord
{
  final static String fldnames[] = {
                                     "APLUSR",
                                     "APLACC",
                                     "APLCUN",
                                     "APLAD1",
                                     "APLTEL",
                                     "APLCEML"
                                   };
  final static String tnames[] = {
                                   "APLUSR",
                                   "APLACC",
                                   "APLCUN",
                                   "APLAD1",
                                   "APLTEL",
                                   "APLCEML"
                                 };
  final static String fid = "1030121192013";
  final static String rid = "3A132323FB658";
  final static String fmtname = "ESS1000DS";
  final int FIELDCOUNT = 6;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldAPLUSR = null;
  private DecimalField fieldAPLACC = null;
  private DecimalField fieldAPLCUN = null;
  private CharacterField fieldAPLAD1 = null;
  private DecimalField fieldAPLTEL = null;
  private CharacterField fieldAPLCEML = null;

  /**
  * Constructor for ESS1000DSMessage.
  */
  public ESS1000DSMessage()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 100;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldAPLUSR =
    new CharacterField(message, HEADERSIZE + 0, 10, "APLUSR");
    fields[1] = fieldAPLACC =
    new DecimalField(message, HEADERSIZE + 10, 13, 0, "APLACC");
    fields[2] = fieldAPLCUN =
    new DecimalField(message, HEADERSIZE + 23, 10, 0, "APLCUN");
    fields[3] = fieldAPLAD1 =
    new CharacterField(message, HEADERSIZE + 33, 30, "APLAD1");
    fields[4] = fieldAPLTEL =
    new DecimalField(message, HEADERSIZE + 63, 12, 0, "APLTEL");
    fields[5] = fieldAPLCEML =
    new CharacterField(message, HEADERSIZE + 75, 25, "APLCEML");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field APLUSR using a String value.
  */
  public void setAPLUSR(String newvalue)
  {
    fieldAPLUSR.setString(newvalue);
  }

  /**
  * Get value of field APLUSR as a String.
  */
  public String getAPLUSR()
  {
    return fieldAPLUSR.getString();
  }

  /**
  * Set field APLACC using a String value.
  */
  public void setAPLACC(String newvalue)
  {
    fieldAPLACC.setString(newvalue);
  }

  /**
  * Get value of field APLACC as a String.
  */
  public String getAPLACC()
  {
    return fieldAPLACC.getString();
  }

  /**
  * Set numeric field APLACC using a BigDecimal value.
  */
  public void setAPLACC(BigDecimal newvalue)
  {
    fieldAPLACC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field APLACC as a BigDecimal.
  */
  public BigDecimal getBigDecimalAPLACC()
  {
    return fieldAPLACC.getBigDecimal();
  }

  /**
  * Set field APLCUN using a String value.
  */
  public void setAPLCUN(String newvalue)
  {
    fieldAPLCUN.setString(newvalue);
  }

  /**
  * Get value of field APLCUN as a String.
  */
  public String getAPLCUN()
  {
    return fieldAPLCUN.getString();
  }

  /**
  * Set numeric field APLCUN using a BigDecimal value.
  */
  public void setAPLCUN(BigDecimal newvalue)
  {
    fieldAPLCUN.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field APLCUN as a BigDecimal.
  */
  public BigDecimal getBigDecimalAPLCUN()
  {
    return fieldAPLCUN.getBigDecimal();
  }

  /**
  * Set field APLAD1 using a String value.
  */
  public void setAPLAD1(String newvalue)
  {
    fieldAPLAD1.setString(newvalue);
  }

  /**
  * Get value of field APLAD1 as a String.
  */
  public String getAPLAD1()
  {
    return fieldAPLAD1.getString();
  }

  /**
  * Set field APLTEL using a String value.
  */
  public void setAPLTEL(String newvalue)
  {
    fieldAPLTEL.setString(newvalue);
  }

  /**
  * Get value of field APLTEL as a String.
  */
  public String getAPLTEL()
  {
    return fieldAPLTEL.getString();
  }

  /**
  * Set numeric field APLTEL using a BigDecimal value.
  */
  public void setAPLTEL(BigDecimal newvalue)
  {
    fieldAPLTEL.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field APLTEL as a BigDecimal.
  */
  public BigDecimal getBigDecimalAPLTEL()
  {
    return fieldAPLTEL.getBigDecimal();
  }

  /**
  * Set field APLCEML using a String value.
  */
  public void setAPLCEML(String newvalue)
  {
    fieldAPLCEML.setString(newvalue);
  }

  /**
  * Get value of field APLCEML as a String.
  */
  public String getAPLCEML()
  {
    return fieldAPLCEML.getString();
  }

}
