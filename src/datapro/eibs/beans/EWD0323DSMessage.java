package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from EWD0323DS physical file definition.
* 
* File level identifier is 1060822183951.
* Record format level identifier is 45A629F2EB15C.
*/

public class EWD0323DSMessage extends MessageRecord
{
  final static String fldnames[] = {
                                     "RWDUSR",
                                     "RWDTYP",
                                     "RWDFRC",
                                     "SWDBNK",
                                     "SWDCCC",
                                     "SWDDID",
                                     "SWDPBL",
                                     "SWDTPU",
                                     "SWDTSL",
                                     "SWDTDT",
                                     "SWDFPU",
                                     "SWDFSL",
                                     "SWDFXC",
                                     "SWDEPB",
                                     "SWDETB",
                                     "SWDEXR",
                                     "SWDNME",
                                     "SWDREC",
                                     "SWDOPE"
                                   };
  final static String tnames[] = {
                                   "RWDUSR",
                                   "RWDTYP",
                                   "RWDFRC",
                                   "SWDBNK",
                                   "SWDCCC",
                                   "SWDDID",
                                   "SWDPBL",
                                   "SWDTPU",
                                   "SWDTSL",
                                   "SWDTDT",
                                   "SWDFPU",
                                   "SWDFSL",
                                   "SWDFXC",
                                   "SWDEPB",
                                   "SWDETB",
                                   "SWDEXR",
                                   "SWDNME",
                                   "SWDREC",
                                   "SWDOPE"
                                 };
  final static String fid = "1060822183951";
  final static String rid = "45A629F2EB15C";
  final static String fmtname = "EWD0323DS";
  final int FIELDCOUNT = 19;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldRWDUSR = null;
  private CharacterField fieldRWDTYP = null;
  private DecimalField fieldRWDFRC = null;
  private CharacterField fieldSWDBNK = null;
  private CharacterField fieldSWDCCC = null;
  private CharacterField fieldSWDDID = null;
  private DecimalField fieldSWDPBL = null;
  private DecimalField fieldSWDTPU = null;
  private DecimalField fieldSWDTSL = null;
  private DecimalField fieldSWDTDT = null;
  private DecimalField fieldSWDFPU = null;
  private DecimalField fieldSWDFSL = null;
  private DecimalField fieldSWDFXC = null;
  private DecimalField fieldSWDEPB = null;
  private DecimalField fieldSWDETB = null;
  private CharacterField fieldSWDEXR = null;
  private CharacterField fieldSWDNME = null;
  private DecimalField fieldSWDREC = null;
  private CharacterField fieldSWDOPE = null;

  /**
  * Constructor for EWD0323DSMessage.
  */
  public EWD0323DSMessage()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 257;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldRWDUSR =
    new CharacterField(message, HEADERSIZE + 0, 10, "RWDUSR");
    fields[1] = fieldRWDTYP =
    new CharacterField(message, HEADERSIZE + 10, 1, "RWDTYP");
    fields[2] = fieldRWDFRC =
    new DecimalField(message, HEADERSIZE + 11, 8, 0, "RWDFRC");
    fields[3] = fieldSWDBNK =
    new CharacterField(message, HEADERSIZE + 19, 2, "SWDBNK");
    fields[4] = fieldSWDCCC =
    new CharacterField(message, HEADERSIZE + 21, 7, "SWDCCC");
    fields[5] = fieldSWDDID =
    new CharacterField(message, HEADERSIZE + 28, 10, "SWDDID");
    fields[6] = fieldSWDPBL =
    new DecimalField(message, HEADERSIZE + 38, 17, 2, "SWDPBL");
    fields[7] = fieldSWDTPU =
    new DecimalField(message, HEADERSIZE + 55, 17, 2, "SWDTPU");
    fields[8] = fieldSWDTSL =
    new DecimalField(message, HEADERSIZE + 72, 17, 2, "SWDTSL");
    fields[9] = fieldSWDTDT =
    new DecimalField(message, HEADERSIZE + 89, 17, 2, "SWDTDT");
    fields[10] = fieldSWDFPU =
    new DecimalField(message, HEADERSIZE + 106, 17, 2, "SWDFPU");
    fields[11] = fieldSWDFSL =
    new DecimalField(message, HEADERSIZE + 123, 17, 2, "SWDFSL");
    fields[12] = fieldSWDFXC =
    new DecimalField(message, HEADERSIZE + 140, 17, 2, "SWDFXC");
    fields[13] = fieldSWDEPB =
    new DecimalField(message, HEADERSIZE + 157, 17, 2, "SWDEPB");
    fields[14] = fieldSWDETB =
    new DecimalField(message, HEADERSIZE + 174, 17, 2, "SWDETB");
    fields[15] = fieldSWDEXR =
    new CharacterField(message, HEADERSIZE + 191, 12, "SWDEXR");
    fields[16] = fieldSWDNME =
    new CharacterField(message, HEADERSIZE + 203, 45, "SWDNME");
    fields[17] = fieldSWDREC =
    new DecimalField(message, HEADERSIZE + 248, 8, 0, "SWDREC");
    fields[18] = fieldSWDOPE =
    new CharacterField(message, HEADERSIZE + 256, 1, "SWDOPE");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field RWDUSR using a String value.
  */
  public void setRWDUSR(String newvalue)
  {
    fieldRWDUSR.setString(newvalue);
  }

  /**
  * Get value of field RWDUSR as a String.
  */
  public String getRWDUSR()
  {
    return fieldRWDUSR.getString();
  }

  /**
  * Set field RWDTYP using a String value.
  */
  public void setRWDTYP(String newvalue)
  {
    fieldRWDTYP.setString(newvalue);
  }

  /**
  * Get value of field RWDTYP as a String.
  */
  public String getRWDTYP()
  {
    return fieldRWDTYP.getString();
  }

  /**
  * Set field RWDFRC using a String value.
  */
  public void setRWDFRC(String newvalue)
  {
    fieldRWDFRC.setString(newvalue);
  }

  /**
  * Get value of field RWDFRC as a String.
  */
  public String getRWDFRC()
  {
    return fieldRWDFRC.getString();
  }

  /**
  * Set numeric field RWDFRC using a BigDecimal value.
  */
  public void setRWDFRC(BigDecimal newvalue)
  {
    fieldRWDFRC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field RWDFRC as a BigDecimal.
  */
  public BigDecimal getBigDecimalRWDFRC()
  {
    return fieldRWDFRC.getBigDecimal();
  }

  /**
  * Set field SWDBNK using a String value.
  */
  public void setSWDBNK(String newvalue)
  {
    fieldSWDBNK.setString(newvalue);
  }

  /**
  * Get value of field SWDBNK as a String.
  */
  public String getSWDBNK()
  {
    return fieldSWDBNK.getString();
  }

  /**
  * Set field SWDCCC using a String value.
  */
  public void setSWDCCC(String newvalue)
  {
    fieldSWDCCC.setString(newvalue);
  }

  /**
  * Get value of field SWDCCC as a String.
  */
  public String getSWDCCC()
  {
    return fieldSWDCCC.getString();
  }

  /**
  * Set field SWDDID using a String value.
  */
  public void setSWDDID(String newvalue)
  {
    fieldSWDDID.setString(newvalue);
  }

  /**
  * Get value of field SWDDID as a String.
  */
  public String getSWDDID()
  {
    return fieldSWDDID.getString();
  }

  /**
  * Set field SWDPBL using a String value.
  */
  public void setSWDPBL(String newvalue)
  {
    fieldSWDPBL.setString(newvalue);
  }

  /**
  * Get value of field SWDPBL as a String.
  */
  public String getSWDPBL()
  {
    return fieldSWDPBL.getString();
  }

  /**
  * Set numeric field SWDPBL using a BigDecimal value.
  */
  public void setSWDPBL(BigDecimal newvalue)
  {
    fieldSWDPBL.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field SWDPBL as a BigDecimal.
  */
  public BigDecimal getBigDecimalSWDPBL()
  {
    return fieldSWDPBL.getBigDecimal();
  }

  /**
  * Set field SWDTPU using a String value.
  */
  public void setSWDTPU(String newvalue)
  {
    fieldSWDTPU.setString(newvalue);
  }

  /**
  * Get value of field SWDTPU as a String.
  */
  public String getSWDTPU()
  {
    return fieldSWDTPU.getString();
  }

  /**
  * Set numeric field SWDTPU using a BigDecimal value.
  */
  public void setSWDTPU(BigDecimal newvalue)
  {
    fieldSWDTPU.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field SWDTPU as a BigDecimal.
  */
  public BigDecimal getBigDecimalSWDTPU()
  {
    return fieldSWDTPU.getBigDecimal();
  }

  /**
  * Set field SWDTSL using a String value.
  */
  public void setSWDTSL(String newvalue)
  {
    fieldSWDTSL.setString(newvalue);
  }

  /**
  * Get value of field SWDTSL as a String.
  */
  public String getSWDTSL()
  {
    return fieldSWDTSL.getString();
  }

  /**
  * Set numeric field SWDTSL using a BigDecimal value.
  */
  public void setSWDTSL(BigDecimal newvalue)
  {
    fieldSWDTSL.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field SWDTSL as a BigDecimal.
  */
  public BigDecimal getBigDecimalSWDTSL()
  {
    return fieldSWDTSL.getBigDecimal();
  }

  /**
  * Set field SWDTDT using a String value.
  */
  public void setSWDTDT(String newvalue)
  {
    fieldSWDTDT.setString(newvalue);
  }

  /**
  * Get value of field SWDTDT as a String.
  */
  public String getSWDTDT()
  {
    return fieldSWDTDT.getString();
  }

  /**
  * Set numeric field SWDTDT using a BigDecimal value.
  */
  public void setSWDTDT(BigDecimal newvalue)
  {
    fieldSWDTDT.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field SWDTDT as a BigDecimal.
  */
  public BigDecimal getBigDecimalSWDTDT()
  {
    return fieldSWDTDT.getBigDecimal();
  }

  /**
  * Set field SWDFPU using a String value.
  */
  public void setSWDFPU(String newvalue)
  {
    fieldSWDFPU.setString(newvalue);
  }

  /**
  * Get value of field SWDFPU as a String.
  */
  public String getSWDFPU()
  {
    return fieldSWDFPU.getString();
  }

  /**
  * Set numeric field SWDFPU using a BigDecimal value.
  */
  public void setSWDFPU(BigDecimal newvalue)
  {
    fieldSWDFPU.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field SWDFPU as a BigDecimal.
  */
  public BigDecimal getBigDecimalSWDFPU()
  {
    return fieldSWDFPU.getBigDecimal();
  }

  /**
  * Set field SWDFSL using a String value.
  */
  public void setSWDFSL(String newvalue)
  {
    fieldSWDFSL.setString(newvalue);
  }

  /**
  * Get value of field SWDFSL as a String.
  */
  public String getSWDFSL()
  {
    return fieldSWDFSL.getString();
  }

  /**
  * Set numeric field SWDFSL using a BigDecimal value.
  */
  public void setSWDFSL(BigDecimal newvalue)
  {
    fieldSWDFSL.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field SWDFSL as a BigDecimal.
  */
  public BigDecimal getBigDecimalSWDFSL()
  {
    return fieldSWDFSL.getBigDecimal();
  }

  /**
  * Set field SWDFXC using a String value.
  */
  public void setSWDFXC(String newvalue)
  {
    fieldSWDFXC.setString(newvalue);
  }

  /**
  * Get value of field SWDFXC as a String.
  */
  public String getSWDFXC()
  {
    return fieldSWDFXC.getString();
  }

  /**
  * Set numeric field SWDFXC using a BigDecimal value.
  */
  public void setSWDFXC(BigDecimal newvalue)
  {
    fieldSWDFXC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field SWDFXC as a BigDecimal.
  */
  public BigDecimal getBigDecimalSWDFXC()
  {
    return fieldSWDFXC.getBigDecimal();
  }

  /**
  * Set field SWDEPB using a String value.
  */
  public void setSWDEPB(String newvalue)
  {
    fieldSWDEPB.setString(newvalue);
  }

  /**
  * Get value of field SWDEPB as a String.
  */
  public String getSWDEPB()
  {
    return fieldSWDEPB.getString();
  }

  /**
  * Set numeric field SWDEPB using a BigDecimal value.
  */
  public void setSWDEPB(BigDecimal newvalue)
  {
    fieldSWDEPB.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field SWDEPB as a BigDecimal.
  */
  public BigDecimal getBigDecimalSWDEPB()
  {
    return fieldSWDEPB.getBigDecimal();
  }

  /**
  * Set field SWDETB using a String value.
  */
  public void setSWDETB(String newvalue)
  {
    fieldSWDETB.setString(newvalue);
  }

  /**
  * Get value of field SWDETB as a String.
  */
  public String getSWDETB()
  {
    return fieldSWDETB.getString();
  }

  /**
  * Set numeric field SWDETB using a BigDecimal value.
  */
  public void setSWDETB(BigDecimal newvalue)
  {
    fieldSWDETB.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field SWDETB as a BigDecimal.
  */
  public BigDecimal getBigDecimalSWDETB()
  {
    return fieldSWDETB.getBigDecimal();
  }

  /**
  * Set field SWDEXR using a String value.
  */
  public void setSWDEXR(String newvalue)
  {
    fieldSWDEXR.setString(newvalue);
  }

  /**
  * Get value of field SWDEXR as a String.
  */
  public String getSWDEXR()
  {
    return fieldSWDEXR.getString();
  }

  /**
  * Set field SWDNME using a String value.
  */
  public void setSWDNME(String newvalue)
  {
    fieldSWDNME.setString(newvalue);
  }

  /**
  * Get value of field SWDNME as a String.
  */
  public String getSWDNME()
  {
    return fieldSWDNME.getString();
  }

  /**
  * Set field SWDREC using a String value.
  */
  public void setSWDREC(String newvalue)
  {
    fieldSWDREC.setString(newvalue);
  }

  /**
  * Get value of field SWDREC as a String.
  */
  public String getSWDREC()
  {
    return fieldSWDREC.getString();
  }

  /**
  * Set numeric field SWDREC using a BigDecimal value.
  */
  public void setSWDREC(BigDecimal newvalue)
  {
    fieldSWDREC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field SWDREC as a BigDecimal.
  */
  public BigDecimal getBigDecimalSWDREC()
  {
    return fieldSWDREC.getBigDecimal();
  }

  /**
  * Set field SWDOPE using a String value.
  */
  public void setSWDOPE(String newvalue)
  {
    fieldSWDOPE.setString(newvalue);
  }

  /**
  * Get value of field SWDOPE as a String.
  */
  public String getSWDOPE()
  {
    return fieldSWDOPE.getString();
  }

}
