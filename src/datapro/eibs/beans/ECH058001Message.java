package datapro.eibs.beans;

import java.math.BigDecimal;
import java.util.Hashtable;

import datapro.eibs.sockets.CharacterField;
import datapro.eibs.sockets.DecimalField;
import datapro.eibs.sockets.MessageField;
import datapro.eibs.sockets.MessageRecord;

/**
* Class generated by AS/400 CRTCLASS command from ECH058001 physical file definition.
* 
* File level identifier is 1070301141347.
* Record format level identifier is 3B01D00BF0DFF.
*/

public class ECH058001Message extends MessageRecord
{
  final static String fldnames[] = {
                                     "H01USERID",
                                     "H01PROGRM",
                                     "H01TIMSYS",
                                     "H01SCRCOD",
                                     "H01OPECOD",
                                     "H01FLGMAS",
                                     "H01FLGWK1",
                                     "H01FLGWK2",
                                     "H01FLGWK3",
                                     "E01CHMACC",
                                     "E01CHMNTC",
                                     "E01CHMICK",
                                     "E01CHMFCK",
                                     "E01CHMNCB",
                                     "E01CHMDSC",
                                     "E01CHMSTS"
                                   };
  final static String tnames[] = {
                                   "H01USERID",
                                   "H01PROGRM",
                                   "H01TIMSYS",
                                   "H01SCRCOD",
                                   "H01OPECOD",
                                   "H01FLGMAS",
                                   "H01FLGWK1",
                                   "H01FLGWK2",
                                   "H01FLGWK3",
                                   "E01CHMACC",
                                   "E01CHMNTC",
                                   "E01CHMICK",
                                   "E01CHMFCK",
                                   "E01CHMNCB",
                                   "E01CHMDSC",
                                   "E01CHMSTS"
                                 };
  final static String fid = "1070301141347";
  final static String rid = "3B01D00BF0DFF";
  final static String fmtname = "ECH058001";
  final int FIELDCOUNT = 16;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldH01USERID = null;
  private CharacterField fieldH01PROGRM = null;
  private CharacterField fieldH01TIMSYS = null;
  private CharacterField fieldH01SCRCOD = null;
  private CharacterField fieldH01OPECOD = null;
  private CharacterField fieldH01FLGMAS = null;
  private CharacterField fieldH01FLGWK1 = null;
  private CharacterField fieldH01FLGWK2 = null;
  private CharacterField fieldH01FLGWK3 = null;
  private DecimalField fieldE01CHMACC = null;
  private DecimalField fieldE01CHMNTC = null;
  private DecimalField fieldE01CHMICK = null;
  private DecimalField fieldE01CHMFCK = null;
  private DecimalField fieldE01CHMNCB = null;
  private CharacterField fieldE01CHMDSC = null;
  private CharacterField fieldE01CHMSTS = null;

  /**
  * Constructor for ECH058001Message.
  */
  public ECH058001Message()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 116;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldH01USERID =
    new CharacterField(message, HEADERSIZE + 0, 10, "H01USERID");
    fields[1] = fieldH01PROGRM =
    new CharacterField(message, HEADERSIZE + 10, 10, "H01PROGRM");
    fields[2] = fieldH01TIMSYS =
    new CharacterField(message, HEADERSIZE + 20, 12, "H01TIMSYS");
    fields[3] = fieldH01SCRCOD =
    new CharacterField(message, HEADERSIZE + 32, 2, "H01SCRCOD");
    fields[4] = fieldH01OPECOD =
    new CharacterField(message, HEADERSIZE + 34, 4, "H01OPECOD");
    fields[5] = fieldH01FLGMAS =
    new CharacterField(message, HEADERSIZE + 38, 1, "H01FLGMAS");
    fields[6] = fieldH01FLGWK1 =
    new CharacterField(message, HEADERSIZE + 39, 1, "H01FLGWK1");
    fields[7] = fieldH01FLGWK2 =
    new CharacterField(message, HEADERSIZE + 40, 1, "H01FLGWK2");
    fields[8] = fieldH01FLGWK3 =
    new CharacterField(message, HEADERSIZE + 41, 1, "H01FLGWK3");
    fields[9] = fieldE01CHMACC =
    new DecimalField(message, HEADERSIZE + 42, 13, 0, "E01CHMACC");
    fields[10] = fieldE01CHMNTC =
    new DecimalField(message, HEADERSIZE + 55, 5, 0, "E01CHMNTC");
    fields[11] = fieldE01CHMICK =
    new DecimalField(message, HEADERSIZE + 60, 10, 0, "E01CHMICK");
    fields[12] = fieldE01CHMFCK =
    new DecimalField(message, HEADERSIZE + 70, 10, 0, "E01CHMFCK");
    fields[13] = fieldE01CHMNCB =
    new DecimalField(message, HEADERSIZE + 80, 5, 0, "E01CHMNCB");
    fields[14] = fieldE01CHMDSC =
    new CharacterField(message, HEADERSIZE + 85, 30, "E01CHMDSC");
    fields[15] = fieldE01CHMSTS =
    new CharacterField(message, HEADERSIZE + 115, 1, "E01CHMSTS");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field H01USERID using a String value.
  */
  public void setH01USERID(String newvalue)
  {
    fieldH01USERID.setString(newvalue);
  }

  /**
  * Get value of field H01USERID as a String.
  */
  public String getH01USERID()
  {
    return fieldH01USERID.getString();
  }

  /**
  * Set field H01PROGRM using a String value.
  */
  public void setH01PROGRM(String newvalue)
  {
    fieldH01PROGRM.setString(newvalue);
  }

  /**
  * Get value of field H01PROGRM as a String.
  */
  public String getH01PROGRM()
  {
    return fieldH01PROGRM.getString();
  }

  /**
  * Set field H01TIMSYS using a String value.
  */
  public void setH01TIMSYS(String newvalue)
  {
    fieldH01TIMSYS.setString(newvalue);
  }

  /**
  * Get value of field H01TIMSYS as a String.
  */
  public String getH01TIMSYS()
  {
    return fieldH01TIMSYS.getString();
  }

  /**
  * Set field H01SCRCOD using a String value.
  */
  public void setH01SCRCOD(String newvalue)
  {
    fieldH01SCRCOD.setString(newvalue);
  }

  /**
  * Get value of field H01SCRCOD as a String.
  */
  public String getH01SCRCOD()
  {
    return fieldH01SCRCOD.getString();
  }

  /**
  * Set field H01OPECOD using a String value.
  */
  public void setH01OPECOD(String newvalue)
  {
    fieldH01OPECOD.setString(newvalue);
  }

  /**
  * Get value of field H01OPECOD as a String.
  */
  public String getH01OPECOD()
  {
    return fieldH01OPECOD.getString();
  }

  /**
  * Set field H01FLGMAS using a String value.
  */
  public void setH01FLGMAS(String newvalue)
  {
    fieldH01FLGMAS.setString(newvalue);
  }

  /**
  * Get value of field H01FLGMAS as a String.
  */
  public String getH01FLGMAS()
  {
    return fieldH01FLGMAS.getString();
  }

  /**
  * Set field H01FLGWK1 using a String value.
  */
  public void setH01FLGWK1(String newvalue)
  {
    fieldH01FLGWK1.setString(newvalue);
  }

  /**
  * Get value of field H01FLGWK1 as a String.
  */
  public String getH01FLGWK1()
  {
    return fieldH01FLGWK1.getString();
  }

  /**
  * Set field H01FLGWK2 using a String value.
  */
  public void setH01FLGWK2(String newvalue)
  {
    fieldH01FLGWK2.setString(newvalue);
  }

  /**
  * Get value of field H01FLGWK2 as a String.
  */
  public String getH01FLGWK2()
  {
    return fieldH01FLGWK2.getString();
  }

  /**
  * Set field H01FLGWK3 using a String value.
  */
  public void setH01FLGWK3(String newvalue)
  {
    fieldH01FLGWK3.setString(newvalue);
  }

  /**
  * Get value of field H01FLGWK3 as a String.
  */
  public String getH01FLGWK3()
  {
    return fieldH01FLGWK3.getString();
  }

  /**
  * Set field E01CHMACC using a String value.
  */
  public void setE01CHMACC(String newvalue)
  {
    fieldE01CHMACC.setString(newvalue);
  }

  /**
  * Get value of field E01CHMACC as a String.
  */
  public String getE01CHMACC()
  {
    return fieldE01CHMACC.getString();
  }

  /**
  * Set numeric field E01CHMACC using a BigDecimal value.
  */
  public void setE01CHMACC(BigDecimal newvalue)
  {
    fieldE01CHMACC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E01CHMACC as a BigDecimal.
  */
  public BigDecimal getBigDecimalE01CHMACC()
  {
    return fieldE01CHMACC.getBigDecimal();
  }

  /**
  * Set field E01CHMNTC using a String value.
  */
  public void setE01CHMNTC(String newvalue)
  {
    fieldE01CHMNTC.setString(newvalue);
  }

  /**
  * Get value of field E01CHMNTC as a String.
  */
  public String getE01CHMNTC()
  {
    return fieldE01CHMNTC.getString();
  }

  /**
  * Set numeric field E01CHMNTC using a BigDecimal value.
  */
  public void setE01CHMNTC(BigDecimal newvalue)
  {
    fieldE01CHMNTC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E01CHMNTC as a BigDecimal.
  */
  public BigDecimal getBigDecimalE01CHMNTC()
  {
    return fieldE01CHMNTC.getBigDecimal();
  }

  /**
  * Set field E01CHMICK using a String value.
  */
  public void setE01CHMICK(String newvalue)
  {
    fieldE01CHMICK.setString(newvalue);
  }

  /**
  * Get value of field E01CHMICK as a String.
  */
  public String getE01CHMICK()
  {
    return fieldE01CHMICK.getString();
  }

  /**
  * Set numeric field E01CHMICK using a BigDecimal value.
  */
  public void setE01CHMICK(BigDecimal newvalue)
  {
    fieldE01CHMICK.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E01CHMICK as a BigDecimal.
  */
  public BigDecimal getBigDecimalE01CHMICK()
  {
    return fieldE01CHMICK.getBigDecimal();
  }

  /**
  * Set field E01CHMFCK using a String value.
  */
  public void setE01CHMFCK(String newvalue)
  {
    fieldE01CHMFCK.setString(newvalue);
  }

  /**
  * Get value of field E01CHMFCK as a String.
  */
  public String getE01CHMFCK()
  {
    return fieldE01CHMFCK.getString();
  }

  /**
  * Set numeric field E01CHMFCK using a BigDecimal value.
  */
  public void setE01CHMFCK(BigDecimal newvalue)
  {
    fieldE01CHMFCK.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E01CHMFCK as a BigDecimal.
  */
  public BigDecimal getBigDecimalE01CHMFCK()
  {
    return fieldE01CHMFCK.getBigDecimal();
  }

  /**
  * Set field E01CHMNCB using a String value.
  */
  public void setE01CHMNCB(String newvalue)
  {
    fieldE01CHMNCB.setString(newvalue);
  }

  /**
  * Get value of field E01CHMNCB as a String.
  */
  public String getE01CHMNCB()
  {
    return fieldE01CHMNCB.getString();
  }

  /**
  * Set numeric field E01CHMNCB using a BigDecimal value.
  */
  public void setE01CHMNCB(BigDecimal newvalue)
  {
    fieldE01CHMNCB.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E01CHMNCB as a BigDecimal.
  */
  public BigDecimal getBigDecimalE01CHMNCB()
  {
    return fieldE01CHMNCB.getBigDecimal();
  }

  /**
  * Set field E01CHMDSC using a String value.
  */
  public void setE01CHMDSC(String newvalue)
  {
    fieldE01CHMDSC.setString(newvalue);
  }

  /**
  * Get value of field E01CHMDSC as a String.
  */
  public String getE01CHMDSC()
  {
    return fieldE01CHMDSC.getString();
  }

  /**
  * Set field E01CHMSTS using a String value.
  */
  public void setE01CHMSTS(String newvalue)
  {
    fieldE01CHMSTS.setString(newvalue);
  }

  /**
  * Get value of field E01CHMSTS as a String.
  */
  public String getE01CHMSTS()
  {
    return fieldE01CHMSTS.getString();
  }

}
