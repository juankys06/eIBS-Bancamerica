package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from EWD0900DS physical file definition.
* 
* File level identifier is 1100728180010.
* Record format level identifier is 51266D73C42AE.
*/

public class EWD0900DSMessage extends MessageRecord
{
  final static String fldnames[] = {
                                     "RWDUSR",
                                     "RWDTYP",
                                     "RWDFRC",
                                     "SWDNAM",
                                     "SWDNUM",
                                     "SWDFIL",
                                     "SWDPLN",
                                     "SWDOUT",
                                     "SWDSRD",
                                     "SWDSTS",
                                     "SWDPAG",
                                     "SWDDAT",
                                     "SWDTIM",
                                     "SWDPTH",
                                     "SWDREC",
                                     "SWDOPE"
                                   };
  final static String tnames[] = {
                                   "RWDUSR",
                                   "RWDTYP",
                                   "RWDFRC",
                                   "SWDNAM",
                                   "SWDNUM",
                                   "SWDFIL",
                                   "SWDPLN",
                                   "SWDOUT",
                                   "SWDSRD",
                                   "SWDSTS",
                                   "SWDPAG",
                                   "SWDDAT",
                                   "SWDTIM",
                                   "SWDPTH",
                                   "SWDREC",
                                   "SWDOPE"
                                 };
  final static String fid = "1100728180010";
  final static String rid = "51266D73C42AE";
  final static String fmtname = "EWD0900DS";
  final int FIELDCOUNT = 16;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldRWDUSR = null;
  private CharacterField fieldRWDTYP = null;
  private DecimalField fieldRWDFRC = null;
  private CharacterField fieldSWDNAM = null;
  private CharacterField fieldSWDNUM = null;
  private CharacterField fieldSWDFIL = null;
  private DecimalField fieldSWDPLN = null;
  private CharacterField fieldSWDOUT = null;
  private CharacterField fieldSWDSRD = null;
  private CharacterField fieldSWDSTS = null;
  private DecimalField fieldSWDPAG = null;
  private CharacterField fieldSWDDAT = null;
  private CharacterField fieldSWDTIM = null;
  private CharacterField fieldSWDPTH = null;
  private DecimalField fieldSWDREC = null;
  private CharacterField fieldSWDOPE = null;

  /**
  * Constructor for EWD0900DSMessage.
  */
  public EWD0900DSMessage()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 266;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldRWDUSR =
    new CharacterField(message, HEADERSIZE + 0, 10, "RWDUSR");
    fields[1] = fieldRWDTYP =
    new CharacterField(message, HEADERSIZE + 10, 1, "RWDTYP");
    fields[2] = fieldRWDFRC =
    new DecimalField(message, HEADERSIZE + 11, 8, 0, "RWDFRC");
    fields[3] = fieldSWDNAM =
    new CharacterField(message, HEADERSIZE + 19, 10, "SWDNAM");
    fields[4] = fieldSWDNUM =
    new CharacterField(message, HEADERSIZE + 29, 6, "SWDNUM");
    fields[5] = fieldSWDFIL =
    new CharacterField(message, HEADERSIZE + 35, 10, "SWDFIL");
    fields[6] = fieldSWDPLN =
    new DecimalField(message, HEADERSIZE + 45, 7, 0, "SWDPLN");
    fields[7] = fieldSWDOUT =
    new CharacterField(message, HEADERSIZE + 52, 30, "SWDOUT");
    fields[8] = fieldSWDSRD =
    new CharacterField(message, HEADERSIZE + 82, 10, "SWDSRD");
    fields[9] = fieldSWDSTS =
    new CharacterField(message, HEADERSIZE + 92, 10, "SWDSTS");
    fields[10] = fieldSWDPAG =
    new DecimalField(message, HEADERSIZE + 102, 7, 0, "SWDPAG");
    fields[11] = fieldSWDDAT =
    new CharacterField(message, HEADERSIZE + 109, 8, "SWDDAT");
    fields[12] = fieldSWDTIM =
    new CharacterField(message, HEADERSIZE + 117, 8, "SWDTIM");
    fields[13] = fieldSWDPTH =
    new CharacterField(message, HEADERSIZE + 125, 132, "SWDPTH");
    fields[14] = fieldSWDREC =
    new DecimalField(message, HEADERSIZE + 257, 8, 0, "SWDREC");
    fields[15] = fieldSWDOPE =
    new CharacterField(message, HEADERSIZE + 265, 1, "SWDOPE");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field RWDUSR using a String value.
  */
  public void setRWDUSR(String newvalue)
  {
    fieldRWDUSR.setString(newvalue);
  }

  /**
  * Get value of field RWDUSR as a String.
  */
  public String getRWDUSR()
  {
    return fieldRWDUSR.getString();
  }

  /**
  * Set field RWDTYP using a String value.
  */
  public void setRWDTYP(String newvalue)
  {
    fieldRWDTYP.setString(newvalue);
  }

  /**
  * Get value of field RWDTYP as a String.
  */
  public String getRWDTYP()
  {
    return fieldRWDTYP.getString();
  }

  /**
  * Set field RWDFRC using a String value.
  */
  public void setRWDFRC(String newvalue)
  {
    fieldRWDFRC.setString(newvalue);
  }

  /**
  * Get value of field RWDFRC as a String.
  */
  public String getRWDFRC()
  {
    return fieldRWDFRC.getString();
  }

  /**
  * Set numeric field RWDFRC using a BigDecimal value.
  */
  public void setRWDFRC(BigDecimal newvalue)
  {
    fieldRWDFRC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field RWDFRC as a BigDecimal.
  */
  public BigDecimal getBigDecimalRWDFRC()
  {
    return fieldRWDFRC.getBigDecimal();
  }

  /**
  * Set field SWDNAM using a String value.
  */
  public void setSWDNAM(String newvalue)
  {
    fieldSWDNAM.setString(newvalue);
  }

  /**
  * Get value of field SWDNAM as a String.
  */
  public String getSWDNAM()
  {
    return fieldSWDNAM.getString();
  }

  /**
  * Set field SWDNUM using a String value.
  */
  public void setSWDNUM(String newvalue)
  {
    fieldSWDNUM.setString(newvalue);
  }

  /**
  * Get value of field SWDNUM as a String.
  */
  public String getSWDNUM()
  {
    return fieldSWDNUM.getString();
  }

  /**
  * Set field SWDFIL using a String value.
  */
  public void setSWDFIL(String newvalue)
  {
    fieldSWDFIL.setString(newvalue);
  }

  /**
  * Get value of field SWDFIL as a String.
  */
  public String getSWDFIL()
  {
    return fieldSWDFIL.getString();
  }

  /**
  * Set field SWDPLN using a String value.
  */
  public void setSWDPLN(String newvalue)
  {
    fieldSWDPLN.setString(newvalue);
  }

  /**
  * Get value of field SWDPLN as a String.
  */
  public String getSWDPLN()
  {
    return fieldSWDPLN.getString();
  }

  /**
  * Set numeric field SWDPLN using a BigDecimal value.
  */
  public void setSWDPLN(BigDecimal newvalue)
  {
    fieldSWDPLN.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field SWDPLN as a BigDecimal.
  */
  public BigDecimal getBigDecimalSWDPLN()
  {
    return fieldSWDPLN.getBigDecimal();
  }

  /**
  * Set field SWDOUT using a String value.
  */
  public void setSWDOUT(String newvalue)
  {
    fieldSWDOUT.setString(newvalue);
  }

  /**
  * Get value of field SWDOUT as a String.
  */
  public String getSWDOUT()
  {
    return fieldSWDOUT.getString();
  }

  /**
  * Set field SWDSRD using a String value.
  */
  public void setSWDSRD(String newvalue)
  {
    fieldSWDSRD.setString(newvalue);
  }

  /**
  * Get value of field SWDSRD as a String.
  */
  public String getSWDSRD()
  {
    return fieldSWDSRD.getString();
  }

  /**
  * Set field SWDSTS using a String value.
  */
  public void setSWDSTS(String newvalue)
  {
    fieldSWDSTS.setString(newvalue);
  }

  /**
  * Get value of field SWDSTS as a String.
  */
  public String getSWDSTS()
  {
    return fieldSWDSTS.getString();
  }

  /**
  * Set field SWDPAG using a String value.
  */
  public void setSWDPAG(String newvalue)
  {
    fieldSWDPAG.setString(newvalue);
  }

  /**
  * Get value of field SWDPAG as a String.
  */
  public String getSWDPAG()
  {
    return fieldSWDPAG.getString();
  }

  /**
  * Set numeric field SWDPAG using a BigDecimal value.
  */
  public void setSWDPAG(BigDecimal newvalue)
  {
    fieldSWDPAG.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field SWDPAG as a BigDecimal.
  */
  public BigDecimal getBigDecimalSWDPAG()
  {
    return fieldSWDPAG.getBigDecimal();
  }

  /**
  * Set field SWDDAT using a String value.
  */
  public void setSWDDAT(String newvalue)
  {
    fieldSWDDAT.setString(newvalue);
  }

  /**
  * Get value of field SWDDAT as a String.
  */
  public String getSWDDAT()
  {
    return fieldSWDDAT.getString();
  }

  /**
  * Set field SWDTIM using a String value.
  */
  public void setSWDTIM(String newvalue)
  {
    fieldSWDTIM.setString(newvalue);
  }

  /**
  * Get value of field SWDTIM as a String.
  */
  public String getSWDTIM()
  {
    return fieldSWDTIM.getString();
  }

  /**
  * Set field SWDPTH using a String value.
  */
  public void setSWDPTH(String newvalue)
  {
    fieldSWDPTH.setString(newvalue);
  }

  /**
  * Get value of field SWDPTH as a String.
  */
  public String getSWDPTH()
  {
    return fieldSWDPTH.getString();
  }

  /**
  * Set field SWDREC using a String value.
  */
  public void setSWDREC(String newvalue)
  {
    fieldSWDREC.setString(newvalue);
  }

  /**
  * Get value of field SWDREC as a String.
  */
  public String getSWDREC()
  {
    return fieldSWDREC.getString();
  }

  /**
  * Set numeric field SWDREC using a BigDecimal value.
  */
  public void setSWDREC(BigDecimal newvalue)
  {
    fieldSWDREC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field SWDREC as a BigDecimal.
  */
  public BigDecimal getBigDecimalSWDREC()
  {
    return fieldSWDREC.getBigDecimal();
  }

  /**
  * Set field SWDOPE using a String value.
  */
  public void setSWDOPE(String newvalue)
  {
    fieldSWDOPE.setString(newvalue);
  }

  /**
  * Get value of field SWDOPE as a String.
  */
  public String getSWDOPE()
  {
    return fieldSWDOPE.getString();
  }

}
