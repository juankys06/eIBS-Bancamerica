package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from ESD071150 physical file definition.
* 
* File level identifier is 1030121192007.
* Record format level identifier is 4AAFCD5B9A217.
*/

public class ESD071150Message extends MessageRecord
{
  final static String fldnames[] = {
                                     "E50USERID",
                                     "E50APETYP",
                                     "E50APEBNK",
                                     "E50APECDE",
                                     "E50APEAUD",
                                     "E50APEVID",
                                     "E50APEHTM"
                                   };
  final static String tnames[] = {
                                   "E50USERID",
                                   "E50APETYP",
                                   "E50APEBNK",
                                   "E50APECDE",
                                   "E50APEAUD",
                                   "E50APEVID",
                                   "E50APEHTM"
                                 };
  final static String fid = "1030121192007";
  final static String rid = "4AAFCD5B9A217";
  final static String fmtname = "ESD071150";
  final int FIELDCOUNT = 7;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldE50USERID = null;
  private CharacterField fieldE50APETYP = null;
  private CharacterField fieldE50APEBNK = null;
  private CharacterField fieldE50APECDE = null;
  private CharacterField fieldE50APEAUD = null;
  private CharacterField fieldE50APEVID = null;
  private CharacterField fieldE50APEHTM = null;

  /**
  * Constructor for ESD071150Message.
  */
  public ESD071150Message()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 260;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldE50USERID =
    new CharacterField(message, HEADERSIZE + 0, 10, "E50USERID");
    fields[1] = fieldE50APETYP =
    new CharacterField(message, HEADERSIZE + 10, 4, "E50APETYP");
    fields[2] = fieldE50APEBNK =
    new CharacterField(message, HEADERSIZE + 14, 2, "E50APEBNK");
    fields[3] = fieldE50APECDE =
    new CharacterField(message, HEADERSIZE + 16, 4, "E50APECDE");
    fields[4] = fieldE50APEAUD =
    new CharacterField(message, HEADERSIZE + 20, 80, "E50APEAUD");
    fields[5] = fieldE50APEVID =
    new CharacterField(message, HEADERSIZE + 100, 80, "E50APEVID");
    fields[6] = fieldE50APEHTM =
    new CharacterField(message, HEADERSIZE + 180, 80, "E50APEHTM");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field E50USERID using a String value.
  */
  public void setE50USERID(String newvalue)
  {
    fieldE50USERID.setString(newvalue);
  }

  /**
  * Get value of field E50USERID as a String.
  */
  public String getE50USERID()
  {
    return fieldE50USERID.getString();
  }

  /**
  * Set field E50APETYP using a String value.
  */
  public void setE50APETYP(String newvalue)
  {
    fieldE50APETYP.setString(newvalue);
  }

  /**
  * Get value of field E50APETYP as a String.
  */
  public String getE50APETYP()
  {
    return fieldE50APETYP.getString();
  }

  /**
  * Set field E50APEBNK using a String value.
  */
  public void setE50APEBNK(String newvalue)
  {
    fieldE50APEBNK.setString(newvalue);
  }

  /**
  * Get value of field E50APEBNK as a String.
  */
  public String getE50APEBNK()
  {
    return fieldE50APEBNK.getString();
  }

  /**
  * Set field E50APECDE using a String value.
  */
  public void setE50APECDE(String newvalue)
  {
    fieldE50APECDE.setString(newvalue);
  }

  /**
  * Get value of field E50APECDE as a String.
  */
  public String getE50APECDE()
  {
    return fieldE50APECDE.getString();
  }

  /**
  * Set field E50APEAUD using a String value.
  */
  public void setE50APEAUD(String newvalue)
  {
    fieldE50APEAUD.setString(newvalue);
  }

  /**
  * Get value of field E50APEAUD as a String.
  */
  public String getE50APEAUD()
  {
    return fieldE50APEAUD.getString();
  }

  /**
  * Set field E50APEVID using a String value.
  */
  public void setE50APEVID(String newvalue)
  {
    fieldE50APEVID.setString(newvalue);
  }

  /**
  * Get value of field E50APEVID as a String.
  */
  public String getE50APEVID()
  {
    return fieldE50APEVID.getString();
  }

  /**
  * Set field E50APEHTM using a String value.
  */
  public void setE50APEHTM(String newvalue)
  {
    fieldE50APEHTM.setString(newvalue);
  }

  /**
  * Get value of field E50APEHTM as a String.
  */
  public String getE50APEHTM()
  {
    return fieldE50APEHTM.getString();
  }

}
