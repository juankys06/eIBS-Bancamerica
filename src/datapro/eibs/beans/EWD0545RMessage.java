package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from EWD0545R physical file definition.
* 
* File level identifier is 1070409152639.
* Record format level identifier is 3FC6F28AED797.
*/

public class EWD0545RMessage extends MessageRecord
{
  final static String fldnames[] = {
                                     "RWDUSR",
                                     "RWDSHR",
                                     "RWDTYP",
                                     "RWDSEL",
                                     "RWDFRC"
                                   };
  final static String tnames[] = {
                                   "RWDUSR",
                                   "RWDSHR",
                                   "RWDTYP",
                                   "RWDSEL",
                                   "RWDFRC"
                                 };
  final static String fid = "1070409152639";
  final static String rid = "3FC6F28AED797";
  final static String fmtname = "EWD0545R";
  final int FIELDCOUNT = 5;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldRWDUSR = null;
  private CharacterField fieldRWDSHR = null;
  private CharacterField fieldRWDTYP = null;
  private CharacterField fieldRWDSEL = null;
  private DecimalField fieldRWDFRC = null;

  /**
  * Constructor for EWD0545RMessage.
  */
  public EWD0545RMessage()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 40;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldRWDUSR =
    new CharacterField(message, HEADERSIZE + 0, 10, "RWDUSR");
    fields[1] = fieldRWDSHR =
    new CharacterField(message, HEADERSIZE + 10, 20, "RWDSHR");
    fields[2] = fieldRWDTYP =
    new CharacterField(message, HEADERSIZE + 30, 1, "RWDTYP");
    fields[3] = fieldRWDSEL =
    new CharacterField(message, HEADERSIZE + 31, 1, "RWDSEL");
    fields[4] = fieldRWDFRC =
    new DecimalField(message, HEADERSIZE + 32, 8, 0, "RWDFRC");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field RWDUSR using a String value.
  */
  public void setRWDUSR(String newvalue)
  {
    fieldRWDUSR.setString(newvalue);
  }

  /**
  * Get value of field RWDUSR as a String.
  */
  public String getRWDUSR()
  {
    return fieldRWDUSR.getString();
  }

  /**
  * Set field RWDSHR using a String value.
  */
  public void setRWDSHR(String newvalue)
  {
    fieldRWDSHR.setString(newvalue);
  }

  /**
  * Get value of field RWDSHR as a String.
  */
  public String getRWDSHR()
  {
    return fieldRWDSHR.getString();
  }

  /**
  * Set field RWDTYP using a String value.
  */
  public void setRWDTYP(String newvalue)
  {
    fieldRWDTYP.setString(newvalue);
  }

  /**
  * Get value of field RWDTYP as a String.
  */
  public String getRWDTYP()
  {
    return fieldRWDTYP.getString();
  }

  /**
  * Set field RWDSEL using a String value.
  */
  public void setRWDSEL(String newvalue)
  {
    fieldRWDSEL.setString(newvalue);
  }

  /**
  * Get value of field RWDSEL as a String.
  */
  public String getRWDSEL()
  {
    return fieldRWDSEL.getString();
  }

  /**
  * Set field RWDFRC using a String value.
  */
  public void setRWDFRC(String newvalue)
  {
    fieldRWDFRC.setString(newvalue);
  }

  /**
  * Get value of field RWDFRC as a String.
  */
  public String getRWDFRC()
  {
    return fieldRWDFRC.getString();
  }

  /**
  * Set numeric field RWDFRC using a BigDecimal value.
  */
  public void setRWDFRC(BigDecimal newvalue)
  {
    fieldRWDFRC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field RWDFRC as a BigDecimal.
  */
  public BigDecimal getBigDecimalRWDFRC()
  {
    return fieldRWDFRC.getBigDecimal();
  }

}
