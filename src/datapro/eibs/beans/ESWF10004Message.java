package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from ESWF10004 physical file definition.
* 
* File level identifier is 1030130204941.
* Record format level identifier is 4614F4094E3D5.
*/

public class ESWF10004Message extends MessageRecord
{
  final static String fldnames[] = {
                                     "H04USR",
                                     "H04PGM",
                                     "H04TIM",
                                     "H04SCR",
                                     "H04OPE",
                                     "H04MAS",
                                     "H04WK1",
                                     "H04WK2",
                                     "H04WK3",
                                     "E04SWFACC",
                                     "E04ACTION",
                                     "E04MSGTXT"
                                   };
  final static String tnames[] = {
                                   "H04USR",
                                   "H04PGM",
                                   "H04TIM",
                                   "H04SCR",
                                   "H04OPE",
                                   "H04MAS",
                                   "H04WK1",
                                   "H04WK2",
                                   "H04WK3",
                                   "E04SWFACC",
                                   "E04ACTION",
                                   "E04MSGTXT"
                                 };
  final static String fid = "1030130204941";
  final static String rid = "4614F4094E3D5";
  final static String fmtname = "ESWF10004";
  final int FIELDCOUNT = 12;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldH04USR = null;
  private CharacterField fieldH04PGM = null;
  private CharacterField fieldH04TIM = null;
  private CharacterField fieldH04SCR = null;
  private CharacterField fieldH04OPE = null;
  private CharacterField fieldH04MAS = null;
  private CharacterField fieldH04WK1 = null;
  private CharacterField fieldH04WK2 = null;
  private CharacterField fieldH04WK3 = null;
  private DecimalField fieldE04SWFACC = null;
  private CharacterField fieldE04ACTION = null;
  private CharacterField fieldE04MSGTXT = null;

  /**
  * Constructor for ESWF10004Message.
  */
  public ESWF10004Message()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 1056;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldH04USR =
    new CharacterField(message, HEADERSIZE + 0, 10, "H04USR");
    fields[1] = fieldH04PGM =
    new CharacterField(message, HEADERSIZE + 10, 10, "H04PGM");
    fields[2] = fieldH04TIM =
    new CharacterField(message, HEADERSIZE + 20, 12, "H04TIM");
    fields[3] = fieldH04SCR =
    new CharacterField(message, HEADERSIZE + 32, 2, "H04SCR");
    fields[4] = fieldH04OPE =
    new CharacterField(message, HEADERSIZE + 34, 4, "H04OPE");
    fields[5] = fieldH04MAS =
    new CharacterField(message, HEADERSIZE + 38, 1, "H04MAS");
    fields[6] = fieldH04WK1 =
    new CharacterField(message, HEADERSIZE + 39, 1, "H04WK1");
    fields[7] = fieldH04WK2 =
    new CharacterField(message, HEADERSIZE + 40, 1, "H04WK2");
    fields[8] = fieldH04WK3 =
    new CharacterField(message, HEADERSIZE + 41, 1, "H04WK3");
    fields[9] = fieldE04SWFACC =
    new DecimalField(message, HEADERSIZE + 42, 13, 0, "E04SWFACC");
    fields[10] = fieldE04ACTION =
    new CharacterField(message, HEADERSIZE + 55, 1, "E04ACTION");
    fields[11] = fieldE04MSGTXT =
    new CharacterField(message, HEADERSIZE + 56, 1000, "E04MSGTXT");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field H04USR using a String value.
  */
  public void setH04USR(String newvalue)
  {
    fieldH04USR.setString(newvalue);
  }

  /**
  * Get value of field H04USR as a String.
  */
  public String getH04USR()
  {
    return fieldH04USR.getString();
  }

  /**
  * Set field H04PGM using a String value.
  */
  public void setH04PGM(String newvalue)
  {
    fieldH04PGM.setString(newvalue);
  }

  /**
  * Get value of field H04PGM as a String.
  */
  public String getH04PGM()
  {
    return fieldH04PGM.getString();
  }

  /**
  * Set field H04TIM using a String value.
  */
  public void setH04TIM(String newvalue)
  {
    fieldH04TIM.setString(newvalue);
  }

  /**
  * Get value of field H04TIM as a String.
  */
  public String getH04TIM()
  {
    return fieldH04TIM.getString();
  }

  /**
  * Set field H04SCR using a String value.
  */
  public void setH04SCR(String newvalue)
  {
    fieldH04SCR.setString(newvalue);
  }

  /**
  * Get value of field H04SCR as a String.
  */
  public String getH04SCR()
  {
    return fieldH04SCR.getString();
  }

  /**
  * Set field H04OPE using a String value.
  */
  public void setH04OPE(String newvalue)
  {
    fieldH04OPE.setString(newvalue);
  }

  /**
  * Get value of field H04OPE as a String.
  */
  public String getH04OPE()
  {
    return fieldH04OPE.getString();
  }

  /**
  * Set field H04MAS using a String value.
  */
  public void setH04MAS(String newvalue)
  {
    fieldH04MAS.setString(newvalue);
  }

  /**
  * Get value of field H04MAS as a String.
  */
  public String getH04MAS()
  {
    return fieldH04MAS.getString();
  }

  /**
  * Set field H04WK1 using a String value.
  */
  public void setH04WK1(String newvalue)
  {
    fieldH04WK1.setString(newvalue);
  }

  /**
  * Get value of field H04WK1 as a String.
  */
  public String getH04WK1()
  {
    return fieldH04WK1.getString();
  }

  /**
  * Set field H04WK2 using a String value.
  */
  public void setH04WK2(String newvalue)
  {
    fieldH04WK2.setString(newvalue);
  }

  /**
  * Get value of field H04WK2 as a String.
  */
  public String getH04WK2()
  {
    return fieldH04WK2.getString();
  }

  /**
  * Set field H04WK3 using a String value.
  */
  public void setH04WK3(String newvalue)
  {
    fieldH04WK3.setString(newvalue);
  }

  /**
  * Get value of field H04WK3 as a String.
  */
  public String getH04WK3()
  {
    return fieldH04WK3.getString();
  }

  /**
  * Set field E04SWFACC using a String value.
  */
  public void setE04SWFACC(String newvalue)
  {
    fieldE04SWFACC.setString(newvalue);
  }

  /**
  * Get value of field E04SWFACC as a String.
  */
  public String getE04SWFACC()
  {
    return fieldE04SWFACC.getString();
  }

  /**
  * Set numeric field E04SWFACC using a BigDecimal value.
  */
  public void setE04SWFACC(BigDecimal newvalue)
  {
    fieldE04SWFACC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E04SWFACC as a BigDecimal.
  */
  public BigDecimal getBigDecimalE04SWFACC()
  {
    return fieldE04SWFACC.getBigDecimal();
  }

  /**
  * Set field E04ACTION using a String value.
  */
  public void setE04ACTION(String newvalue)
  {
    fieldE04ACTION.setString(newvalue);
  }

  /**
  * Get value of field E04ACTION as a String.
  */
  public String getE04ACTION()
  {
    return fieldE04ACTION.getString();
  }

  /**
  * Set field E04MSGTXT using a String value.
  */
  public void setE04MSGTXT(String newvalue)
  {
    fieldE04MSGTXT.setString(newvalue);
  }

  /**
  * Get value of field E04MSGTXT as a String.
  */
  public String getE04MSGTXT()
  {
    return fieldE04MSGTXT.getString();
  }

}
