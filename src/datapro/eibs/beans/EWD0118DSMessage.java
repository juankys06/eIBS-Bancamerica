package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from EWD0118DS physical file definition.
* 
* File level identifier is 1030221132626.
* Record format level identifier is 4CE72C6E8B924.
*/

public class EWD0118DSMessage extends MessageRecord
{
  final static String fldnames[] = {
                                     "EWDTCB",
                                     "EWDNCK",
                                     "EWDCCY",
                                     "EWDATY",
                                     "EWDDSC",
                                     "EWDTBL",
                                     "EWDCLS",
                                     "EWDOPE"
                                   };
  final static String tnames[] = {
                                   "EWDTCB",
                                   "EWDNCK",
                                   "EWDCCY",
                                   "EWDATY",
                                   "EWDDSC",
                                   "EWDTBL",
                                   "EWDCLS",
                                   "EWDOPE"
                                 };
  final static String fid = "1030221132626";
  final static String rid = "4CE72C6E8B924";
  final static String fmtname = "EWD0118DS";
  final int FIELDCOUNT = 8;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldEWDTCB = null;
  private DecimalField fieldEWDNCK = null;
  private CharacterField fieldEWDCCY = null;
  private CharacterField fieldEWDATY = null;
  private CharacterField fieldEWDDSC = null;
  private CharacterField fieldEWDTBL = null;
  private CharacterField fieldEWDCLS = null;
  private CharacterField fieldEWDOPE = null;

  /**
  * Constructor for EWD0118DSMessage.
  */
  public EWD0118DSMessage()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 52;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldEWDTCB =
    new CharacterField(message, HEADERSIZE + 0, 2, "EWDTCB");
    fields[1] = fieldEWDNCK =
    new DecimalField(message, HEADERSIZE + 2, 5, 0, "EWDNCK");
    fields[2] = fieldEWDCCY =
    new CharacterField(message, HEADERSIZE + 7, 3, "EWDCCY");
    fields[3] = fieldEWDATY =
    new CharacterField(message, HEADERSIZE + 10, 4, "EWDATY");
    fields[4] = fieldEWDDSC =
    new CharacterField(message, HEADERSIZE + 14, 35, "EWDDSC");
    fields[5] = fieldEWDTBL =
    new CharacterField(message, HEADERSIZE + 49, 1, "EWDTBL");
    fields[6] = fieldEWDCLS =
    new CharacterField(message, HEADERSIZE + 50, 1, "EWDCLS");
    fields[7] = fieldEWDOPE =
    new CharacterField(message, HEADERSIZE + 51, 1, "EWDOPE");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field EWDTCB using a String value.
  */
  public void setEWDTCB(String newvalue)
  {
    fieldEWDTCB.setString(newvalue);
  }

  /**
  * Get value of field EWDTCB as a String.
  */
  public String getEWDTCB()
  {
    return fieldEWDTCB.getString();
  }

  /**
  * Set field EWDNCK using a String value.
  */
  public void setEWDNCK(String newvalue)
  {
    fieldEWDNCK.setString(newvalue);
  }

  /**
  * Get value of field EWDNCK as a String.
  */
  public String getEWDNCK()
  {
    return fieldEWDNCK.getString();
  }

  /**
  * Set numeric field EWDNCK using a BigDecimal value.
  */
  public void setEWDNCK(BigDecimal newvalue)
  {
    fieldEWDNCK.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EWDNCK as a BigDecimal.
  */
  public BigDecimal getBigDecimalEWDNCK()
  {
    return fieldEWDNCK.getBigDecimal();
  }

  /**
  * Set field EWDCCY using a String value.
  */
  public void setEWDCCY(String newvalue)
  {
    fieldEWDCCY.setString(newvalue);
  }

  /**
  * Get value of field EWDCCY as a String.
  */
  public String getEWDCCY()
  {
    return fieldEWDCCY.getString();
  }

  /**
  * Set field EWDATY using a String value.
  */
  public void setEWDATY(String newvalue)
  {
    fieldEWDATY.setString(newvalue);
  }

  /**
  * Get value of field EWDATY as a String.
  */
  public String getEWDATY()
  {
    return fieldEWDATY.getString();
  }

  /**
  * Set field EWDDSC using a String value.
  */
  public void setEWDDSC(String newvalue)
  {
    fieldEWDDSC.setString(newvalue);
  }

  /**
  * Get value of field EWDDSC as a String.
  */
  public String getEWDDSC()
  {
    return fieldEWDDSC.getString();
  }

  /**
  * Set field EWDTBL using a String value.
  */
  public void setEWDTBL(String newvalue)
  {
    fieldEWDTBL.setString(newvalue);
  }

  /**
  * Get value of field EWDTBL as a String.
  */
  public String getEWDTBL()
  {
    return fieldEWDTBL.getString();
  }

  /**
  * Set field EWDCLS using a String value.
  */
  public void setEWDCLS(String newvalue)
  {
    fieldEWDCLS.setString(newvalue);
  }

  /**
  * Get value of field EWDCLS as a String.
  */
  public String getEWDCLS()
  {
    return fieldEWDCLS.getString();
  }

  /**
  * Set field EWDOPE using a String value.
  */
  public void setEWDOPE(String newvalue)
  {
    fieldEWDOPE.setString(newvalue);
  }

  /**
  * Get value of field EWDOPE as a String.
  */
  public String getEWDOPE()
  {
    return fieldEWDOPE.getString();
  }

}
