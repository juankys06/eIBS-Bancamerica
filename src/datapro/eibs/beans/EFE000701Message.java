package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from EFE000701 physical file definition.
* 
* File level identifier is 1090501151821.
* Record format level identifier is 343551C227131.
*/

public class EFE000701Message extends MessageRecord
{
  final static String fldnames[] = { 
                                     "RWDUSR",
                                     "RWDTYP",
                                     "RWDFRC",
                                     "SWDUSR",
                                     "SWDCCY",
                                     "SWDPOR",
                                     "SWDDUS",
                                     "SWDDCY",
                                     "SWDREC",
                                     "SWDOPE"
                                   };
  final static String tnames[] = {
                                   "RWDUSR",
                                   "RWDTYP",
                                   "RWDFRC",
                                   "SWDUSR",
                                   "SWDCCY",
                                   "SWDPOR",
                                   "SWDDUS",
                                   "SWDDCY",
                                   "SWDREC",
                                   "SWDOPE"
                                 };
  final static String fid = "1090501151821";
  final static String rid = "343551C227131";
  final static String fmtname = "EFE000701";
  final int FIELDCOUNT = 10;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldRWDUSR = null;
  private CharacterField fieldRWDTYP = null;
  private DecimalField fieldRWDFRC = null;
  private CharacterField fieldSWDUSR = null;
  private CharacterField fieldSWDCCY = null;
  private DecimalField fieldSWDPOR = null;
  private CharacterField fieldSWDDUS = null;
  private CharacterField fieldSWDDCY = null;
  private DecimalField fieldSWDREC = null;
  private CharacterField fieldSWDOPE = null;

  /**
  * Constructor for EFE000701Message.
  */
  public EFE000701Message()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 108;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldRWDUSR =
    new CharacterField(message, HEADERSIZE + 0, 10, "RWDUSR");
    fields[1] = fieldRWDTYP =
    new CharacterField(message, HEADERSIZE + 10, 1, "RWDTYP");
    fields[2] = fieldRWDFRC =
    new DecimalField(message, HEADERSIZE + 11, 8, 0, "RWDFRC");
    fields[3] = fieldSWDUSR =
    new CharacterField(message, HEADERSIZE + 19, 10, "SWDUSR");
    fields[4] = fieldSWDCCY =
    new CharacterField(message, HEADERSIZE + 29, 3, "SWDCCY");
    fields[5] = fieldSWDPOR =
    new DecimalField(message, HEADERSIZE + 32, 7, 2, "SWDPOR");
    fields[6] = fieldSWDDUS =
    new CharacterField(message, HEADERSIZE + 39, 30, "SWDDUS");
    fields[7] = fieldSWDDCY =
    new CharacterField(message, HEADERSIZE + 69, 30, "SWDDCY");
    fields[8] = fieldSWDREC =
    new DecimalField(message, HEADERSIZE + 99, 8, 0, "SWDREC");
    fields[9] = fieldSWDOPE =
    new CharacterField(message, HEADERSIZE + 107, 1, "SWDOPE");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field RWDUSR using a String value.
  */
  public void setRWDUSR(String newvalue)
  {
    fieldRWDUSR.setString(newvalue);
  }

  /**
  * Get value of field RWDUSR as a String.
  */
  public String getRWDUSR()
  {
    return fieldRWDUSR.getString();
  }

  /**
  * Set field RWDTYP using a String value.
  */
  public void setRWDTYP(String newvalue)
  {
    fieldRWDTYP.setString(newvalue);
  }

  /**
  * Get value of field RWDTYP as a String.
  */
  public String getRWDTYP()
  {
    return fieldRWDTYP.getString();
  }

  /**
  * Set field RWDFRC using a String value.
  */
  public void setRWDFRC(String newvalue)
  {
    fieldRWDFRC.setString(newvalue);
  }

  /**
  * Get value of field RWDFRC as a String.
  */
  public String getRWDFRC()
  {
    return fieldRWDFRC.getString();
  }

  /**
  * Set numeric field RWDFRC using a BigDecimal value.
  */
  public void setRWDFRC(BigDecimal newvalue)
  {
    fieldRWDFRC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field RWDFRC as a BigDecimal.
  */
  public BigDecimal getBigDecimalRWDFRC()
  {
    return fieldRWDFRC.getBigDecimal();
  }

  /**
  * Set field SWDUSR using a String value.
  */
  public void setSWDUSR(String newvalue)
  {
    fieldSWDUSR.setString(newvalue);
  }

  /**
  * Get value of field SWDUSR as a String.
  */
  public String getSWDUSR()
  {
    return fieldSWDUSR.getString();
  }

  /**
  * Set field SWDCCY using a String value.
  */
  public void setSWDCCY(String newvalue)
  {
    fieldSWDCCY.setString(newvalue);
  }

  /**
  * Get value of field SWDCCY as a String.
  */
  public String getSWDCCY()
  {
    return fieldSWDCCY.getString();
  }

  /**
  * Set field SWDPOR using a String value.
  */
  public void setSWDPOR(String newvalue)
  {
    fieldSWDPOR.setString(newvalue);
  }

  /**
  * Get value of field SWDPOR as a String.
  */
  public String getSWDPOR()
  {
    return fieldSWDPOR.getString();
  }

  /**
  * Set numeric field SWDPOR using a BigDecimal value.
  */
  public void setSWDPOR(BigDecimal newvalue)
  {
    fieldSWDPOR.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field SWDPOR as a BigDecimal.
  */
  public BigDecimal getBigDecimalSWDPOR()
  {
    return fieldSWDPOR.getBigDecimal();
  }

  /**
  * Set field SWDDUS using a String value.
  */
  public void setSWDDUS(String newvalue)
  {
    fieldSWDDUS.setString(newvalue);
  }

  /**
  * Get value of field SWDDUS as a String.
  */
  public String getSWDDUS()
  {
    return fieldSWDDUS.getString();
  }

  /**
  * Set field SWDDCY using a String value.
  */
  public void setSWDDCY(String newvalue)
  {
    fieldSWDDCY.setString(newvalue);
  }

  /**
  * Get value of field SWDDCY as a String.
  */
  public String getSWDDCY()
  {
    return fieldSWDDCY.getString();
  }

  /**
  * Set field SWDREC using a String value.
  */
  public void setSWDREC(String newvalue)
  {
    fieldSWDREC.setString(newvalue);
  }

  /**
  * Get value of field SWDREC as a String.
  */
  public String getSWDREC()
  {
    return fieldSWDREC.getString();
  }

  /**
  * Set numeric field SWDREC using a BigDecimal value.
  */
  public void setSWDREC(BigDecimal newvalue)
  {
    fieldSWDREC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field SWDREC as a BigDecimal.
  */
  public BigDecimal getBigDecimalSWDREC()
  {
    return fieldSWDREC.getBigDecimal();
  }

  /**
  * Set field SWDOPE using a String value.
  */
  public void setSWDOPE(String newvalue)
  {
    fieldSWDOPE.setString(newvalue);
  }

  /**
  * Get value of field SWDOPE as a String.
  */
  public String getSWDOPE()
  {
    return fieldSWDOPE.getString();
  }

}
