package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from ESWF01003 physical file definition.
* 
* File level identifier is 1030130204909.
* Record format level identifier is 4A66164AA366B.
*/

public class ESWF01003Message extends MessageRecord
{
  final static String fldnames[] = {
                                     "H03USR",
                                     "H03PGM",
                                     "H03TIM",
                                     "H03SCR",
                                     "H03OPE",
                                     "H03MAS",
                                     "H03WK1",
                                     "H03WK2",
                                     "H03WK3",
                                     "ESW3ACTION",
                                     "ESW3REF",
                                     "ESW3USR",
                                     "ESW3SWI",
                                     "ESW3FMT"
                                   };
  final static String tnames[] = {
                                   "H03USR",
                                   "H03PGM",
                                   "H03TIM",
                                   "H03SCR",
                                   "H03OPE",
                                   "H03MAS",
                                   "H03WK1",
                                   "H03WK2",
                                   "H03WK3",
                                   "ESW3ACTION",
                                   "ESW3REF",
                                   "ESW3USR",
                                   "ESW3SWI",
                                   "ESW3FMT"
                                 };
  final static String fid = "1030130204909";
  final static String rid = "4A66164AA366B";
  final static String fmtname = "ESWF01003";
  final int FIELDCOUNT = 14;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldH03USR = null;
  private CharacterField fieldH03PGM = null;
  private CharacterField fieldH03TIM = null;
  private CharacterField fieldH03SCR = null;
  private CharacterField fieldH03OPE = null;
  private CharacterField fieldH03MAS = null;
  private CharacterField fieldH03WK1 = null;
  private CharacterField fieldH03WK2 = null;
  private CharacterField fieldH03WK3 = null;
  private CharacterField fieldESW3ACTION = null;
  private CharacterField fieldESW3REF = null;
  private CharacterField fieldESW3USR = null;
  private CharacterField fieldESW3SWI = null;
  private DecimalField fieldESW3FMT = null;

  /**
  * Constructor for ESWF01003Message.
  */
  public ESWF01003Message()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 85;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldH03USR =
    new CharacterField(message, HEADERSIZE + 0, 10, "H03USR");
    fields[1] = fieldH03PGM =
    new CharacterField(message, HEADERSIZE + 10, 10, "H03PGM");
    fields[2] = fieldH03TIM =
    new CharacterField(message, HEADERSIZE + 20, 12, "H03TIM");
    fields[3] = fieldH03SCR =
    new CharacterField(message, HEADERSIZE + 32, 2, "H03SCR");
    fields[4] = fieldH03OPE =
    new CharacterField(message, HEADERSIZE + 34, 4, "H03OPE");
    fields[5] = fieldH03MAS =
    new CharacterField(message, HEADERSIZE + 38, 1, "H03MAS");
    fields[6] = fieldH03WK1 =
    new CharacterField(message, HEADERSIZE + 39, 1, "H03WK1");
    fields[7] = fieldH03WK2 =
    new CharacterField(message, HEADERSIZE + 40, 1, "H03WK2");
    fields[8] = fieldH03WK3 =
    new CharacterField(message, HEADERSIZE + 41, 1, "H03WK3");
    fields[9] = fieldESW3ACTION =
    new CharacterField(message, HEADERSIZE + 42, 1, "ESW3ACTION");
    fields[10] = fieldESW3REF =
    new CharacterField(message, HEADERSIZE + 43, 16, "ESW3REF");
    fields[11] = fieldESW3USR =
    new CharacterField(message, HEADERSIZE + 59, 10, "ESW3USR");
    fields[12] = fieldESW3SWI =
    new CharacterField(message, HEADERSIZE + 69, 12, "ESW3SWI");
    fields[13] = fieldESW3FMT =
    new DecimalField(message, HEADERSIZE + 81, 4, 0, "ESW3FMT");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field H03USR using a String value.
  */
  public void setH03USR(String newvalue)
  {
    fieldH03USR.setString(newvalue);
  }

  /**
  * Get value of field H03USR as a String.
  */
  public String getH03USR()
  {
    return fieldH03USR.getString();
  }

  /**
  * Set field H03PGM using a String value.
  */
  public void setH03PGM(String newvalue)
  {
    fieldH03PGM.setString(newvalue);
  }

  /**
  * Get value of field H03PGM as a String.
  */
  public String getH03PGM()
  {
    return fieldH03PGM.getString();
  }

  /**
  * Set field H03TIM using a String value.
  */
  public void setH03TIM(String newvalue)
  {
    fieldH03TIM.setString(newvalue);
  }

  /**
  * Get value of field H03TIM as a String.
  */
  public String getH03TIM()
  {
    return fieldH03TIM.getString();
  }

  /**
  * Set field H03SCR using a String value.
  */
  public void setH03SCR(String newvalue)
  {
    fieldH03SCR.setString(newvalue);
  }

  /**
  * Get value of field H03SCR as a String.
  */
  public String getH03SCR()
  {
    return fieldH03SCR.getString();
  }

  /**
  * Set field H03OPE using a String value.
  */
  public void setH03OPE(String newvalue)
  {
    fieldH03OPE.setString(newvalue);
  }

  /**
  * Get value of field H03OPE as a String.
  */
  public String getH03OPE()
  {
    return fieldH03OPE.getString();
  }

  /**
  * Set field H03MAS using a String value.
  */
  public void setH03MAS(String newvalue)
  {
    fieldH03MAS.setString(newvalue);
  }

  /**
  * Get value of field H03MAS as a String.
  */
  public String getH03MAS()
  {
    return fieldH03MAS.getString();
  }

  /**
  * Set field H03WK1 using a String value.
  */
  public void setH03WK1(String newvalue)
  {
    fieldH03WK1.setString(newvalue);
  }

  /**
  * Get value of field H03WK1 as a String.
  */
  public String getH03WK1()
  {
    return fieldH03WK1.getString();
  }

  /**
  * Set field H03WK2 using a String value.
  */
  public void setH03WK2(String newvalue)
  {
    fieldH03WK2.setString(newvalue);
  }

  /**
  * Get value of field H03WK2 as a String.
  */
  public String getH03WK2()
  {
    return fieldH03WK2.getString();
  }

  /**
  * Set field H03WK3 using a String value.
  */
  public void setH03WK3(String newvalue)
  {
    fieldH03WK3.setString(newvalue);
  }

  /**
  * Get value of field H03WK3 as a String.
  */
  public String getH03WK3()
  {
    return fieldH03WK3.getString();
  }

  /**
  * Set field ESW3ACTION using a String value.
  */
  public void setESW3ACTION(String newvalue)
  {
    fieldESW3ACTION.setString(newvalue);
  }

  /**
  * Get value of field ESW3ACTION as a String.
  */
  public String getESW3ACTION()
  {
    return fieldESW3ACTION.getString();
  }

  /**
  * Set field ESW3REF using a String value.
  */
  public void setESW3REF(String newvalue)
  {
    fieldESW3REF.setString(newvalue);
  }

  /**
  * Get value of field ESW3REF as a String.
  */
  public String getESW3REF()
  {
    return fieldESW3REF.getString();
  }

  /**
  * Set field ESW3USR using a String value.
  */
  public void setESW3USR(String newvalue)
  {
    fieldESW3USR.setString(newvalue);
  }

  /**
  * Get value of field ESW3USR as a String.
  */
  public String getESW3USR()
  {
    return fieldESW3USR.getString();
  }

  /**
  * Set field ESW3SWI using a String value.
  */
  public void setESW3SWI(String newvalue)
  {
    fieldESW3SWI.setString(newvalue);
  }

  /**
  * Get value of field ESW3SWI as a String.
  */
  public String getESW3SWI()
  {
    return fieldESW3SWI.getString();
  }

  /**
  * Set field ESW3FMT using a String value.
  */
  public void setESW3FMT(String newvalue)
  {
    fieldESW3FMT.setString(newvalue);
  }

  /**
  * Get value of field ESW3FMT as a String.
  */
  public String getESW3FMT()
  {
    return fieldESW3FMT.getString();
  }

  /**
  * Set numeric field ESW3FMT using a BigDecimal value.
  */
  public void setESW3FMT(BigDecimal newvalue)
  {
    fieldESW3FMT.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field ESW3FMT as a BigDecimal.
  */
  public BigDecimal getBigDecimalESW3FMT()
  {
    return fieldESW3FMT.getBigDecimal();
  }

}
