package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from ECH030601 physical file definition.
* 
* File level identifier is 1040329165911.
* Record format level identifier is 4FD762BACE9A3.
*/

public class ECH030601Message extends MessageRecord
{
  final static String fldnames[] = {
                                     "H01USERID",
                                     "H01PROGRM",
                                     "H01TIMSYS",
                                     "H01SCRCOD",
                                     "H01OPECOD",
                                     "H01FLGMAS",
                                     "H01FLGWK1",
                                     "H01FLGWK2",
                                     "H01FLGWK3",
                                     "E01CODBNK",
                                     "E01SUCDST",
                                     "E01SUCORG",
                                     "E01NUMCTA",
                                     "E01CODCCY",
                                     "E01TIPPER",
                                     "E01TIPCHK",
                                     "E01CANCHK",
                                     "E01SERIEK",
                                     "E01NUMSOL"
                                   };
  final static String tnames[] = {
                                   "H01USERID",
                                   "H01PROGRM",
                                   "H01TIMSYS",
                                   "H01SCRCOD",
                                   "H01OPECOD",
                                   "H01FLGMAS",
                                   "H01FLGWK1",
                                   "H01FLGWK2",
                                   "H01FLGWK3",
                                   "E01CODBNK",
                                   "E01SUCDST",
                                   "E01SUCORG",
                                   "E01NUMCTA",
                                   "E01CODCCY",
                                   "E01TIPPER",
                                   "E01TIPCHK",
                                   "E01CANCHK",
                                   "E01SERIEK",
                                   "E01NUMSOL"
                                 };
  final static String fid = "1040329165911";
  final static String rid = "4FD762BACE9A3";
  final static String fmtname = "ECH030601";
  final int FIELDCOUNT = 19;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldH01USERID = null;
  private CharacterField fieldH01PROGRM = null;
  private CharacterField fieldH01TIMSYS = null;
  private CharacterField fieldH01SCRCOD = null;
  private CharacterField fieldH01OPECOD = null;
  private CharacterField fieldH01FLGMAS = null;
  private CharacterField fieldH01FLGWK1 = null;
  private CharacterField fieldH01FLGWK2 = null;
  private CharacterField fieldH01FLGWK3 = null;
  private CharacterField fieldE01CODBNK = null;
  private DecimalField fieldE01SUCDST = null;
  private DecimalField fieldE01SUCORG = null;
  private CharacterField fieldE01NUMCTA = null;
  private CharacterField fieldE01CODCCY = null;
  private CharacterField fieldE01TIPPER = null;
  private DecimalField fieldE01TIPCHK = null;
  private DecimalField fieldE01CANCHK = null;
  private CharacterField fieldE01SERIEK = null;
  private DecimalField fieldE01NUMSOL = null;

  /**
  * Constructor for ECH030601Message.
  */
  public ECH030601Message()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 91;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldH01USERID =
    new CharacterField(message, HEADERSIZE + 0, 10, "H01USERID");
    fields[1] = fieldH01PROGRM =
    new CharacterField(message, HEADERSIZE + 10, 10, "H01PROGRM");
    fields[2] = fieldH01TIMSYS =
    new CharacterField(message, HEADERSIZE + 20, 12, "H01TIMSYS");
    fields[3] = fieldH01SCRCOD =
    new CharacterField(message, HEADERSIZE + 32, 2, "H01SCRCOD");
    fields[4] = fieldH01OPECOD =
    new CharacterField(message, HEADERSIZE + 34, 4, "H01OPECOD");
    fields[5] = fieldH01FLGMAS =
    new CharacterField(message, HEADERSIZE + 38, 1, "H01FLGMAS");
    fields[6] = fieldH01FLGWK1 =
    new CharacterField(message, HEADERSIZE + 39, 1, "H01FLGWK1");
    fields[7] = fieldH01FLGWK2 =
    new CharacterField(message, HEADERSIZE + 40, 1, "H01FLGWK2");
    fields[8] = fieldH01FLGWK3 =
    new CharacterField(message, HEADERSIZE + 41, 1, "H01FLGWK3");
    fields[9] = fieldE01CODBNK =
    new CharacterField(message, HEADERSIZE + 42, 2, "E01CODBNK");
    fields[10] = fieldE01SUCDST =
    new DecimalField(message, HEADERSIZE + 44, 4, 0, "E01SUCDST");
    fields[11] = fieldE01SUCORG =
    new DecimalField(message, HEADERSIZE + 48, 4, 0, "E01SUCORG");
    fields[12] = fieldE01NUMCTA =
    new CharacterField(message, HEADERSIZE + 52, 1, "E01NUMCTA");
    fields[13] = fieldE01CODCCY =
    new CharacterField(message, HEADERSIZE + 53, 3, "E01CODCCY");
    fields[14] = fieldE01TIPPER =
    new CharacterField(message, HEADERSIZE + 56, 1, "E01TIPPER");
    fields[15] = fieldE01TIPCHK =
    new DecimalField(message, HEADERSIZE + 57, 3, 0, "E01TIPCHK");
    fields[16] = fieldE01CANCHK =
    new DecimalField(message, HEADERSIZE + 60, 8, 0, "E01CANCHK");
    fields[17] = fieldE01SERIEK =
    new CharacterField(message, HEADERSIZE + 68, 10, "E01SERIEK");
    fields[18] = fieldE01NUMSOL =
    new DecimalField(message, HEADERSIZE + 78, 13, 0, "E01NUMSOL");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field H01USERID using a String value.
  */
  public void setH01USERID(String newvalue)
  {
    fieldH01USERID.setString(newvalue);
  }

  /**
  * Get value of field H01USERID as a String.
  */
  public String getH01USERID()
  {
    return fieldH01USERID.getString();
  }

  /**
  * Set field H01PROGRM using a String value.
  */
  public void setH01PROGRM(String newvalue)
  {
    fieldH01PROGRM.setString(newvalue);
  }

  /**
  * Get value of field H01PROGRM as a String.
  */
  public String getH01PROGRM()
  {
    return fieldH01PROGRM.getString();
  }

  /**
  * Set field H01TIMSYS using a String value.
  */
  public void setH01TIMSYS(String newvalue)
  {
    fieldH01TIMSYS.setString(newvalue);
  }

  /**
  * Get value of field H01TIMSYS as a String.
  */
  public String getH01TIMSYS()
  {
    return fieldH01TIMSYS.getString();
  }

  /**
  * Set field H01SCRCOD using a String value.
  */
  public void setH01SCRCOD(String newvalue)
  {
    fieldH01SCRCOD.setString(newvalue);
  }

  /**
  * Get value of field H01SCRCOD as a String.
  */
  public String getH01SCRCOD()
  {
    return fieldH01SCRCOD.getString();
  }

  /**
  * Set field H01OPECOD using a String value.
  */
  public void setH01OPECOD(String newvalue)
  {
    fieldH01OPECOD.setString(newvalue);
  }

  /**
  * Get value of field H01OPECOD as a String.
  */
  public String getH01OPECOD()
  {
    return fieldH01OPECOD.getString();
  }

  /**
  * Set field H01FLGMAS using a String value.
  */
  public void setH01FLGMAS(String newvalue)
  {
    fieldH01FLGMAS.setString(newvalue);
  }

  /**
  * Get value of field H01FLGMAS as a String.
  */
  public String getH01FLGMAS()
  {
    return fieldH01FLGMAS.getString();
  }

  /**
  * Set field H01FLGWK1 using a String value.
  */
  public void setH01FLGWK1(String newvalue)
  {
    fieldH01FLGWK1.setString(newvalue);
  }

  /**
  * Get value of field H01FLGWK1 as a String.
  */
  public String getH01FLGWK1()
  {
    return fieldH01FLGWK1.getString();
  }

  /**
  * Set field H01FLGWK2 using a String value.
  */
  public void setH01FLGWK2(String newvalue)
  {
    fieldH01FLGWK2.setString(newvalue);
  }

  /**
  * Get value of field H01FLGWK2 as a String.
  */
  public String getH01FLGWK2()
  {
    return fieldH01FLGWK2.getString();
  }

  /**
  * Set field H01FLGWK3 using a String value.
  */
  public void setH01FLGWK3(String newvalue)
  {
    fieldH01FLGWK3.setString(newvalue);
  }

  /**
  * Get value of field H01FLGWK3 as a String.
  */
  public String getH01FLGWK3()
  {
    return fieldH01FLGWK3.getString();
  }

  /**
  * Set field E01CODBNK using a String value.
  */
  public void setE01CODBNK(String newvalue)
  {
    fieldE01CODBNK.setString(newvalue);
  }

  /**
  * Get value of field E01CODBNK as a String.
  */
  public String getE01CODBNK()
  {
    return fieldE01CODBNK.getString();
  }

  /**
  * Set field E01SUCDST using a String value.
  */
  public void setE01SUCDST(String newvalue)
  {
    fieldE01SUCDST.setString(newvalue);
  }

  /**
  * Get value of field E01SUCDST as a String.
  */
  public String getE01SUCDST()
  {
    return fieldE01SUCDST.getString();
  }

  /**
  * Set numeric field E01SUCDST using a BigDecimal value.
  */
  public void setE01SUCDST(BigDecimal newvalue)
  {
    fieldE01SUCDST.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E01SUCDST as a BigDecimal.
  */
  public BigDecimal getBigDecimalE01SUCDST()
  {
    return fieldE01SUCDST.getBigDecimal();
  }

  /**
  * Set field E01SUCORG using a String value.
  */
  public void setE01SUCORG(String newvalue)
  {
    fieldE01SUCORG.setString(newvalue);
  }

  /**
  * Get value of field E01SUCORG as a String.
  */
  public String getE01SUCORG()
  {
    return fieldE01SUCORG.getString();
  }

  /**
  * Set numeric field E01SUCORG using a BigDecimal value.
  */
  public void setE01SUCORG(BigDecimal newvalue)
  {
    fieldE01SUCORG.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E01SUCORG as a BigDecimal.
  */
  public BigDecimal getBigDecimalE01SUCORG()
  {
    return fieldE01SUCORG.getBigDecimal();
  }

  /**
  * Set field E01NUMCTA using a String value.
  */
  public void setE01NUMCTA(String newvalue)
  {
    fieldE01NUMCTA.setString(newvalue);
  }

  /**
  * Get value of field E01NUMCTA as a String.
  */
  public String getE01NUMCTA()
  {
    return fieldE01NUMCTA.getString();
  }

  /**
  * Set field E01CODCCY using a String value.
  */
  public void setE01CODCCY(String newvalue)
  {
    fieldE01CODCCY.setString(newvalue);
  }

  /**
  * Get value of field E01CODCCY as a String.
  */
  public String getE01CODCCY()
  {
    return fieldE01CODCCY.getString();
  }

  /**
  * Set field E01TIPPER using a String value.
  */
  public void setE01TIPPER(String newvalue)
  {
    fieldE01TIPPER.setString(newvalue);
  }

  /**
  * Get value of field E01TIPPER as a String.
  */
  public String getE01TIPPER()
  {
    return fieldE01TIPPER.getString();
  }

  /**
  * Set field E01TIPCHK using a String value.
  */
  public void setE01TIPCHK(String newvalue)
  {
    fieldE01TIPCHK.setString(newvalue);
  }

  /**
  * Get value of field E01TIPCHK as a String.
  */
  public String getE01TIPCHK()
  {
    return fieldE01TIPCHK.getString();
  }

  /**
  * Set numeric field E01TIPCHK using a BigDecimal value.
  */
  public void setE01TIPCHK(BigDecimal newvalue)
  {
    fieldE01TIPCHK.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E01TIPCHK as a BigDecimal.
  */
  public BigDecimal getBigDecimalE01TIPCHK()
  {
    return fieldE01TIPCHK.getBigDecimal();
  }

  /**
  * Set field E01CANCHK using a String value.
  */
  public void setE01CANCHK(String newvalue)
  {
    fieldE01CANCHK.setString(newvalue);
  }

  /**
  * Get value of field E01CANCHK as a String.
  */
  public String getE01CANCHK()
  {
    return fieldE01CANCHK.getString();
  }

  /**
  * Set numeric field E01CANCHK using a BigDecimal value.
  */
  public void setE01CANCHK(BigDecimal newvalue)
  {
    fieldE01CANCHK.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E01CANCHK as a BigDecimal.
  */
  public BigDecimal getBigDecimalE01CANCHK()
  {
    return fieldE01CANCHK.getBigDecimal();
  }

  /**
  * Set field E01SERIEK using a String value.
  */
  public void setE01SERIEK(String newvalue)
  {
    fieldE01SERIEK.setString(newvalue);
  }

  /**
  * Get value of field E01SERIEK as a String.
  */
  public String getE01SERIEK()
  {
    return fieldE01SERIEK.getString();
  }

  /**
  * Set field E01NUMSOL using a String value.
  */
  public void setE01NUMSOL(String newvalue)
  {
    fieldE01NUMSOL.setString(newvalue);
  }

  /**
  * Get value of field E01NUMSOL as a String.
  */
  public String getE01NUMSOL()
  {
    return fieldE01NUMSOL.getString();
  }

  /**
  * Set numeric field E01NUMSOL using a BigDecimal value.
  */
  public void setE01NUMSOL(BigDecimal newvalue)
  {
    fieldE01NUMSOL.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E01NUMSOL as a BigDecimal.
  */
  public BigDecimal getBigDecimalE01NUMSOL()
  {
    return fieldE01NUMSOL.getBigDecimal();
  }

}
