package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from EGC050012 physical file definition.
* 
* File level identifier is 1030121191927.
* Record format level identifier is 3FC8EBB052C30.
*/

public class EGC050012Message extends MessageRecord
{
  final static String fldnames[] = {
                                     "H12USERID",
                                     "H12PROGRM",
                                     "H12TIMSYS",
                                     "H12SCRCOD",
                                     "H12OPECOD",
                                     "H12FLGMAS",
                                     "H12FLGWK1",
                                     "H12FLGWK2",
                                     "H12FLGWK3",
                                     "H12CODACC",
                                     "E12GCRUT",
                                     "E12GCNMBC",
                                     "E12GCNOPR",
                                     "E12GCGPRD",
                                     "E12GCGMDA",
                                     "E12GCESTD",
                                     "E12GCMNTC",
                                     "E12GCMNMO",
                                     "E12GCCAPY",
                                     "E12GCCAPM",
                                     "E12GCCAPD",
                                     "E12GCVENY",
                                     "E12GCVENM",
                                     "E12GCVEND",
                                     "E12GCTBAS",
                                     "E12GCPLAZ",
                                     "E12GCGTYA",
                                     "E12GODNPG",
                                     "E12INDOPE"
                                   };
  final static String tnames[] = {
                                   "H12USERID",
                                   "H12PROGRM",
                                   "H12TIMSYS",
                                   "H12SCRCOD",
                                   "H12OPECOD",
                                   "H12FLGMAS",
                                   "H12FLGWK1",
                                   "H12FLGWK2",
                                   "H12FLGWK3",
                                   "H12CODACC",
                                   "E12GCRUT",
                                   "E12GCNMBC",
                                   "E12GCNOPR",
                                   "E12GCGPRD",
                                   "E12GCGMDA",
                                   "E12GCESTD",
                                   "E12GCMNTC",
                                   "E12GCMNMO",
                                   "E12GCCAPY",
                                   "E12GCCAPM",
                                   "E12GCCAPD",
                                   "E12GCVENY",
                                   "E12GCVENM",
                                   "E12GCVEND",
                                   "E12GCTBAS",
                                   "E12GCPLAZ",
                                   "E12GCGTYA",
                                   "E12GODNPG",
                                   "E12INDOPE"
                                 };
  final static String fid = "1030121191927";
  final static String rid = "3FC8EBB052C30";
  final static String fmtname = "EGC050012";
  final int FIELDCOUNT = 29;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldH12USERID = null;
  private CharacterField fieldH12PROGRM = null;
  private CharacterField fieldH12TIMSYS = null;
  private CharacterField fieldH12SCRCOD = null;
  private CharacterField fieldH12OPECOD = null;
  private CharacterField fieldH12FLGMAS = null;
  private CharacterField fieldH12FLGWK1 = null;
  private CharacterField fieldH12FLGWK2 = null;
  private CharacterField fieldH12FLGWK3 = null;
  private CharacterField fieldH12CODACC = null;
  private CharacterField fieldE12GCRUT = null;
  private CharacterField fieldE12GCNMBC = null;
  private DecimalField fieldE12GCNOPR = null;
  private CharacterField fieldE12GCGPRD = null;
  private CharacterField fieldE12GCGMDA = null;
  private CharacterField fieldE12GCESTD = null;
  private DecimalField fieldE12GCMNTC = null;
  private DecimalField fieldE12GCMNMO = null;
  private DecimalField fieldE12GCCAPY = null;
  private DecimalField fieldE12GCCAPM = null;
  private DecimalField fieldE12GCCAPD = null;
  private DecimalField fieldE12GCVENY = null;
  private DecimalField fieldE12GCVENM = null;
  private DecimalField fieldE12GCVEND = null;
  private DecimalField fieldE12GCTBAS = null;
  private DecimalField fieldE12GCPLAZ = null;
  private DecimalField fieldE12GCGTYA = null;
  private DecimalField fieldE12GODNPG = null;
  private CharacterField fieldE12INDOPE = null;

  /**
  * Constructor for EGC050012Message.
  */
  public EGC050012Message()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 204;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldH12USERID =
    new CharacterField(message, HEADERSIZE + 0, 10, "H12USERID");
    fields[1] = fieldH12PROGRM =
    new CharacterField(message, HEADERSIZE + 10, 10, "H12PROGRM");
    fields[2] = fieldH12TIMSYS =
    new CharacterField(message, HEADERSIZE + 20, 12, "H12TIMSYS");
    fields[3] = fieldH12SCRCOD =
    new CharacterField(message, HEADERSIZE + 32, 2, "H12SCRCOD");
    fields[4] = fieldH12OPECOD =
    new CharacterField(message, HEADERSIZE + 34, 4, "H12OPECOD");
    fields[5] = fieldH12FLGMAS =
    new CharacterField(message, HEADERSIZE + 38, 1, "H12FLGMAS");
    fields[6] = fieldH12FLGWK1 =
    new CharacterField(message, HEADERSIZE + 39, 1, "H12FLGWK1");
    fields[7] = fieldH12FLGWK2 =
    new CharacterField(message, HEADERSIZE + 40, 1, "H12FLGWK2");
    fields[8] = fieldH12FLGWK3 =
    new CharacterField(message, HEADERSIZE + 41, 1, "H12FLGWK3");
    fields[9] = fieldH12CODACC =
    new CharacterField(message, HEADERSIZE + 42, 4, "H12CODACC");
    fields[10] = fieldE12GCRUT =
    new CharacterField(message, HEADERSIZE + 46, 15, "E12GCRUT");
    fields[11] = fieldE12GCNMBC =
    new CharacterField(message, HEADERSIZE + 61, 45, "E12GCNMBC");
    fields[12] = fieldE12GCNOPR =
    new DecimalField(message, HEADERSIZE + 106, 6, 0, "E12GCNOPR");
    fields[13] = fieldE12GCGPRD =
    new CharacterField(message, HEADERSIZE + 112, 4, "E12GCGPRD");
    fields[14] = fieldE12GCGMDA =
    new CharacterField(message, HEADERSIZE + 116, 3, "E12GCGMDA");
    fields[15] = fieldE12GCESTD =
    new CharacterField(message, HEADERSIZE + 119, 1, "E12GCESTD");
    fields[16] = fieldE12GCMNTC =
    new DecimalField(message, HEADERSIZE + 120, 17, 2, "E12GCMNTC");
    fields[17] = fieldE12GCMNMO =
    new DecimalField(message, HEADERSIZE + 137, 17, 2, "E12GCMNMO");
    fields[18] = fieldE12GCCAPY =
    new DecimalField(message, HEADERSIZE + 154, 3, 0, "E12GCCAPY");
    fields[19] = fieldE12GCCAPM =
    new DecimalField(message, HEADERSIZE + 157, 3, 0, "E12GCCAPM");
    fields[20] = fieldE12GCCAPD =
    new DecimalField(message, HEADERSIZE + 160, 3, 0, "E12GCCAPD");
    fields[21] = fieldE12GCVENY =
    new DecimalField(message, HEADERSIZE + 163, 3, 0, "E12GCVENY");
    fields[22] = fieldE12GCVENM =
    new DecimalField(message, HEADERSIZE + 166, 3, 0, "E12GCVENM");
    fields[23] = fieldE12GCVEND =
    new DecimalField(message, HEADERSIZE + 169, 3, 0, "E12GCVEND");
    fields[24] = fieldE12GCTBAS =
    new DecimalField(message, HEADERSIZE + 172, 13, 6, "E12GCTBAS");
    fields[25] = fieldE12GCPLAZ =
    new DecimalField(message, HEADERSIZE + 185, 6, 0, "E12GCPLAZ");
    fields[26] = fieldE12GCGTYA =
    new DecimalField(message, HEADERSIZE + 191, 6, 0, "E12GCGTYA");
    fields[27] = fieldE12GODNPG =
    new DecimalField(message, HEADERSIZE + 197, 6, 0, "E12GODNPG");
    fields[28] = fieldE12INDOPE =
    new CharacterField(message, HEADERSIZE + 203, 1, "E12INDOPE");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field H12USERID using a String value.
  */
  public void setH12USERID(String newvalue)
  {
    fieldH12USERID.setString(newvalue);
  }

  /**
  * Get value of field H12USERID as a String.
  */
  public String getH12USERID()
  {
    return fieldH12USERID.getString();
  }

  /**
  * Set field H12PROGRM using a String value.
  */
  public void setH12PROGRM(String newvalue)
  {
    fieldH12PROGRM.setString(newvalue);
  }

  /**
  * Get value of field H12PROGRM as a String.
  */
  public String getH12PROGRM()
  {
    return fieldH12PROGRM.getString();
  }

  /**
  * Set field H12TIMSYS using a String value.
  */
  public void setH12TIMSYS(String newvalue)
  {
    fieldH12TIMSYS.setString(newvalue);
  }

  /**
  * Get value of field H12TIMSYS as a String.
  */
  public String getH12TIMSYS()
  {
    return fieldH12TIMSYS.getString();
  }

  /**
  * Set field H12SCRCOD using a String value.
  */
  public void setH12SCRCOD(String newvalue)
  {
    fieldH12SCRCOD.setString(newvalue);
  }

  /**
  * Get value of field H12SCRCOD as a String.
  */
  public String getH12SCRCOD()
  {
    return fieldH12SCRCOD.getString();
  }

  /**
  * Set field H12OPECOD using a String value.
  */
  public void setH12OPECOD(String newvalue)
  {
    fieldH12OPECOD.setString(newvalue);
  }

  /**
  * Get value of field H12OPECOD as a String.
  */
  public String getH12OPECOD()
  {
    return fieldH12OPECOD.getString();
  }

  /**
  * Set field H12FLGMAS using a String value.
  */
  public void setH12FLGMAS(String newvalue)
  {
    fieldH12FLGMAS.setString(newvalue);
  }

  /**
  * Get value of field H12FLGMAS as a String.
  */
  public String getH12FLGMAS()
  {
    return fieldH12FLGMAS.getString();
  }

  /**
  * Set field H12FLGWK1 using a String value.
  */
  public void setH12FLGWK1(String newvalue)
  {
    fieldH12FLGWK1.setString(newvalue);
  }

  /**
  * Get value of field H12FLGWK1 as a String.
  */
  public String getH12FLGWK1()
  {
    return fieldH12FLGWK1.getString();
  }

  /**
  * Set field H12FLGWK2 using a String value.
  */
  public void setH12FLGWK2(String newvalue)
  {
    fieldH12FLGWK2.setString(newvalue);
  }

  /**
  * Get value of field H12FLGWK2 as a String.
  */
  public String getH12FLGWK2()
  {
    return fieldH12FLGWK2.getString();
  }

  /**
  * Set field H12FLGWK3 using a String value.
  */
  public void setH12FLGWK3(String newvalue)
  {
    fieldH12FLGWK3.setString(newvalue);
  }

  /**
  * Get value of field H12FLGWK3 as a String.
  */
  public String getH12FLGWK3()
  {
    return fieldH12FLGWK3.getString();
  }

  /**
  * Set field H12CODACC using a String value.
  */
  public void setH12CODACC(String newvalue)
  {
    fieldH12CODACC.setString(newvalue);
  }

  /**
  * Get value of field H12CODACC as a String.
  */
  public String getH12CODACC()
  {
    return fieldH12CODACC.getString();
  }

  /**
  * Set field E12GCRUT using a String value.
  */
  public void setE12GCRUT(String newvalue)
  {
    fieldE12GCRUT.setString(newvalue);
  }

  /**
  * Get value of field E12GCRUT as a String.
  */
  public String getE12GCRUT()
  {
    return fieldE12GCRUT.getString();
  }

  /**
  * Set field E12GCNMBC using a String value.
  */
  public void setE12GCNMBC(String newvalue)
  {
    fieldE12GCNMBC.setString(newvalue);
  }

  /**
  * Get value of field E12GCNMBC as a String.
  */
  public String getE12GCNMBC()
  {
    return fieldE12GCNMBC.getString();
  }

  /**
  * Set field E12GCNOPR using a String value.
  */
  public void setE12GCNOPR(String newvalue)
  {
    fieldE12GCNOPR.setString(newvalue);
  }

  /**
  * Get value of field E12GCNOPR as a String.
  */
  public String getE12GCNOPR()
  {
    return fieldE12GCNOPR.getString();
  }

  /**
  * Set numeric field E12GCNOPR using a BigDecimal value.
  */
  public void setE12GCNOPR(BigDecimal newvalue)
  {
    fieldE12GCNOPR.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E12GCNOPR as a BigDecimal.
  */
  public BigDecimal getBigDecimalE12GCNOPR()
  {
    return fieldE12GCNOPR.getBigDecimal();
  }

  /**
  * Set field E12GCGPRD using a String value.
  */
  public void setE12GCGPRD(String newvalue)
  {
    fieldE12GCGPRD.setString(newvalue);
  }

  /**
  * Get value of field E12GCGPRD as a String.
  */
  public String getE12GCGPRD()
  {
    return fieldE12GCGPRD.getString();
  }

  /**
  * Set field E12GCGMDA using a String value.
  */
  public void setE12GCGMDA(String newvalue)
  {
    fieldE12GCGMDA.setString(newvalue);
  }

  /**
  * Get value of field E12GCGMDA as a String.
  */
  public String getE12GCGMDA()
  {
    return fieldE12GCGMDA.getString();
  }

  /**
  * Set field E12GCESTD using a String value.
  */
  public void setE12GCESTD(String newvalue)
  {
    fieldE12GCESTD.setString(newvalue);
  }

  /**
  * Get value of field E12GCESTD as a String.
  */
  public String getE12GCESTD()
  {
    return fieldE12GCESTD.getString();
  }

  /**
  * Set field E12GCMNTC using a String value.
  */
  public void setE12GCMNTC(String newvalue)
  {
    fieldE12GCMNTC.setString(newvalue);
  }

  /**
  * Get value of field E12GCMNTC as a String.
  */
  public String getE12GCMNTC()
  {
    return fieldE12GCMNTC.getString();
  }

  /**
  * Set numeric field E12GCMNTC using a BigDecimal value.
  */
  public void setE12GCMNTC(BigDecimal newvalue)
  {
    fieldE12GCMNTC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E12GCMNTC as a BigDecimal.
  */
  public BigDecimal getBigDecimalE12GCMNTC()
  {
    return fieldE12GCMNTC.getBigDecimal();
  }

  /**
  * Set field E12GCMNMO using a String value.
  */
  public void setE12GCMNMO(String newvalue)
  {
    fieldE12GCMNMO.setString(newvalue);
  }

  /**
  * Get value of field E12GCMNMO as a String.
  */
  public String getE12GCMNMO()
  {
    return fieldE12GCMNMO.getString();
  }

  /**
  * Set numeric field E12GCMNMO using a BigDecimal value.
  */
  public void setE12GCMNMO(BigDecimal newvalue)
  {
    fieldE12GCMNMO.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E12GCMNMO as a BigDecimal.
  */
  public BigDecimal getBigDecimalE12GCMNMO()
  {
    return fieldE12GCMNMO.getBigDecimal();
  }

  /**
  * Set field E12GCCAPY using a String value.
  */
  public void setE12GCCAPY(String newvalue)
  {
    fieldE12GCCAPY.setString(newvalue);
  }

  /**
  * Get value of field E12GCCAPY as a String.
  */
  public String getE12GCCAPY()
  {
    return fieldE12GCCAPY.getString();
  }

  /**
  * Set numeric field E12GCCAPY using a BigDecimal value.
  */
  public void setE12GCCAPY(BigDecimal newvalue)
  {
    fieldE12GCCAPY.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E12GCCAPY as a BigDecimal.
  */
  public BigDecimal getBigDecimalE12GCCAPY()
  {
    return fieldE12GCCAPY.getBigDecimal();
  }

  /**
  * Set field E12GCCAPM using a String value.
  */
  public void setE12GCCAPM(String newvalue)
  {
    fieldE12GCCAPM.setString(newvalue);
  }

  /**
  * Get value of field E12GCCAPM as a String.
  */
  public String getE12GCCAPM()
  {
    return fieldE12GCCAPM.getString();
  }

  /**
  * Set numeric field E12GCCAPM using a BigDecimal value.
  */
  public void setE12GCCAPM(BigDecimal newvalue)
  {
    fieldE12GCCAPM.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E12GCCAPM as a BigDecimal.
  */
  public BigDecimal getBigDecimalE12GCCAPM()
  {
    return fieldE12GCCAPM.getBigDecimal();
  }

  /**
  * Set field E12GCCAPD using a String value.
  */
  public void setE12GCCAPD(String newvalue)
  {
    fieldE12GCCAPD.setString(newvalue);
  }

  /**
  * Get value of field E12GCCAPD as a String.
  */
  public String getE12GCCAPD()
  {
    return fieldE12GCCAPD.getString();
  }

  /**
  * Set numeric field E12GCCAPD using a BigDecimal value.
  */
  public void setE12GCCAPD(BigDecimal newvalue)
  {
    fieldE12GCCAPD.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E12GCCAPD as a BigDecimal.
  */
  public BigDecimal getBigDecimalE12GCCAPD()
  {
    return fieldE12GCCAPD.getBigDecimal();
  }

  /**
  * Set field E12GCVENY using a String value.
  */
  public void setE12GCVENY(String newvalue)
  {
    fieldE12GCVENY.setString(newvalue);
  }

  /**
  * Get value of field E12GCVENY as a String.
  */
  public String getE12GCVENY()
  {
    return fieldE12GCVENY.getString();
  }

  /**
  * Set numeric field E12GCVENY using a BigDecimal value.
  */
  public void setE12GCVENY(BigDecimal newvalue)
  {
    fieldE12GCVENY.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E12GCVENY as a BigDecimal.
  */
  public BigDecimal getBigDecimalE12GCVENY()
  {
    return fieldE12GCVENY.getBigDecimal();
  }

  /**
  * Set field E12GCVENM using a String value.
  */
  public void setE12GCVENM(String newvalue)
  {
    fieldE12GCVENM.setString(newvalue);
  }

  /**
  * Get value of field E12GCVENM as a String.
  */
  public String getE12GCVENM()
  {
    return fieldE12GCVENM.getString();
  }

  /**
  * Set numeric field E12GCVENM using a BigDecimal value.
  */
  public void setE12GCVENM(BigDecimal newvalue)
  {
    fieldE12GCVENM.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E12GCVENM as a BigDecimal.
  */
  public BigDecimal getBigDecimalE12GCVENM()
  {
    return fieldE12GCVENM.getBigDecimal();
  }

  /**
  * Set field E12GCVEND using a String value.
  */
  public void setE12GCVEND(String newvalue)
  {
    fieldE12GCVEND.setString(newvalue);
  }

  /**
  * Get value of field E12GCVEND as a String.
  */
  public String getE12GCVEND()
  {
    return fieldE12GCVEND.getString();
  }

  /**
  * Set numeric field E12GCVEND using a BigDecimal value.
  */
  public void setE12GCVEND(BigDecimal newvalue)
  {
    fieldE12GCVEND.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E12GCVEND as a BigDecimal.
  */
  public BigDecimal getBigDecimalE12GCVEND()
  {
    return fieldE12GCVEND.getBigDecimal();
  }

  /**
  * Set field E12GCTBAS using a String value.
  */
  public void setE12GCTBAS(String newvalue)
  {
    fieldE12GCTBAS.setString(newvalue);
  }

  /**
  * Get value of field E12GCTBAS as a String.
  */
  public String getE12GCTBAS()
  {
    return fieldE12GCTBAS.getString();
  }

  /**
  * Set numeric field E12GCTBAS using a BigDecimal value.
  */
  public void setE12GCTBAS(BigDecimal newvalue)
  {
    fieldE12GCTBAS.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E12GCTBAS as a BigDecimal.
  */
  public BigDecimal getBigDecimalE12GCTBAS()
  {
    return fieldE12GCTBAS.getBigDecimal();
  }

  /**
  * Set field E12GCPLAZ using a String value.
  */
  public void setE12GCPLAZ(String newvalue)
  {
    fieldE12GCPLAZ.setString(newvalue);
  }

  /**
  * Get value of field E12GCPLAZ as a String.
  */
  public String getE12GCPLAZ()
  {
    return fieldE12GCPLAZ.getString();
  }

  /**
  * Set numeric field E12GCPLAZ using a BigDecimal value.
  */
  public void setE12GCPLAZ(BigDecimal newvalue)
  {
    fieldE12GCPLAZ.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E12GCPLAZ as a BigDecimal.
  */
  public BigDecimal getBigDecimalE12GCPLAZ()
  {
    return fieldE12GCPLAZ.getBigDecimal();
  }

  /**
  * Set field E12GCGTYA using a String value.
  */
  public void setE12GCGTYA(String newvalue)
  {
    fieldE12GCGTYA.setString(newvalue);
  }

  /**
  * Get value of field E12GCGTYA as a String.
  */
  public String getE12GCGTYA()
  {
    return fieldE12GCGTYA.getString();
  }

  /**
  * Set numeric field E12GCGTYA using a BigDecimal value.
  */
  public void setE12GCGTYA(BigDecimal newvalue)
  {
    fieldE12GCGTYA.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E12GCGTYA as a BigDecimal.
  */
  public BigDecimal getBigDecimalE12GCGTYA()
  {
    return fieldE12GCGTYA.getBigDecimal();
  }

  /**
  * Set field E12GODNPG using a String value.
  */
  public void setE12GODNPG(String newvalue)
  {
    fieldE12GODNPG.setString(newvalue);
  }

  /**
  * Get value of field E12GODNPG as a String.
  */
  public String getE12GODNPG()
  {
    return fieldE12GODNPG.getString();
  }

  /**
  * Set numeric field E12GODNPG using a BigDecimal value.
  */
  public void setE12GODNPG(BigDecimal newvalue)
  {
    fieldE12GODNPG.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E12GODNPG as a BigDecimal.
  */
  public BigDecimal getBigDecimalE12GODNPG()
  {
    return fieldE12GODNPG.getBigDecimal();
  }

  /**
  * Set field E12INDOPE using a String value.
  */
  public void setE12INDOPE(String newvalue)
  {
    fieldE12INDOPE.setString(newvalue);
  }

  /**
  * Get value of field E12INDOPE as a String.
  */
  public String getE12INDOPE()
  {
    return fieldE12INDOPE.getString();
  }

}
