package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from EWD0342DS physical file definition.
* 
* File level identifier is 1030729122856.
* Record format level identifier is 45DE69CB39E57.
*/

public class EWD0342DSMessage extends MessageRecord
{
  final static String fldnames[] = {
                                     "RWDUSR",
                                     "RWDTYP",
                                     "RWDFRC",
                                     "SWDBLM",
                                     "SWDTYP",
                                     "SWDFLD",
                                     "SWDIBS",
                                     "SWDDSC",
                                     "SWDREC",
                                     "SWDOPE"
                                   };
  final static String tnames[] = {
                                   "RWDUSR",
                                   "RWDTYP",
                                   "RWDFRC",
                                   "SWDBLM",
                                   "SWDTYP",
                                   "SWDFLD",
                                   "SWDIBS",
                                   "SWDDSC",
                                   "SWDREC",
                                   "SWDOPE"
                                 };
  final static String fid = "1030729122856";
  final static String rid = "45DE69CB39E57";
  final static String fmtname = "EWD0342DS";
  final int FIELDCOUNT = 10;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldRWDUSR = null;
  private CharacterField fieldRWDTYP = null;
  private DecimalField fieldRWDFRC = null;
  private CharacterField fieldSWDBLM = null;
  private CharacterField fieldSWDTYP = null;
  private CharacterField fieldSWDFLD = null;
  private CharacterField fieldSWDIBS = null;
  private CharacterField fieldSWDDSC = null;
  private DecimalField fieldSWDREC = null;
  private CharacterField fieldSWDOPE = null;

  /**
  * Constructor for EWD0342DSMessage.
  */
  public EWD0342DSMessage()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 112;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldRWDUSR =
    new CharacterField(message, HEADERSIZE + 0, 10, "RWDUSR");
    fields[1] = fieldRWDTYP =
    new CharacterField(message, HEADERSIZE + 10, 1, "RWDTYP");
    fields[2] = fieldRWDFRC =
    new DecimalField(message, HEADERSIZE + 11, 8, 0, "RWDFRC");
    fields[3] = fieldSWDBLM =
    new CharacterField(message, HEADERSIZE + 19, 20, "SWDBLM");
    fields[4] = fieldSWDTYP =
    new CharacterField(message, HEADERSIZE + 39, 4, "SWDTYP");
    fields[5] = fieldSWDFLD =
    new CharacterField(message, HEADERSIZE + 43, 20, "SWDFLD");
    fields[6] = fieldSWDIBS =
    new CharacterField(message, HEADERSIZE + 63, 10, "SWDIBS");
    fields[7] = fieldSWDDSC =
    new CharacterField(message, HEADERSIZE + 73, 30, "SWDDSC");
    fields[8] = fieldSWDREC =
    new DecimalField(message, HEADERSIZE + 103, 8, 0, "SWDREC");
    fields[9] = fieldSWDOPE =
    new CharacterField(message, HEADERSIZE + 111, 1, "SWDOPE");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field RWDUSR using a String value.
  */
  public void setRWDUSR(String newvalue)
  {
    fieldRWDUSR.setString(newvalue);
  }

  /**
  * Get value of field RWDUSR as a String.
  */
  public String getRWDUSR()
  {
    return fieldRWDUSR.getString();
  }

  /**
  * Set field RWDTYP using a String value.
  */
  public void setRWDTYP(String newvalue)
  {
    fieldRWDTYP.setString(newvalue);
  }

  /**
  * Get value of field RWDTYP as a String.
  */
  public String getRWDTYP()
  {
    return fieldRWDTYP.getString();
  }

  /**
  * Set field RWDFRC using a String value.
  */
  public void setRWDFRC(String newvalue)
  {
    fieldRWDFRC.setString(newvalue);
  }

  /**
  * Get value of field RWDFRC as a String.
  */
  public String getRWDFRC()
  {
    return fieldRWDFRC.getString();
  }

  /**
  * Set numeric field RWDFRC using a BigDecimal value.
  */
  public void setRWDFRC(BigDecimal newvalue)
  {
    fieldRWDFRC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field RWDFRC as a BigDecimal.
  */
  public BigDecimal getBigDecimalRWDFRC()
  {
    return fieldRWDFRC.getBigDecimal();
  }

  /**
  * Set field SWDBLM using a String value.
  */
  public void setSWDBLM(String newvalue)
  {
    fieldSWDBLM.setString(newvalue);
  }

  /**
  * Get value of field SWDBLM as a String.
  */
  public String getSWDBLM()
  {
    return fieldSWDBLM.getString();
  }

  /**
  * Set field SWDTYP using a String value.
  */
  public void setSWDTYP(String newvalue)
  {
    fieldSWDTYP.setString(newvalue);
  }

  /**
  * Get value of field SWDTYP as a String.
  */
  public String getSWDTYP()
  {
    return fieldSWDTYP.getString();
  }

  /**
  * Set field SWDFLD using a String value.
  */
  public void setSWDFLD(String newvalue)
  {
    fieldSWDFLD.setString(newvalue);
  }

  /**
  * Get value of field SWDFLD as a String.
  */
  public String getSWDFLD()
  {
    return fieldSWDFLD.getString();
  }

  /**
  * Set field SWDIBS using a String value.
  */
  public void setSWDIBS(String newvalue)
  {
    fieldSWDIBS.setString(newvalue);
  }

  /**
  * Get value of field SWDIBS as a String.
  */
  public String getSWDIBS()
  {
    return fieldSWDIBS.getString();
  }

  /**
  * Set field SWDDSC using a String value.
  */
  public void setSWDDSC(String newvalue)
  {
    fieldSWDDSC.setString(newvalue);
  }

  /**
  * Get value of field SWDDSC as a String.
  */
  public String getSWDDSC()
  {
    return fieldSWDDSC.getString();
  }

  /**
  * Set field SWDREC using a String value.
  */
  public void setSWDREC(String newvalue)
  {
    fieldSWDREC.setString(newvalue);
  }

  /**
  * Get value of field SWDREC as a String.
  */
  public String getSWDREC()
  {
    return fieldSWDREC.getString();
  }

  /**
  * Set numeric field SWDREC using a BigDecimal value.
  */
  public void setSWDREC(BigDecimal newvalue)
  {
    fieldSWDREC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field SWDREC as a BigDecimal.
  */
  public BigDecimal getBigDecimalSWDREC()
  {
    return fieldSWDREC.getBigDecimal();
  }

  /**
  * Set field SWDOPE using a String value.
  */
  public void setSWDOPE(String newvalue)
  {
    fieldSWDOPE.setString(newvalue);
  }

  /**
  * Get value of field SWDOPE as a String.
  */
  public String getSWDOPE()
  {
    return fieldSWDOPE.getString();
  }

}
