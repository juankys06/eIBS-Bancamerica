package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from EWD0011DS physical file definition.
* 
* File level identifier is 1030121192016.
* Record format level identifier is 5AF6B9DEB1859.
*/

public class EWD0011DSMessage extends MessageRecord
{
  final static String fldnames[] = {
                                     "EWDSBK",
                                     "EWDSCY",
                                     "EWDSNU",
                                     "EWDBNK",
                                     "EWDCCY",
                                     "EWDNUM",
                                     "EWDCCN",
                                     "EWDNME",
                                     "EWDREC",
                                     "EWDOPE"
                                   };
  final static String tnames[] = {
                                   "EWDSBK",
                                   "EWDSCY",
                                   "EWDSNU",
                                   "EWDBNK",
                                   "EWDCCY",
                                   "EWDNUM",
                                   "EWDCCN",
                                   "EWDNME",
                                   "EWDREC",
                                   "EWDOPE"
                                 };
  final static String fid = "1030121192016";
  final static String rid = "5AF6B9DEB1859";
  final static String fmtname = "EWD0011DS";
  final int FIELDCOUNT = 10;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldEWDSBK = null;
  private CharacterField fieldEWDSCY = null;
  private DecimalField fieldEWDSNU = null;
  private CharacterField fieldEWDBNK = null;
  private CharacterField fieldEWDCCY = null;
  private DecimalField fieldEWDNUM = null;
  private DecimalField fieldEWDCCN = null;
  private CharacterField fieldEWDNME = null;
  private DecimalField fieldEWDREC = null;
  private CharacterField fieldEWDOPE = null;

  /**
  * Constructor for EWD0011DSMessage.
  */
  public EWD0011DSMessage()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 89;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldEWDSBK =
    new CharacterField(message, HEADERSIZE + 0, 2, "EWDSBK");
    fields[1] = fieldEWDSCY =
    new CharacterField(message, HEADERSIZE + 2, 3, "EWDSCY");
    fields[2] = fieldEWDSNU =
    new DecimalField(message, HEADERSIZE + 5, 13, 0, "EWDSNU");
    fields[3] = fieldEWDBNK =
    new CharacterField(message, HEADERSIZE + 18, 2, "EWDBNK");
    fields[4] = fieldEWDCCY =
    new CharacterField(message, HEADERSIZE + 20, 3, "EWDCCY");
    fields[5] = fieldEWDNUM =
    new DecimalField(message, HEADERSIZE + 23, 13, 0, "EWDNUM");
    fields[6] = fieldEWDCCN =
    new DecimalField(message, HEADERSIZE + 36, 9, 0, "EWDCCN");
    fields[7] = fieldEWDNME =
    new CharacterField(message, HEADERSIZE + 45, 35, "EWDNME");
    fields[8] = fieldEWDREC =
    new DecimalField(message, HEADERSIZE + 80, 8, 0, "EWDREC");
    fields[9] = fieldEWDOPE =
    new CharacterField(message, HEADERSIZE + 88, 1, "EWDOPE");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field EWDSBK using a String value.
  */
  public void setEWDSBK(String newvalue)
  {
    fieldEWDSBK.setString(newvalue);
  }

  /**
  * Get value of field EWDSBK as a String.
  */
  public String getEWDSBK()
  {
    return fieldEWDSBK.getString();
  }

  /**
  * Set field EWDSCY using a String value.
  */
  public void setEWDSCY(String newvalue)
  {
    fieldEWDSCY.setString(newvalue);
  }

  /**
  * Get value of field EWDSCY as a String.
  */
  public String getEWDSCY()
  {
    return fieldEWDSCY.getString();
  }

  /**
  * Set field EWDSNU using a String value.
  */
  public void setEWDSNU(String newvalue)
  {
    fieldEWDSNU.setString(newvalue);
  }

  /**
  * Get value of field EWDSNU as a String.
  */
  public String getEWDSNU()
  {
    return fieldEWDSNU.getString();
  }

  /**
  * Set numeric field EWDSNU using a BigDecimal value.
  */
  public void setEWDSNU(BigDecimal newvalue)
  {
    fieldEWDSNU.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EWDSNU as a BigDecimal.
  */
  public BigDecimal getBigDecimalEWDSNU()
  {
    return fieldEWDSNU.getBigDecimal();
  }

  /**
  * Set field EWDBNK using a String value.
  */
  public void setEWDBNK(String newvalue)
  {
    fieldEWDBNK.setString(newvalue);
  }

  /**
  * Get value of field EWDBNK as a String.
  */
  public String getEWDBNK()
  {
    return fieldEWDBNK.getString();
  }

  /**
  * Set field EWDCCY using a String value.
  */
  public void setEWDCCY(String newvalue)
  {
    fieldEWDCCY.setString(newvalue);
  }

  /**
  * Get value of field EWDCCY as a String.
  */
  public String getEWDCCY()
  {
    return fieldEWDCCY.getString();
  }

  /**
  * Set field EWDNUM using a String value.
  */
  public void setEWDNUM(String newvalue)
  {
    fieldEWDNUM.setString(newvalue);
  }

  /**
  * Get value of field EWDNUM as a String.
  */
  public String getEWDNUM()
  {
    return fieldEWDNUM.getString();
  }

  /**
  * Set numeric field EWDNUM using a BigDecimal value.
  */
  public void setEWDNUM(BigDecimal newvalue)
  {
    fieldEWDNUM.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EWDNUM as a BigDecimal.
  */
  public BigDecimal getBigDecimalEWDNUM()
  {
    return fieldEWDNUM.getBigDecimal();
  }

  /**
  * Set field EWDCCN using a String value.
  */
  public void setEWDCCN(String newvalue)
  {
    fieldEWDCCN.setString(newvalue);
  }

  /**
  * Get value of field EWDCCN as a String.
  */
  public String getEWDCCN()
  {
    return fieldEWDCCN.getString();
  }

  /**
  * Set numeric field EWDCCN using a BigDecimal value.
  */
  public void setEWDCCN(BigDecimal newvalue)
  {
    fieldEWDCCN.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EWDCCN as a BigDecimal.
  */
  public BigDecimal getBigDecimalEWDCCN()
  {
    return fieldEWDCCN.getBigDecimal();
  }

  /**
  * Set field EWDNME using a String value.
  */
  public void setEWDNME(String newvalue)
  {
    fieldEWDNME.setString(newvalue);
  }

  /**
  * Get value of field EWDNME as a String.
  */
  public String getEWDNME()
  {
    return fieldEWDNME.getString();
  }

  /**
  * Set field EWDREC using a String value.
  */
  public void setEWDREC(String newvalue)
  {
    fieldEWDREC.setString(newvalue);
  }

  /**
  * Get value of field EWDREC as a String.
  */
  public String getEWDREC()
  {
    return fieldEWDREC.getString();
  }

  /**
  * Set numeric field EWDREC using a BigDecimal value.
  */
  public void setEWDREC(BigDecimal newvalue)
  {
    fieldEWDREC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EWDREC as a BigDecimal.
  */
  public BigDecimal getBigDecimalEWDREC()
  {
    return fieldEWDREC.getBigDecimal();
  }

  /**
  * Set field EWDOPE using a String value.
  */
  public void setEWDOPE(String newvalue)
  {
    fieldEWDOPE.setString(newvalue);
  }

  /**
  * Get value of field EWDOPE as a String.
  */
  public String getEWDOPE()
  {
    return fieldEWDOPE.getString();
  }

}
