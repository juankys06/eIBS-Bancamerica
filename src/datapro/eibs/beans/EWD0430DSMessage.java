package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from EWD0430DS physical file definition.
* 
* File level identifier is 1060803182758.
* Record format level identifier is 419B1A2BD6B52.
*/

public class EWD0430DSMessage extends MessageRecord
{
  final static String fldnames[] = {
                                     "RWDUSR",
                                     "RWDFRC",
                                     "SWDUSR",
                                     "SWDBNK",
                                     "SWDBRN",
                                     "SWDNME",
                                     "SWDCCN",
                                     "SWDGRO",
                                     "SWDREC",
                                     "SWDOPE"
                                   };
  final static String tnames[] = {
                                   "RWDUSR",
                                   "RWDFRC",
                                   "SWDUSR",
                                   "SWDBNK",
                                   "SWDBRN",
                                   "SWDNME",
                                   "SWDCCN",
                                   "SWDGRO",
                                   "SWDREC",
                                   "SWDOPE"
                                 };
  final static String fid = "1060803182758";
  final static String rid = "419B1A2BD6B52";
  final static String fmtname = "EWD0430DS";
  final int FIELDCOUNT = 10;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldRWDUSR = null;
  private DecimalField fieldRWDFRC = null;
  private CharacterField fieldSWDUSR = null;
  private CharacterField fieldSWDBNK = null;
  private DecimalField fieldSWDBRN = null;
  private CharacterField fieldSWDNME = null;
  private DecimalField fieldSWDCCN = null;
  private CharacterField fieldSWDGRO = null;
  private DecimalField fieldSWDREC = null;
  private CharacterField fieldSWDOPE = null;

  /**
  * Constructor for EWD0430DSMessage.
  */
  public EWD0430DSMessage()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 107;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldRWDUSR =
    new CharacterField(message, HEADERSIZE + 0, 10, "RWDUSR");
    fields[1] = fieldRWDFRC =
    new DecimalField(message, HEADERSIZE + 10, 8, 0, "RWDFRC");
    fields[2] = fieldSWDUSR =
    new CharacterField(message, HEADERSIZE + 18, 10, "SWDUSR");
    fields[3] = fieldSWDBNK =
    new CharacterField(message, HEADERSIZE + 28, 2, "SWDBNK");
    fields[4] = fieldSWDBRN =
    new DecimalField(message, HEADERSIZE + 30, 4, 0, "SWDBRN");
    fields[5] = fieldSWDNME =
    new CharacterField(message, HEADERSIZE + 34, 45, "SWDNME");
    fields[6] = fieldSWDCCN =
    new DecimalField(message, HEADERSIZE + 79, 9, 0, "SWDCCN");
    fields[7] = fieldSWDGRO =
    new CharacterField(message, HEADERSIZE + 88, 10, "SWDGRO");
    fields[8] = fieldSWDREC =
    new DecimalField(message, HEADERSIZE + 98, 8, 0, "SWDREC");
    fields[9] = fieldSWDOPE =
    new CharacterField(message, HEADERSIZE + 106, 1, "SWDOPE");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field RWDUSR using a String value.
  */
  public void setRWDUSR(String newvalue)
  {
    fieldRWDUSR.setString(newvalue);
  }

  /**
  * Get value of field RWDUSR as a String.
  */
  public String getRWDUSR()
  {
    return fieldRWDUSR.getString();
  }

  /**
  * Set field RWDFRC using a String value.
  */
  public void setRWDFRC(String newvalue)
  {
    fieldRWDFRC.setString(newvalue);
  }

  /**
  * Get value of field RWDFRC as a String.
  */
  public String getRWDFRC()
  {
    return fieldRWDFRC.getString();
  }

  /**
  * Set numeric field RWDFRC using a BigDecimal value.
  */
  public void setRWDFRC(BigDecimal newvalue)
  {
    fieldRWDFRC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field RWDFRC as a BigDecimal.
  */
  public BigDecimal getBigDecimalRWDFRC()
  {
    return fieldRWDFRC.getBigDecimal();
  }

  /**
  * Set field SWDUSR using a String value.
  */
  public void setSWDUSR(String newvalue)
  {
    fieldSWDUSR.setString(newvalue);
  }

  /**
  * Get value of field SWDUSR as a String.
  */
  public String getSWDUSR()
  {
    return fieldSWDUSR.getString();
  }

  /**
  * Set field SWDBNK using a String value.
  */
  public void setSWDBNK(String newvalue)
  {
    fieldSWDBNK.setString(newvalue);
  }

  /**
  * Get value of field SWDBNK as a String.
  */
  public String getSWDBNK()
  {
    return fieldSWDBNK.getString();
  }

  /**
  * Set field SWDBRN using a String value.
  */
  public void setSWDBRN(String newvalue)
  {
    fieldSWDBRN.setString(newvalue);
  }

  /**
  * Get value of field SWDBRN as a String.
  */
  public String getSWDBRN()
  {
    return fieldSWDBRN.getString();
  }

  /**
  * Set numeric field SWDBRN using a BigDecimal value.
  */
  public void setSWDBRN(BigDecimal newvalue)
  {
    fieldSWDBRN.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field SWDBRN as a BigDecimal.
  */
  public BigDecimal getBigDecimalSWDBRN()
  {
    return fieldSWDBRN.getBigDecimal();
  }

  /**
  * Set field SWDNME using a String value.
  */
  public void setSWDNME(String newvalue)
  {
    fieldSWDNME.setString(newvalue);
  }

  /**
  * Get value of field SWDNME as a String.
  */
  public String getSWDNME()
  {
    return fieldSWDNME.getString();
  }

  /**
  * Set field SWDCCN using a String value.
  */
  public void setSWDCCN(String newvalue)
  {
    fieldSWDCCN.setString(newvalue);
  }

  /**
  * Get value of field SWDCCN as a String.
  */
  public String getSWDCCN()
  {
    return fieldSWDCCN.getString();
  }

  /**
  * Set numeric field SWDCCN using a BigDecimal value.
  */
  public void setSWDCCN(BigDecimal newvalue)
  {
    fieldSWDCCN.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field SWDCCN as a BigDecimal.
  */
  public BigDecimal getBigDecimalSWDCCN()
  {
    return fieldSWDCCN.getBigDecimal();
  }

  /**
  * Set field SWDGRO using a String value.
  */
  public void setSWDGRO(String newvalue)
  {
    fieldSWDGRO.setString(newvalue);
  }

  /**
  * Get value of field SWDGRO as a String.
  */
  public String getSWDGRO()
  {
    return fieldSWDGRO.getString();
  }

  /**
  * Set field SWDREC using a String value.
  */
  public void setSWDREC(String newvalue)
  {
    fieldSWDREC.setString(newvalue);
  }

  /**
  * Get value of field SWDREC as a String.
  */
  public String getSWDREC()
  {
    return fieldSWDREC.getString();
  }

  /**
  * Set numeric field SWDREC using a BigDecimal value.
  */
  public void setSWDREC(BigDecimal newvalue)
  {
    fieldSWDREC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field SWDREC as a BigDecimal.
  */
  public BigDecimal getBigDecimalSWDREC()
  {
    return fieldSWDREC.getBigDecimal();
  }

  /**
  * Set field SWDOPE using a String value.
  */
  public void setSWDOPE(String newvalue)
  {
    fieldSWDOPE.setString(newvalue);
  }

  /**
  * Get value of field SWDOPE as a String.
  */
  public String getSWDOPE()
  {
    return fieldSWDOPE.getString();
  }

}
