package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from EWD0032DS physical file definition.
* 
* File level identifier is 1060302183222.
* Record format level identifier is 4E6E6BB1CE9DA.
*/

public class EWD0032DSMessage extends MessageRecord
{
  final static String fldnames[] = {
                                     "EWDTBL",
                                     "EWDCCY",
                                     "EWDDT1",
                                     "EWDDT2",
                                     "EWDDT3",
                                     "EWDSFL",
                                     "EWDOPE",
                                     "EWDDSC"
                                   };
  final static String tnames[] = {
                                   "EWDTBL",
                                   "EWDCCY",
                                   "EWDDT1",
                                   "EWDDT2",
                                   "EWDDT3",
                                   "EWDSFL",
                                   "EWDOPE",
                                   "EWDDSC"
                                 };
  final static String fid = "1060302183222";
  final static String rid = "4E6E6BB1CE9DA";
  final static String fmtname = "EWD0032DS";
  final int FIELDCOUNT = 8;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldEWDTBL = null;
  private CharacterField fieldEWDCCY = null;
  private DecimalField fieldEWDDT1 = null;
  private DecimalField fieldEWDDT2 = null;
  private DecimalField fieldEWDDT3 = null;
  private CharacterField fieldEWDSFL = null;
  private CharacterField fieldEWDOPE = null;
  private CharacterField fieldEWDDSC = null;

  /**
  * Constructor for EWD0032DSMessage.
  */
  public EWD0032DSMessage()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 40;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldEWDTBL =
    new CharacterField(message, HEADERSIZE + 0, 1, "EWDTBL");
    fields[1] = fieldEWDCCY =
    new CharacterField(message, HEADERSIZE + 1, 3, "EWDCCY");
    fields[2] = fieldEWDDT1 =
    new DecimalField(message, HEADERSIZE + 4, 3, 0, "EWDDT1");
    fields[3] = fieldEWDDT2 =
    new DecimalField(message, HEADERSIZE + 7, 3, 0, "EWDDT2");
    fields[4] = fieldEWDDT3 =
    new DecimalField(message, HEADERSIZE + 10, 3, 0, "EWDDT3");
    fields[5] = fieldEWDSFL =
    new CharacterField(message, HEADERSIZE + 13, 1, "EWDSFL");
    fields[6] = fieldEWDOPE =
    new CharacterField(message, HEADERSIZE + 14, 1, "EWDOPE");
    fields[7] = fieldEWDDSC =
    new CharacterField(message, HEADERSIZE + 15, 25, "EWDDSC");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field EWDTBL using a String value.
  */
  public void setEWDTBL(String newvalue)
  {
    fieldEWDTBL.setString(newvalue);
  }

  /**
  * Get value of field EWDTBL as a String.
  */
  public String getEWDTBL()
  {
    return fieldEWDTBL.getString();
  }

  /**
  * Set field EWDCCY using a String value.
  */
  public void setEWDCCY(String newvalue)
  {
    fieldEWDCCY.setString(newvalue);
  }

  /**
  * Get value of field EWDCCY as a String.
  */
  public String getEWDCCY()
  {
    return fieldEWDCCY.getString();
  }

  /**
  * Set field EWDDT1 using a String value.
  */
  public void setEWDDT1(String newvalue)
  {
    fieldEWDDT1.setString(newvalue);
  }

  /**
  * Get value of field EWDDT1 as a String.
  */
  public String getEWDDT1()
  {
    return fieldEWDDT1.getString();
  }

  /**
  * Set numeric field EWDDT1 using a BigDecimal value.
  */
  public void setEWDDT1(BigDecimal newvalue)
  {
    fieldEWDDT1.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EWDDT1 as a BigDecimal.
  */
  public BigDecimal getBigDecimalEWDDT1()
  {
    return fieldEWDDT1.getBigDecimal();
  }

  /**
  * Set field EWDDT2 using a String value.
  */
  public void setEWDDT2(String newvalue)
  {
    fieldEWDDT2.setString(newvalue);
  }

  /**
  * Get value of field EWDDT2 as a String.
  */
  public String getEWDDT2()
  {
    return fieldEWDDT2.getString();
  }

  /**
  * Set numeric field EWDDT2 using a BigDecimal value.
  */
  public void setEWDDT2(BigDecimal newvalue)
  {
    fieldEWDDT2.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EWDDT2 as a BigDecimal.
  */
  public BigDecimal getBigDecimalEWDDT2()
  {
    return fieldEWDDT2.getBigDecimal();
  }

  /**
  * Set field EWDDT3 using a String value.
  */
  public void setEWDDT3(String newvalue)
  {
    fieldEWDDT3.setString(newvalue);
  }

  /**
  * Get value of field EWDDT3 as a String.
  */
  public String getEWDDT3()
  {
    return fieldEWDDT3.getString();
  }

  /**
  * Set numeric field EWDDT3 using a BigDecimal value.
  */
  public void setEWDDT3(BigDecimal newvalue)
  {
    fieldEWDDT3.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EWDDT3 as a BigDecimal.
  */
  public BigDecimal getBigDecimalEWDDT3()
  {
    return fieldEWDDT3.getBigDecimal();
  }

  /**
  * Set field EWDSFL using a String value.
  */
  public void setEWDSFL(String newvalue)
  {
    fieldEWDSFL.setString(newvalue);
  }

  /**
  * Get value of field EWDSFL as a String.
  */
  public String getEWDSFL()
  {
    return fieldEWDSFL.getString();
  }

  /**
  * Set field EWDOPE using a String value.
  */
  public void setEWDOPE(String newvalue)
  {
    fieldEWDOPE.setString(newvalue);
  }

  /**
  * Get value of field EWDOPE as a String.
  */
  public String getEWDOPE()
  {
    return fieldEWDOPE.getString();
  }

  /**
  * Set field EWDDSC using a String value.
  */
  public void setEWDDSC(String newvalue)
  {
    fieldEWDDSC.setString(newvalue);
  }

  /**
  * Get value of field EWDDSC as a String.
  */
  public String getEWDDSC()
  {
    return fieldEWDDSC.getString();
  }

}
