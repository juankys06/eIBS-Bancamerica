package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

/**
* Class generated by AS/400 CRTCLASS command from ESWF00002 physical file definition.
* 
* File level identifier is 1020529154651.
* Record format level identifier is 4E60AB0E045EA.
*/

public class ESWF00002Message extends MessageRecord
{
  final int FIELDCOUNT = 14;
  private CharacterField fieldH02USR = null;
  private CharacterField fieldH02PGM = null;
  private CharacterField fieldH02TIM = null;
  private CharacterField fieldH02SCR = null;
  private CharacterField fieldH02OPE = null;
  private CharacterField fieldH02MAS = null;
  private CharacterField fieldH02WK1 = null;
  private CharacterField fieldH02WK2 = null;
  private CharacterField fieldH02WK3 = null;
  private DecimalField fieldESW2FOR = null;
  private CharacterField fieldESW2USR = null;
  private CharacterField fieldESW2REF = null;
  private CharacterField fieldESW2SWI = null;
  private DecimalField fieldESW2LIN = null;

  /**
  * Constructor for ESWF00002Message.
  */
  public ESWF00002Message()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 89;
    fileid = "1020529154651";
    recordid = "4E60AB0E045EA";
    message = new byte[getByteLength()];
    formatname = "ESWF00002";
    fieldnames = new String[FIELDCOUNT];
    tagnames = new String[FIELDCOUNT];
    fields = new MessageField[FIELDCOUNT];

    fieldnames[0] = "H02USR";
    tagnames[0] = "H02USR";
    fields[0] = fieldH02USR =
    new CharacterField(message, HEADERSIZE + 0, 10, "H02USR");
    fieldnames[1] = "H02PGM";
    tagnames[1] = "H02PGM";
    fields[1] = fieldH02PGM =
    new CharacterField(message, HEADERSIZE + 10, 10, "H02PGM");
    fieldnames[2] = "H02TIM";
    tagnames[2] = "H02TIM";
    fields[2] = fieldH02TIM =
    new CharacterField(message, HEADERSIZE + 20, 12, "H02TIM");
    fieldnames[3] = "H02SCR";
    tagnames[3] = "H02SCR";
    fields[3] = fieldH02SCR =
    new CharacterField(message, HEADERSIZE + 32, 2, "H02SCR");
    fieldnames[4] = "H02OPE";
    tagnames[4] = "H02OPE";
    fields[4] = fieldH02OPE =
    new CharacterField(message, HEADERSIZE + 34, 4, "H02OPE");
    fieldnames[5] = "H02MAS";
    tagnames[5] = "H02MAS";
    fields[5] = fieldH02MAS =
    new CharacterField(message, HEADERSIZE + 38, 1, "H02MAS");
    fieldnames[6] = "H02WK1";
    tagnames[6] = "H02WK1";
    fields[6] = fieldH02WK1 =
    new CharacterField(message, HEADERSIZE + 39, 1, "H02WK1");
    fieldnames[7] = "H02WK2";
    tagnames[7] = "H02WK2";
    fields[7] = fieldH02WK2 =
    new CharacterField(message, HEADERSIZE + 40, 1, "H02WK2");
    fieldnames[8] = "H02WK3";
    tagnames[8] = "H02WK3";
    fields[8] = fieldH02WK3 =
    new CharacterField(message, HEADERSIZE + 41, 1, "H02WK3");
    fieldnames[9] = "ESW2FOR";
    tagnames[9] = "ESW2FOR";
    fields[9] = fieldESW2FOR =
    new DecimalField(message, HEADERSIZE + 42, 4, 0, "ESW2FOR");
    fieldnames[10] = "ESW2USR";
    tagnames[10] = "ESW2USR";
    fields[10] = fieldESW2USR =
    new CharacterField(message, HEADERSIZE + 46, 10, "ESW2USR");
    fieldnames[11] = "ESW2REF";
    tagnames[11] = "ESW2REF";
    fields[11] = fieldESW2REF =
    new CharacterField(message, HEADERSIZE + 56, 16, "ESW2REF");
    fieldnames[12] = "ESW2SWI";
    tagnames[12] = "ESW2SWI";
    fields[12] = fieldESW2SWI =
    new CharacterField(message, HEADERSIZE + 72, 12, "ESW2SWI");
    fieldnames[13] = "ESW2LIN";
    tagnames[13] = "ESW2LIN";
    fields[13] = fieldESW2LIN =
    new DecimalField(message, HEADERSIZE + 84, 5, 0, "ESW2LIN");
  }

  /**
  * Set field H02USR using a String value.
  */
  public void setH02USR(String newvalue)
  {
    fieldH02USR.setString(newvalue);
  }

  /**
  * Get value of field H02USR as a String.
  */
  public String getH02USR()
  {
    return fieldH02USR.getString();
  }

  /**
  * Set field H02PGM using a String value.
  */
  public void setH02PGM(String newvalue)
  {
    fieldH02PGM.setString(newvalue);
  }

  /**
  * Get value of field H02PGM as a String.
  */
  public String getH02PGM()
  {
    return fieldH02PGM.getString();
  }

  /**
  * Set field H02TIM using a String value.
  */
  public void setH02TIM(String newvalue)
  {
    fieldH02TIM.setString(newvalue);
  }

  /**
  * Get value of field H02TIM as a String.
  */
  public String getH02TIM()
  {
    return fieldH02TIM.getString();
  }

  /**
  * Set field H02SCR using a String value.
  */
  public void setH02SCR(String newvalue)
  {
    fieldH02SCR.setString(newvalue);
  }

  /**
  * Get value of field H02SCR as a String.
  */
  public String getH02SCR()
  {
    return fieldH02SCR.getString();
  }

  /**
  * Set field H02OPE using a String value.
  */
  public void setH02OPE(String newvalue)
  {
    fieldH02OPE.setString(newvalue);
  }

  /**
  * Get value of field H02OPE as a String.
  */
  public String getH02OPE()
  {
    return fieldH02OPE.getString();
  }

  /**
  * Set field H02MAS using a String value.
  */
  public void setH02MAS(String newvalue)
  {
    fieldH02MAS.setString(newvalue);
  }

  /**
  * Get value of field H02MAS as a String.
  */
  public String getH02MAS()
  {
    return fieldH02MAS.getString();
  }

  /**
  * Set field H02WK1 using a String value.
  */
  public void setH02WK1(String newvalue)
  {
    fieldH02WK1.setString(newvalue);
  }

  /**
  * Get value of field H02WK1 as a String.
  */
  public String getH02WK1()
  {
    return fieldH02WK1.getString();
  }

  /**
  * Set field H02WK2 using a String value.
  */
  public void setH02WK2(String newvalue)
  {
    fieldH02WK2.setString(newvalue);
  }

  /**
  * Get value of field H02WK2 as a String.
  */
  public String getH02WK2()
  {
    return fieldH02WK2.getString();
  }

  /**
  * Set field H02WK3 using a String value.
  */
  public void setH02WK3(String newvalue)
  {
    fieldH02WK3.setString(newvalue);
  }

  /**
  * Get value of field H02WK3 as a String.
  */
  public String getH02WK3()
  {
    return fieldH02WK3.getString();
  }

  /**
  * Set field ESW2FOR using a String value.
  */
  public void setESW2FOR(String newvalue)
  {
    fieldESW2FOR.setString(newvalue);
  }

  /**
  * Get value of field ESW2FOR as a String.
  */
  public String getESW2FOR()
  {
    return fieldESW2FOR.getString();
  }

  /**
  * Set numeric field ESW2FOR using a BigDecimal value.
  */
  public void setESW2FOR(BigDecimal newvalue)
  {
    fieldESW2FOR.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field ESW2FOR as a BigDecimal.
  */
  public BigDecimal getBigDecimalESW2FOR()
  {
    return fieldESW2FOR.getBigDecimal();
  }

  /**
  * Set field ESW2USR using a String value.
  */
  public void setESW2USR(String newvalue)
  {
    fieldESW2USR.setString(newvalue);
  }

  /**
  * Get value of field ESW2USR as a String.
  */
  public String getESW2USR()
  {
    return fieldESW2USR.getString();
  }

  /**
  * Set field ESW2REF using a String value.
  */
  public void setESW2REF(String newvalue)
  {
    fieldESW2REF.setString(newvalue);
  }

  /**
  * Get value of field ESW2REF as a String.
  */
  public String getESW2REF()
  {
    return fieldESW2REF.getString();
  }

  /**
  * Set field ESW2SWI using a String value.
  */
  public void setESW2SWI(String newvalue)
  {
    fieldESW2SWI.setString(newvalue);
  }

  /**
  * Get value of field ESW2SWI as a String.
  */
  public String getESW2SWI()
  {
    return fieldESW2SWI.getString();
  }

  /**
  * Set field ESW2LIN using a String value.
  */
  public void setESW2LIN(String newvalue)
  {
    fieldESW2LIN.setString(newvalue);
  }

  /**
  * Get value of field ESW2LIN as a String.
  */
  public String getESW2LIN()
  {
    return fieldESW2LIN.getString();
  }

  /**
  * Set numeric field ESW2LIN using a BigDecimal value.
  */
  public void setESW2LIN(BigDecimal newvalue)
  {
    fieldESW2LIN.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field ESW2LIN as a BigDecimal.
  */
  public BigDecimal getBigDecimalESW2LIN()
  {
    return fieldESW2LIN.getBigDecimal();
  }

}
