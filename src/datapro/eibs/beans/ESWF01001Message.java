package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from ESWF01001 physical file definition.
* 
* File level identifier is 1030130205251.
* Record format level identifier is 5B1F3EE0B5C2F.
*/

public class ESWF01001Message extends MessageRecord
{
  final static String fldnames[] = {
                                     "H01USR",
                                     "H01PGM",
                                     "H01TIM",
                                     "H01SCR",
                                     "H01OPE",
                                     "H01MAS",
                                     "H01WK1",
                                     "H01WK2",
                                     "H01WK3",
                                     "ESW1FOR",
                                     "ESW1USR",
                                     "ESW1REF",
                                     "ESW1SWI",
                                     "ESW1DT1",
                                     "ESW1DT2",
                                     "ESW1DT3",
                                     "ESW1LIN"
                                   };
  final static String tnames[] = {
                                   "H01USR",
                                   "H01PGM",
                                   "H01TIM",
                                   "H01SCR",
                                   "H01OPE",
                                   "H01MAS",
                                   "H01WK1",
                                   "H01WK2",
                                   "H01WK3",
                                   "ESW1FOR",
                                   "ESW1USR",
                                   "ESW1REF",
                                   "ESW1SWI",
                                   "ESW1DT1",
                                   "ESW1DT2",
                                   "ESW1DT3",
                                   "ESW1LIN"
                                 };
  final static String fid = "1030130205251";
  final static String rid = "5B1F3EE0B5C2F";
  final static String fmtname = "ESWF01001";
  final int FIELDCOUNT = 17;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldH01USR = null;
  private CharacterField fieldH01PGM = null;
  private CharacterField fieldH01TIM = null;
  private CharacterField fieldH01SCR = null;
  private CharacterField fieldH01OPE = null;
  private CharacterField fieldH01MAS = null;
  private CharacterField fieldH01WK1 = null;
  private CharacterField fieldH01WK2 = null;
  private CharacterField fieldH01WK3 = null;
  private DecimalField fieldESW1FOR = null;
  private CharacterField fieldESW1USR = null;
  private CharacterField fieldESW1REF = null;
  private CharacterField fieldESW1SWI = null;
  private DecimalField fieldESW1DT1 = null;
  private DecimalField fieldESW1DT2 = null;
  private DecimalField fieldESW1DT3 = null;
  private DecimalField fieldESW1LIN = null;

  /**
  * Constructor for ESWF01001Message.
  */
  public ESWF01001Message()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 98;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldH01USR =
    new CharacterField(message, HEADERSIZE + 0, 10, "H01USR");
    fields[1] = fieldH01PGM =
    new CharacterField(message, HEADERSIZE + 10, 10, "H01PGM");
    fields[2] = fieldH01TIM =
    new CharacterField(message, HEADERSIZE + 20, 12, "H01TIM");
    fields[3] = fieldH01SCR =
    new CharacterField(message, HEADERSIZE + 32, 2, "H01SCR");
    fields[4] = fieldH01OPE =
    new CharacterField(message, HEADERSIZE + 34, 4, "H01OPE");
    fields[5] = fieldH01MAS =
    new CharacterField(message, HEADERSIZE + 38, 1, "H01MAS");
    fields[6] = fieldH01WK1 =
    new CharacterField(message, HEADERSIZE + 39, 1, "H01WK1");
    fields[7] = fieldH01WK2 =
    new CharacterField(message, HEADERSIZE + 40, 1, "H01WK2");
    fields[8] = fieldH01WK3 =
    new CharacterField(message, HEADERSIZE + 41, 1, "H01WK3");
    fields[9] = fieldESW1FOR =
    new DecimalField(message, HEADERSIZE + 42, 4, 0, "ESW1FOR");
    fields[10] = fieldESW1USR =
    new CharacterField(message, HEADERSIZE + 46, 10, "ESW1USR");
    fields[11] = fieldESW1REF =
    new CharacterField(message, HEADERSIZE + 56, 16, "ESW1REF");
    fields[12] = fieldESW1SWI =
    new CharacterField(message, HEADERSIZE + 72, 12, "ESW1SWI");
    fields[13] = fieldESW1DT1 =
    new DecimalField(message, HEADERSIZE + 84, 3, 0, "ESW1DT1");
    fields[14] = fieldESW1DT2 =
    new DecimalField(message, HEADERSIZE + 87, 3, 0, "ESW1DT2");
    fields[15] = fieldESW1DT3 =
    new DecimalField(message, HEADERSIZE + 90, 3, 0, "ESW1DT3");
    fields[16] = fieldESW1LIN =
    new DecimalField(message, HEADERSIZE + 93, 5, 0, "ESW1LIN");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field H01USR using a String value.
  */
  public void setH01USR(String newvalue)
  {
    fieldH01USR.setString(newvalue);
  }

  /**
  * Get value of field H01USR as a String.
  */
  public String getH01USR()
  {
    return fieldH01USR.getString();
  }

  /**
  * Set field H01PGM using a String value.
  */
  public void setH01PGM(String newvalue)
  {
    fieldH01PGM.setString(newvalue);
  }

  /**
  * Get value of field H01PGM as a String.
  */
  public String getH01PGM()
  {
    return fieldH01PGM.getString();
  }

  /**
  * Set field H01TIM using a String value.
  */
  public void setH01TIM(String newvalue)
  {
    fieldH01TIM.setString(newvalue);
  }

  /**
  * Get value of field H01TIM as a String.
  */
  public String getH01TIM()
  {
    return fieldH01TIM.getString();
  }

  /**
  * Set field H01SCR using a String value.
  */
  public void setH01SCR(String newvalue)
  {
    fieldH01SCR.setString(newvalue);
  }

  /**
  * Get value of field H01SCR as a String.
  */
  public String getH01SCR()
  {
    return fieldH01SCR.getString();
  }

  /**
  * Set field H01OPE using a String value.
  */
  public void setH01OPE(String newvalue)
  {
    fieldH01OPE.setString(newvalue);
  }

  /**
  * Get value of field H01OPE as a String.
  */
  public String getH01OPE()
  {
    return fieldH01OPE.getString();
  }

  /**
  * Set field H01MAS using a String value.
  */
  public void setH01MAS(String newvalue)
  {
    fieldH01MAS.setString(newvalue);
  }

  /**
  * Get value of field H01MAS as a String.
  */
  public String getH01MAS()
  {
    return fieldH01MAS.getString();
  }

  /**
  * Set field H01WK1 using a String value.
  */
  public void setH01WK1(String newvalue)
  {
    fieldH01WK1.setString(newvalue);
  }

  /**
  * Get value of field H01WK1 as a String.
  */
  public String getH01WK1()
  {
    return fieldH01WK1.getString();
  }

  /**
  * Set field H01WK2 using a String value.
  */
  public void setH01WK2(String newvalue)
  {
    fieldH01WK2.setString(newvalue);
  }

  /**
  * Get value of field H01WK2 as a String.
  */
  public String getH01WK2()
  {
    return fieldH01WK2.getString();
  }

  /**
  * Set field H01WK3 using a String value.
  */
  public void setH01WK3(String newvalue)
  {
    fieldH01WK3.setString(newvalue);
  }

  /**
  * Get value of field H01WK3 as a String.
  */
  public String getH01WK3()
  {
    return fieldH01WK3.getString();
  }

  /**
  * Set field ESW1FOR using a String value.
  */
  public void setESW1FOR(String newvalue)
  {
    fieldESW1FOR.setString(newvalue);
  }

  /**
  * Get value of field ESW1FOR as a String.
  */
  public String getESW1FOR()
  {
    return fieldESW1FOR.getString();
  }

  /**
  * Set numeric field ESW1FOR using a BigDecimal value.
  */
  public void setESW1FOR(BigDecimal newvalue)
  {
    fieldESW1FOR.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field ESW1FOR as a BigDecimal.
  */
  public BigDecimal getBigDecimalESW1FOR()
  {
    return fieldESW1FOR.getBigDecimal();
  }

  /**
  * Set field ESW1USR using a String value.
  */
  public void setESW1USR(String newvalue)
  {
    fieldESW1USR.setString(newvalue);
  }

  /**
  * Get value of field ESW1USR as a String.
  */
  public String getESW1USR()
  {
    return fieldESW1USR.getString();
  }

  /**
  * Set field ESW1REF using a String value.
  */
  public void setESW1REF(String newvalue)
  {
    fieldESW1REF.setString(newvalue);
  }

  /**
  * Get value of field ESW1REF as a String.
  */
  public String getESW1REF()
  {
    return fieldESW1REF.getString();
  }

  /**
  * Set field ESW1SWI using a String value.
  */
  public void setESW1SWI(String newvalue)
  {
    fieldESW1SWI.setString(newvalue);
  }

  /**
  * Get value of field ESW1SWI as a String.
  */
  public String getESW1SWI()
  {
    return fieldESW1SWI.getString();
  }

  /**
  * Set field ESW1DT1 using a String value.
  */
  public void setESW1DT1(String newvalue)
  {
    fieldESW1DT1.setString(newvalue);
  }

  /**
  * Get value of field ESW1DT1 as a String.
  */
  public String getESW1DT1()
  {
    return fieldESW1DT1.getString();
  }

  /**
  * Set numeric field ESW1DT1 using a BigDecimal value.
  */
  public void setESW1DT1(BigDecimal newvalue)
  {
    fieldESW1DT1.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field ESW1DT1 as a BigDecimal.
  */
  public BigDecimal getBigDecimalESW1DT1()
  {
    return fieldESW1DT1.getBigDecimal();
  }

  /**
  * Set field ESW1DT2 using a String value.
  */
  public void setESW1DT2(String newvalue)
  {
    fieldESW1DT2.setString(newvalue);
  }

  /**
  * Get value of field ESW1DT2 as a String.
  */
  public String getESW1DT2()
  {
    return fieldESW1DT2.getString();
  }

  /**
  * Set numeric field ESW1DT2 using a BigDecimal value.
  */
  public void setESW1DT2(BigDecimal newvalue)
  {
    fieldESW1DT2.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field ESW1DT2 as a BigDecimal.
  */
  public BigDecimal getBigDecimalESW1DT2()
  {
    return fieldESW1DT2.getBigDecimal();
  }

  /**
  * Set field ESW1DT3 using a String value.
  */
  public void setESW1DT3(String newvalue)
  {
    fieldESW1DT3.setString(newvalue);
  }

  /**
  * Get value of field ESW1DT3 as a String.
  */
  public String getESW1DT3()
  {
    return fieldESW1DT3.getString();
  }

  /**
  * Set numeric field ESW1DT3 using a BigDecimal value.
  */
  public void setESW1DT3(BigDecimal newvalue)
  {
    fieldESW1DT3.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field ESW1DT3 as a BigDecimal.
  */
  public BigDecimal getBigDecimalESW1DT3()
  {
    return fieldESW1DT3.getBigDecimal();
  }

  /**
  * Set field ESW1LIN using a String value.
  */
  public void setESW1LIN(String newvalue)
  {
    fieldESW1LIN.setString(newvalue);
  }

  /**
  * Get value of field ESW1LIN as a String.
  */
  public String getESW1LIN()
  {
    return fieldESW1LIN.getString();
  }

  /**
  * Set numeric field ESW1LIN using a BigDecimal value.
  */
  public void setESW1LIN(BigDecimal newvalue)
  {
    fieldESW1LIN.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field ESW1LIN as a BigDecimal.
  */
  public BigDecimal getBigDecimalESW1LIN()
  {
    return fieldESW1LIN.getBigDecimal();
  }

}
