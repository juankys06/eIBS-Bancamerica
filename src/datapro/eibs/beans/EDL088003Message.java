package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from EDL088003 physical file definition.
* 
* File level identifier is 1040522135606.
* Record format level identifier is 4AD319F54E69F.
*/

public class EDL088003Message extends MessageRecord
{
  final static String fldnames[] = {
                                     "H03USERID",
                                     "H03PROGRM",
                                     "H03TIMSYS",
                                     "H03SCRCOD",
                                     "H03OPECOD",
                                     "H03FLGMAS",
                                     "H03FLGWK1",
                                     "H03FLGWK2",
                                     "H03FLGWK3",
                                     "E03SFLYLD",
                                     "E03SFLPRC",
                                     "E03SFLQTE",
                                     "E03SFLEND"
                                   };
  final static String tnames[] = {
                                   "H03USERID",
                                   "H03PROGRM",
                                   "H03TIMSYS",
                                   "H03SCRCOD",
                                   "H03OPECOD",
                                   "H03FLGMAS",
                                   "H03FLGWK1",
                                   "H03FLGWK2",
                                   "H03FLGWK3",
                                   "E03SFLYLD",
                                   "E03SFLPRC",
                                   "E03SFLQTE",
                                   "E03SFLEND"
                                 };
  final static String fid = "1040522135606";
  final static String rid = "4AD319F54E69F";
  final static String fmtname = "EDL088003";
  final int FIELDCOUNT = 13;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldH03USERID = null;
  private CharacterField fieldH03PROGRM = null;
  private CharacterField fieldH03TIMSYS = null;
  private CharacterField fieldH03SCRCOD = null;
  private CharacterField fieldH03OPECOD = null;
  private CharacterField fieldH03FLGMAS = null;
  private CharacterField fieldH03FLGWK1 = null;
  private CharacterField fieldH03FLGWK2 = null;
  private CharacterField fieldH03FLGWK3 = null;
  private DecimalField fieldE03SFLYLD = null;
  private DecimalField fieldE03SFLPRC = null;
  private DecimalField fieldE03SFLQTE = null;
  private CharacterField fieldE03SFLEND = null;

  /**
  * Constructor for EDL088003Message.
  */
  public EDL088003Message()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 82;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldH03USERID =
    new CharacterField(message, HEADERSIZE + 0, 10, "H03USERID");
    fields[1] = fieldH03PROGRM =
    new CharacterField(message, HEADERSIZE + 10, 10, "H03PROGRM");
    fields[2] = fieldH03TIMSYS =
    new CharacterField(message, HEADERSIZE + 20, 12, "H03TIMSYS");
    fields[3] = fieldH03SCRCOD =
    new CharacterField(message, HEADERSIZE + 32, 2, "H03SCRCOD");
    fields[4] = fieldH03OPECOD =
    new CharacterField(message, HEADERSIZE + 34, 4, "H03OPECOD");
    fields[5] = fieldH03FLGMAS =
    new CharacterField(message, HEADERSIZE + 38, 1, "H03FLGMAS");
    fields[6] = fieldH03FLGWK1 =
    new CharacterField(message, HEADERSIZE + 39, 1, "H03FLGWK1");
    fields[7] = fieldH03FLGWK2 =
    new CharacterField(message, HEADERSIZE + 40, 1, "H03FLGWK2");
    fields[8] = fieldH03FLGWK3 =
    new CharacterField(message, HEADERSIZE + 41, 1, "H03FLGWK3");
    fields[9] = fieldE03SFLYLD =
    new DecimalField(message, HEADERSIZE + 42, 11, 6, "E03SFLYLD");
    fields[10] = fieldE03SFLPRC =
    new DecimalField(message, HEADERSIZE + 53, 17, 2, "E03SFLPRC");
    fields[11] = fieldE03SFLQTE =
    new DecimalField(message, HEADERSIZE + 70, 11, 6, "E03SFLQTE");
    fields[12] = fieldE03SFLEND =
    new CharacterField(message, HEADERSIZE + 81, 1, "E03SFLEND");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field H03USERID using a String value.
  */
  public void setH03USERID(String newvalue)
  {
    fieldH03USERID.setString(newvalue);
  }

  /**
  * Get value of field H03USERID as a String.
  */
  public String getH03USERID()
  {
    return fieldH03USERID.getString();
  }

  /**
  * Set field H03PROGRM using a String value.
  */
  public void setH03PROGRM(String newvalue)
  {
    fieldH03PROGRM.setString(newvalue);
  }

  /**
  * Get value of field H03PROGRM as a String.
  */
  public String getH03PROGRM()
  {
    return fieldH03PROGRM.getString();
  }

  /**
  * Set field H03TIMSYS using a String value.
  */
  public void setH03TIMSYS(String newvalue)
  {
    fieldH03TIMSYS.setString(newvalue);
  }

  /**
  * Get value of field H03TIMSYS as a String.
  */
  public String getH03TIMSYS()
  {
    return fieldH03TIMSYS.getString();
  }

  /**
  * Set field H03SCRCOD using a String value.
  */
  public void setH03SCRCOD(String newvalue)
  {
    fieldH03SCRCOD.setString(newvalue);
  }

  /**
  * Get value of field H03SCRCOD as a String.
  */
  public String getH03SCRCOD()
  {
    return fieldH03SCRCOD.getString();
  }

  /**
  * Set field H03OPECOD using a String value.
  */
  public void setH03OPECOD(String newvalue)
  {
    fieldH03OPECOD.setString(newvalue);
  }

  /**
  * Get value of field H03OPECOD as a String.
  */
  public String getH03OPECOD()
  {
    return fieldH03OPECOD.getString();
  }

  /**
  * Set field H03FLGMAS using a String value.
  */
  public void setH03FLGMAS(String newvalue)
  {
    fieldH03FLGMAS.setString(newvalue);
  }

  /**
  * Get value of field H03FLGMAS as a String.
  */
  public String getH03FLGMAS()
  {
    return fieldH03FLGMAS.getString();
  }

  /**
  * Set field H03FLGWK1 using a String value.
  */
  public void setH03FLGWK1(String newvalue)
  {
    fieldH03FLGWK1.setString(newvalue);
  }

  /**
  * Get value of field H03FLGWK1 as a String.
  */
  public String getH03FLGWK1()
  {
    return fieldH03FLGWK1.getString();
  }

  /**
  * Set field H03FLGWK2 using a String value.
  */
  public void setH03FLGWK2(String newvalue)
  {
    fieldH03FLGWK2.setString(newvalue);
  }

  /**
  * Get value of field H03FLGWK2 as a String.
  */
  public String getH03FLGWK2()
  {
    return fieldH03FLGWK2.getString();
  }

  /**
  * Set field H03FLGWK3 using a String value.
  */
  public void setH03FLGWK3(String newvalue)
  {
    fieldH03FLGWK3.setString(newvalue);
  }

  /**
  * Get value of field H03FLGWK3 as a String.
  */
  public String getH03FLGWK3()
  {
    return fieldH03FLGWK3.getString();
  }

  /**
  * Set field E03SFLYLD using a String value.
  */
  public void setE03SFLYLD(String newvalue)
  {
    fieldE03SFLYLD.setString(newvalue);
  }

  /**
  * Get value of field E03SFLYLD as a String.
  */
  public String getE03SFLYLD()
  {
    return fieldE03SFLYLD.getString();
  }

  /**
  * Set numeric field E03SFLYLD using a BigDecimal value.
  */
  public void setE03SFLYLD(BigDecimal newvalue)
  {
    fieldE03SFLYLD.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E03SFLYLD as a BigDecimal.
  */
  public BigDecimal getBigDecimalE03SFLYLD()
  {
    return fieldE03SFLYLD.getBigDecimal();
  }

  /**
  * Set field E03SFLPRC using a String value.
  */
  public void setE03SFLPRC(String newvalue)
  {
    fieldE03SFLPRC.setString(newvalue);
  }

  /**
  * Get value of field E03SFLPRC as a String.
  */
  public String getE03SFLPRC()
  {
    return fieldE03SFLPRC.getString();
  }

  /**
  * Set numeric field E03SFLPRC using a BigDecimal value.
  */
  public void setE03SFLPRC(BigDecimal newvalue)
  {
    fieldE03SFLPRC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E03SFLPRC as a BigDecimal.
  */
  public BigDecimal getBigDecimalE03SFLPRC()
  {
    return fieldE03SFLPRC.getBigDecimal();
  }

  /**
  * Set field E03SFLQTE using a String value.
  */
  public void setE03SFLQTE(String newvalue)
  {
    fieldE03SFLQTE.setString(newvalue);
  }

  /**
  * Get value of field E03SFLQTE as a String.
  */
  public String getE03SFLQTE()
  {
    return fieldE03SFLQTE.getString();
  }

  /**
  * Set numeric field E03SFLQTE using a BigDecimal value.
  */
  public void setE03SFLQTE(BigDecimal newvalue)
  {
    fieldE03SFLQTE.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E03SFLQTE as a BigDecimal.
  */
  public BigDecimal getBigDecimalE03SFLQTE()
  {
    return fieldE03SFLQTE.getBigDecimal();
  }

  /**
  * Set field E03SFLEND using a String value.
  */
  public void setE03SFLEND(String newvalue)
  {
    fieldE03SFLEND.setString(newvalue);
  }

  /**
  * Get value of field E03SFLEND as a String.
  */
  public String getE03SFLEND()
  {
    return fieldE03SFLEND.getString();
  }

}
