package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from EWD0311DS physical file definition.
* 
* File level identifier is 1060517191020.
* Record format level identifier is 434C70FC4681F.
*/

public class EWD0311DSMessage extends MessageRecord
{
  final static String fldnames[] = {
                                     "RWDUSR",
                                     "RWDTYP",
                                     "RWDFRC",
                                     "SWDAGR",
                                     "SWDCUN",
                                     "SWDACC",
                                     "SWDNA1",
                                     "SWDREF",
                                     "SWDOP1",
                                     "SWDOP2",
                                     "SWDOP3",
                                     "SWDREC",
                                     "SWDOPE"
                                   };
  final static String tnames[] = {
                                   "RWDUSR",
                                   "RWDTYP",
                                   "RWDFRC",
                                   "SWDAGR",
                                   "SWDCUN",
                                   "SWDACC",
                                   "SWDNA1",
                                   "SWDREF",
                                   "SWDOP1",
                                   "SWDOP2",
                                   "SWDOP3",
                                   "SWDREC",
                                   "SWDOPE"
                                 };
  final static String fid = "1060517191020";
  final static String rid = "434C70FC4681F";
  final static String fmtname = "EWD0311DS";
  final int FIELDCOUNT = 13;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldRWDUSR = null;
  private CharacterField fieldRWDTYP = null;
  private DecimalField fieldRWDFRC = null;
  private DecimalField fieldSWDAGR = null;
  private DecimalField fieldSWDCUN = null;
  private DecimalField fieldSWDACC = null;
  private CharacterField fieldSWDNA1 = null;
  private CharacterField fieldSWDREF = null;
  private DecimalField fieldSWDOP1 = null;
  private DecimalField fieldSWDOP2 = null;
  private DecimalField fieldSWDOP3 = null;
  private DecimalField fieldSWDREC = null;
  private CharacterField fieldSWDOPE = null;

  /**
  * Constructor for EWD0311DSMessage.
  */
  public EWD0311DSMessage()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 133;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldRWDUSR =
    new CharacterField(message, HEADERSIZE + 0, 10, "RWDUSR");
    fields[1] = fieldRWDTYP =
    new CharacterField(message, HEADERSIZE + 10, 1, "RWDTYP");
    fields[2] = fieldRWDFRC =
    new DecimalField(message, HEADERSIZE + 11, 8, 0, "RWDFRC");
    fields[3] = fieldSWDAGR =
    new DecimalField(message, HEADERSIZE + 19, 13, 0, "SWDAGR");
    fields[4] = fieldSWDCUN =
    new DecimalField(message, HEADERSIZE + 32, 10, 0, "SWDCUN");
    fields[5] = fieldSWDACC =
    new DecimalField(message, HEADERSIZE + 42, 13, 0, "SWDACC");
    fields[6] = fieldSWDNA1 =
    new CharacterField(message, HEADERSIZE + 55, 30, "SWDNA1");
    fields[7] = fieldSWDREF =
    new CharacterField(message, HEADERSIZE + 85, 30, "SWDREF");
    fields[8] = fieldSWDOP1 =
    new DecimalField(message, HEADERSIZE + 115, 3, 0, "SWDOP1");
    fields[9] = fieldSWDOP2 =
    new DecimalField(message, HEADERSIZE + 118, 3, 0, "SWDOP2");
    fields[10] = fieldSWDOP3 =
    new DecimalField(message, HEADERSIZE + 121, 3, 0, "SWDOP3");
    fields[11] = fieldSWDREC =
    new DecimalField(message, HEADERSIZE + 124, 8, 0, "SWDREC");
    fields[12] = fieldSWDOPE =
    new CharacterField(message, HEADERSIZE + 132, 1, "SWDOPE");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field RWDUSR using a String value.
  */
  public void setRWDUSR(String newvalue)
  {
    fieldRWDUSR.setString(newvalue);
  }

  /**
  * Get value of field RWDUSR as a String.
  */
  public String getRWDUSR()
  {
    return fieldRWDUSR.getString();
  }

  /**
  * Set field RWDTYP using a String value.
  */
  public void setRWDTYP(String newvalue)
  {
    fieldRWDTYP.setString(newvalue);
  }

  /**
  * Get value of field RWDTYP as a String.
  */
  public String getRWDTYP()
  {
    return fieldRWDTYP.getString();
  }

  /**
  * Set field RWDFRC using a String value.
  */
  public void setRWDFRC(String newvalue)
  {
    fieldRWDFRC.setString(newvalue);
  }

  /**
  * Get value of field RWDFRC as a String.
  */
  public String getRWDFRC()
  {
    return fieldRWDFRC.getString();
  }

  /**
  * Set numeric field RWDFRC using a BigDecimal value.
  */
  public void setRWDFRC(BigDecimal newvalue)
  {
    fieldRWDFRC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field RWDFRC as a BigDecimal.
  */
  public BigDecimal getBigDecimalRWDFRC()
  {
    return fieldRWDFRC.getBigDecimal();
  }

  /**
  * Set field SWDAGR using a String value.
  */
  public void setSWDAGR(String newvalue)
  {
    fieldSWDAGR.setString(newvalue);
  }

  /**
  * Get value of field SWDAGR as a String.
  */
  public String getSWDAGR()
  {
    return fieldSWDAGR.getString();
  }

  /**
  * Set numeric field SWDAGR using a BigDecimal value.
  */
  public void setSWDAGR(BigDecimal newvalue)
  {
    fieldSWDAGR.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field SWDAGR as a BigDecimal.
  */
  public BigDecimal getBigDecimalSWDAGR()
  {
    return fieldSWDAGR.getBigDecimal();
  }

  /**
  * Set field SWDCUN using a String value.
  */
  public void setSWDCUN(String newvalue)
  {
    fieldSWDCUN.setString(newvalue);
  }

  /**
  * Get value of field SWDCUN as a String.
  */
  public String getSWDCUN()
  {
    return fieldSWDCUN.getString();
  }

  /**
  * Set numeric field SWDCUN using a BigDecimal value.
  */
  public void setSWDCUN(BigDecimal newvalue)
  {
    fieldSWDCUN.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field SWDCUN as a BigDecimal.
  */
  public BigDecimal getBigDecimalSWDCUN()
  {
    return fieldSWDCUN.getBigDecimal();
  }

  /**
  * Set field SWDACC using a String value.
  */
  public void setSWDACC(String newvalue)
  {
    fieldSWDACC.setString(newvalue);
  }

  /**
  * Get value of field SWDACC as a String.
  */
  public String getSWDACC()
  {
    return fieldSWDACC.getString();
  }

  /**
  * Set numeric field SWDACC using a BigDecimal value.
  */
  public void setSWDACC(BigDecimal newvalue)
  {
    fieldSWDACC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field SWDACC as a BigDecimal.
  */
  public BigDecimal getBigDecimalSWDACC()
  {
    return fieldSWDACC.getBigDecimal();
  }

  /**
  * Set field SWDNA1 using a String value.
  */
  public void setSWDNA1(String newvalue)
  {
    fieldSWDNA1.setString(newvalue);
  }

  /**
  * Get value of field SWDNA1 as a String.
  */
  public String getSWDNA1()
  {
    return fieldSWDNA1.getString();
  }

  /**
  * Set field SWDREF using a String value.
  */
  public void setSWDREF(String newvalue)
  {
    fieldSWDREF.setString(newvalue);
  }

  /**
  * Get value of field SWDREF as a String.
  */
  public String getSWDREF()
  {
    return fieldSWDREF.getString();
  }

  /**
  * Set field SWDOP1 using a String value.
  */
  public void setSWDOP1(String newvalue)
  {
    fieldSWDOP1.setString(newvalue);
  }

  /**
  * Get value of field SWDOP1 as a String.
  */
  public String getSWDOP1()
  {
    return fieldSWDOP1.getString();
  }

  /**
  * Set numeric field SWDOP1 using a BigDecimal value.
  */
  public void setSWDOP1(BigDecimal newvalue)
  {
    fieldSWDOP1.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field SWDOP1 as a BigDecimal.
  */
  public BigDecimal getBigDecimalSWDOP1()
  {
    return fieldSWDOP1.getBigDecimal();
  }

  /**
  * Set field SWDOP2 using a String value.
  */
  public void setSWDOP2(String newvalue)
  {
    fieldSWDOP2.setString(newvalue);
  }

  /**
  * Get value of field SWDOP2 as a String.
  */
  public String getSWDOP2()
  {
    return fieldSWDOP2.getString();
  }

  /**
  * Set numeric field SWDOP2 using a BigDecimal value.
  */
  public void setSWDOP2(BigDecimal newvalue)
  {
    fieldSWDOP2.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field SWDOP2 as a BigDecimal.
  */
  public BigDecimal getBigDecimalSWDOP2()
  {
    return fieldSWDOP2.getBigDecimal();
  }

  /**
  * Set field SWDOP3 using a String value.
  */
  public void setSWDOP3(String newvalue)
  {
    fieldSWDOP3.setString(newvalue);
  }

  /**
  * Get value of field SWDOP3 as a String.
  */
  public String getSWDOP3()
  {
    return fieldSWDOP3.getString();
  }

  /**
  * Set numeric field SWDOP3 using a BigDecimal value.
  */
  public void setSWDOP3(BigDecimal newvalue)
  {
    fieldSWDOP3.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field SWDOP3 as a BigDecimal.
  */
  public BigDecimal getBigDecimalSWDOP3()
  {
    return fieldSWDOP3.getBigDecimal();
  }

  /**
  * Set field SWDREC using a String value.
  */
  public void setSWDREC(String newvalue)
  {
    fieldSWDREC.setString(newvalue);
  }

  /**
  * Get value of field SWDREC as a String.
  */
  public String getSWDREC()
  {
    return fieldSWDREC.getString();
  }

  /**
  * Set numeric field SWDREC using a BigDecimal value.
  */
  public void setSWDREC(BigDecimal newvalue)
  {
    fieldSWDREC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field SWDREC as a BigDecimal.
  */
  public BigDecimal getBigDecimalSWDREC()
  {
    return fieldSWDREC.getBigDecimal();
  }

  /**
  * Set field SWDOPE using a String value.
  */
  public void setSWDOPE(String newvalue)
  {
    fieldSWDOPE.setString(newvalue);
  }

  /**
  * Get value of field SWDOPE as a String.
  */
  public String getSWDOPE()
  {
    return fieldSWDOPE.getString();
  }

}
