package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from EWD0361DS physical file definition.
* 
* File level identifier is 1080630150221.
* Record format level identifier is 2EE7A6A1F12FC.
*/

public class EWD0361DSMessage extends MessageRecord
{
  final static String fldnames[] = {
                                     "RWDUSR",
                                     "RWDTYP",
                                     "RWDFRC",
                                     "SWDCDE",
                                     "SWDDSC",
                                     "SWDRAP",
                                     "SWDRAT",
                                     "SWDADR",
                                     "SWDADL",
                                     "SWDAMT",
                                     "SWDREC",
                                     "SWDOPE"
                                   };
  final static String tnames[] = {
                                   "RWDUSR",
                                   "RWDTYP",
                                   "RWDFRC",
                                   "SWDCDE",
                                   "SWDDSC",
                                   "SWDRAP",
                                   "SWDRAT",
                                   "SWDADR",
                                   "SWDADL",
                                   "SWDAMT",
                                   "SWDREC",
                                   "SWDOPE"
                                 };
  final static String fid = "1080630150221";
  final static String rid = "2EE7A6A1F12FC";
  final static String fmtname = "EWD0361DS";
  final int FIELDCOUNT = 12;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldRWDUSR = null;
  private CharacterField fieldRWDTYP = null;
  private DecimalField fieldRWDFRC = null;
  private CharacterField fieldSWDCDE = null;
  private CharacterField fieldSWDDSC = null;
  private CharacterField fieldSWDRAP = null;
  private CharacterField fieldSWDRAT = null;
  private CharacterField fieldSWDADR = null;
  private DecimalField fieldSWDADL = null;
  private DecimalField fieldSWDAMT = null;
  private DecimalField fieldSWDREC = null;
  private CharacterField fieldSWDOPE = null;

  /**
  * Constructor for EWD0361DSMessage.
  */
  public EWD0361DSMessage()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 101;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldRWDUSR =
    new CharacterField(message, HEADERSIZE + 0, 10, "RWDUSR");
    fields[1] = fieldRWDTYP =
    new CharacterField(message, HEADERSIZE + 10, 1, "RWDTYP");
    fields[2] = fieldRWDFRC =
    new DecimalField(message, HEADERSIZE + 11, 8, 0, "RWDFRC");
    fields[3] = fieldSWDCDE =
    new CharacterField(message, HEADERSIZE + 19, 3, "SWDCDE");
    fields[4] = fieldSWDDSC =
    new CharacterField(message, HEADERSIZE + 22, 45, "SWDDSC");
    fields[5] = fieldSWDRAP =
    new CharacterField(message, HEADERSIZE + 67, 1, "SWDRAP");
    fields[6] = fieldSWDRAT =
    new CharacterField(message, HEADERSIZE + 68, 1, "SWDRAT");
    fields[7] = fieldSWDADR =
    new CharacterField(message, HEADERSIZE + 69, 1, "SWDADR");
    fields[8] = fieldSWDADL =
    new DecimalField(message, HEADERSIZE + 70, 5, 0, "SWDADL");
    fields[9] = fieldSWDAMT =
    new DecimalField(message, HEADERSIZE + 75, 17, 2, "SWDAMT");
    fields[10] = fieldSWDREC =
    new DecimalField(message, HEADERSIZE + 92, 8, 0, "SWDREC");
    fields[11] = fieldSWDOPE =
    new CharacterField(message, HEADERSIZE + 100, 1, "SWDOPE");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field RWDUSR using a String value.
  */
  public void setRWDUSR(String newvalue)
  {
    fieldRWDUSR.setString(newvalue);
  }

  /**
  * Get value of field RWDUSR as a String.
  */
  public String getRWDUSR()
  {
    return fieldRWDUSR.getString();
  }

  /**
  * Set field RWDTYP using a String value.
  */
  public void setRWDTYP(String newvalue)
  {
    fieldRWDTYP.setString(newvalue);
  }

  /**
  * Get value of field RWDTYP as a String.
  */
  public String getRWDTYP()
  {
    return fieldRWDTYP.getString();
  }

  /**
  * Set field RWDFRC using a String value.
  */
  public void setRWDFRC(String newvalue)
  {
    fieldRWDFRC.setString(newvalue);
  }

  /**
  * Get value of field RWDFRC as a String.
  */
  public String getRWDFRC()
  {
    return fieldRWDFRC.getString();
  }

  /**
  * Set numeric field RWDFRC using a BigDecimal value.
  */
  public void setRWDFRC(BigDecimal newvalue)
  {
    fieldRWDFRC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field RWDFRC as a BigDecimal.
  */
  public BigDecimal getBigDecimalRWDFRC()
  {
    return fieldRWDFRC.getBigDecimal();
  }

  /**
  * Set field SWDCDE using a String value.
  */
  public void setSWDCDE(String newvalue)
  {
    fieldSWDCDE.setString(newvalue);
  }

  /**
  * Get value of field SWDCDE as a String.
  */
  public String getSWDCDE()
  {
    return fieldSWDCDE.getString();
  }

  /**
  * Set field SWDDSC using a String value.
  */
  public void setSWDDSC(String newvalue)
  {
    fieldSWDDSC.setString(newvalue);
  }

  /**
  * Get value of field SWDDSC as a String.
  */
  public String getSWDDSC()
  {
    return fieldSWDDSC.getString();
  }

  /**
  * Set field SWDRAP using a String value.
  */
  public void setSWDRAP(String newvalue)
  {
    fieldSWDRAP.setString(newvalue);
  }

  /**
  * Get value of field SWDRAP as a String.
  */
  public String getSWDRAP()
  {
    return fieldSWDRAP.getString();
  }

  /**
  * Set field SWDRAT using a String value.
  */
  public void setSWDRAT(String newvalue)
  {
    fieldSWDRAT.setString(newvalue);
  }

  /**
  * Get value of field SWDRAT as a String.
  */
  public String getSWDRAT()
  {
    return fieldSWDRAT.getString();
  }

  /**
  * Set field SWDADR using a String value.
  */
  public void setSWDADR(String newvalue)
  {
    fieldSWDADR.setString(newvalue);
  }

  /**
  * Get value of field SWDADR as a String.
  */
  public String getSWDADR()
  {
    return fieldSWDADR.getString();
  }

  /**
  * Set field SWDADL using a String value.
  */
  public void setSWDADL(String newvalue)
  {
    fieldSWDADL.setString(newvalue);
  }

  /**
  * Get value of field SWDADL as a String.
  */
  public String getSWDADL()
  {
    return fieldSWDADL.getString();
  }

  /**
  * Set numeric field SWDADL using a BigDecimal value.
  */
  public void setSWDADL(BigDecimal newvalue)
  {
    fieldSWDADL.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field SWDADL as a BigDecimal.
  */
  public BigDecimal getBigDecimalSWDADL()
  {
    return fieldSWDADL.getBigDecimal();
  }

  /**
  * Set field SWDAMT using a String value.
  */
  public void setSWDAMT(String newvalue)
  {
    fieldSWDAMT.setString(newvalue);
  }

  /**
  * Get value of field SWDAMT as a String.
  */
  public String getSWDAMT()
  {
    return fieldSWDAMT.getString();
  }

  /**
  * Set numeric field SWDAMT using a BigDecimal value.
  */
  public void setSWDAMT(BigDecimal newvalue)
  {
    fieldSWDAMT.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field SWDAMT as a BigDecimal.
  */
  public BigDecimal getBigDecimalSWDAMT()
  {
    return fieldSWDAMT.getBigDecimal();
  }

  /**
  * Set field SWDREC using a String value.
  */
  public void setSWDREC(String newvalue)
  {
    fieldSWDREC.setString(newvalue);
  }

  /**
  * Get value of field SWDREC as a String.
  */
  public String getSWDREC()
  {
    return fieldSWDREC.getString();
  }

  /**
  * Set numeric field SWDREC using a BigDecimal value.
  */
  public void setSWDREC(BigDecimal newvalue)
  {
    fieldSWDREC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field SWDREC as a BigDecimal.
  */
  public BigDecimal getBigDecimalSWDREC()
  {
    return fieldSWDREC.getBigDecimal();
  }

  /**
  * Set field SWDOPE using a String value.
  */
  public void setSWDOPE(String newvalue)
  {
    fieldSWDOPE.setString(newvalue);
  }

  /**
  * Get value of field SWDOPE as a String.
  */
  public String getSWDOPE()
  {
    return fieldSWDOPE.getString();
  }

}
