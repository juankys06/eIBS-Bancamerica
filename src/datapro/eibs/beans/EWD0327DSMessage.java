package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from EWD0327DS physical file definition.
* 
* File level identifier is 1060822183952.
* Record format level identifier is 391E8311A4AE6.
*/

public class EWD0327DSMessage extends MessageRecord
{
  final static String fldnames[] = {
                                     "RWDUSR",
                                     "RWDTYP",
                                     "RWDFRC",
                                     "SWDBNK",
                                     "SWDCCY",
                                     "SWDDID",
                                     "SWDDSC",
                                     "SWDREF",
                                     "SWDAMN",
                                     "SWDOEQ",
                                     "SWDEXR",
                                     "SWDVAL",
                                     "SWDNME",
                                     "SWDREC",
                                     "SWDOPE"
                                   };
  final static String tnames[] = {
                                   "RWDUSR",
                                   "RWDTYP",
                                   "RWDFRC",
                                   "SWDBNK",
                                   "SWDCCY",
                                   "SWDDID",
                                   "SWDDSC",
                                   "SWDREF",
                                   "SWDAMN",
                                   "SWDOEQ",
                                   "SWDEXR",
                                   "SWDVAL",
                                   "SWDNME",
                                   "SWDREC",
                                   "SWDOPE"
                                 };
  final static String fid = "1060822183952";
  final static String rid = "391E8311A4AE6";
  final static String fmtname = "EWD0327DS";
  final int FIELDCOUNT = 15;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldRWDUSR = null;
  private CharacterField fieldRWDTYP = null;
  private DecimalField fieldRWDFRC = null;
  private CharacterField fieldSWDBNK = null;
  private CharacterField fieldSWDCCY = null;
  private CharacterField fieldSWDDID = null;
  private CharacterField fieldSWDDSC = null;
  private CharacterField fieldSWDREF = null;
  private DecimalField fieldSWDAMN = null;
  private DecimalField fieldSWDOEQ = null;
  private DecimalField fieldSWDEXR = null;
  private CharacterField fieldSWDVAL = null;
  private CharacterField fieldSWDNME = null;
  private DecimalField fieldSWDREC = null;
  private CharacterField fieldSWDOPE = null;

  /**
  * Constructor for EWD0327DSMessage.
  */
  public EWD0327DSMessage()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 188;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldRWDUSR =
    new CharacterField(message, HEADERSIZE + 0, 10, "RWDUSR");
    fields[1] = fieldRWDTYP =
    new CharacterField(message, HEADERSIZE + 10, 1, "RWDTYP");
    fields[2] = fieldRWDFRC =
    new DecimalField(message, HEADERSIZE + 11, 8, 0, "RWDFRC");
    fields[3] = fieldSWDBNK =
    new CharacterField(message, HEADERSIZE + 19, 2, "SWDBNK");
    fields[4] = fieldSWDCCY =
    new CharacterField(message, HEADERSIZE + 21, 3, "SWDCCY");
    fields[5] = fieldSWDDID =
    new CharacterField(message, HEADERSIZE + 24, 10, "SWDDID");
    fields[6] = fieldSWDDSC =
    new CharacterField(message, HEADERSIZE + 34, 30, "SWDDSC");
    fields[7] = fieldSWDREF =
    new CharacterField(message, HEADERSIZE + 64, 15, "SWDREF");
    fields[8] = fieldSWDAMN =
    new DecimalField(message, HEADERSIZE + 79, 17, 2, "SWDAMN");
    fields[9] = fieldSWDOEQ =
    new DecimalField(message, HEADERSIZE + 96, 17, 2, "SWDOEQ");
    fields[10] = fieldSWDEXR =
    new DecimalField(message, HEADERSIZE + 113, 13, 6, "SWDEXR");
    fields[11] = fieldSWDVAL =
    new CharacterField(message, HEADERSIZE + 126, 8, "SWDVAL");
    fields[12] = fieldSWDNME =
    new CharacterField(message, HEADERSIZE + 134, 45, "SWDNME");
    fields[13] = fieldSWDREC =
    new DecimalField(message, HEADERSIZE + 179, 8, 0, "SWDREC");
    fields[14] = fieldSWDOPE =
    new CharacterField(message, HEADERSIZE + 187, 1, "SWDOPE");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field RWDUSR using a String value.
  */
  public void setRWDUSR(String newvalue)
  {
    fieldRWDUSR.setString(newvalue);
  }

  /**
  * Get value of field RWDUSR as a String.
  */
  public String getRWDUSR()
  {
    return fieldRWDUSR.getString();
  }

  /**
  * Set field RWDTYP using a String value.
  */
  public void setRWDTYP(String newvalue)
  {
    fieldRWDTYP.setString(newvalue);
  }

  /**
  * Get value of field RWDTYP as a String.
  */
  public String getRWDTYP()
  {
    return fieldRWDTYP.getString();
  }

  /**
  * Set field RWDFRC using a String value.
  */
  public void setRWDFRC(String newvalue)
  {
    fieldRWDFRC.setString(newvalue);
  }

  /**
  * Get value of field RWDFRC as a String.
  */
  public String getRWDFRC()
  {
    return fieldRWDFRC.getString();
  }

  /**
  * Set numeric field RWDFRC using a BigDecimal value.
  */
  public void setRWDFRC(BigDecimal newvalue)
  {
    fieldRWDFRC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field RWDFRC as a BigDecimal.
  */
  public BigDecimal getBigDecimalRWDFRC()
  {
    return fieldRWDFRC.getBigDecimal();
  }

  /**
  * Set field SWDBNK using a String value.
  */
  public void setSWDBNK(String newvalue)
  {
    fieldSWDBNK.setString(newvalue);
  }

  /**
  * Get value of field SWDBNK as a String.
  */
  public String getSWDBNK()
  {
    return fieldSWDBNK.getString();
  }

  /**
  * Set field SWDCCY using a String value.
  */
  public void setSWDCCY(String newvalue)
  {
    fieldSWDCCY.setString(newvalue);
  }

  /**
  * Get value of field SWDCCY as a String.
  */
  public String getSWDCCY()
  {
    return fieldSWDCCY.getString();
  }

  /**
  * Set field SWDDID using a String value.
  */
  public void setSWDDID(String newvalue)
  {
    fieldSWDDID.setString(newvalue);
  }

  /**
  * Get value of field SWDDID as a String.
  */
  public String getSWDDID()
  {
    return fieldSWDDID.getString();
  }

  /**
  * Set field SWDDSC using a String value.
  */
  public void setSWDDSC(String newvalue)
  {
    fieldSWDDSC.setString(newvalue);
  }

  /**
  * Get value of field SWDDSC as a String.
  */
  public String getSWDDSC()
  {
    return fieldSWDDSC.getString();
  }

  /**
  * Set field SWDREF using a String value.
  */
  public void setSWDREF(String newvalue)
  {
    fieldSWDREF.setString(newvalue);
  }

  /**
  * Get value of field SWDREF as a String.
  */
  public String getSWDREF()
  {
    return fieldSWDREF.getString();
  }

  /**
  * Set field SWDAMN using a String value.
  */
  public void setSWDAMN(String newvalue)
  {
    fieldSWDAMN.setString(newvalue);
  }

  /**
  * Get value of field SWDAMN as a String.
  */
  public String getSWDAMN()
  {
    return fieldSWDAMN.getString();
  }

  /**
  * Set numeric field SWDAMN using a BigDecimal value.
  */
  public void setSWDAMN(BigDecimal newvalue)
  {
    fieldSWDAMN.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field SWDAMN as a BigDecimal.
  */
  public BigDecimal getBigDecimalSWDAMN()
  {
    return fieldSWDAMN.getBigDecimal();
  }

  /**
  * Set field SWDOEQ using a String value.
  */
  public void setSWDOEQ(String newvalue)
  {
    fieldSWDOEQ.setString(newvalue);
  }

  /**
  * Get value of field SWDOEQ as a String.
  */
  public String getSWDOEQ()
  {
    return fieldSWDOEQ.getString();
  }

  /**
  * Set numeric field SWDOEQ using a BigDecimal value.
  */
  public void setSWDOEQ(BigDecimal newvalue)
  {
    fieldSWDOEQ.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field SWDOEQ as a BigDecimal.
  */
  public BigDecimal getBigDecimalSWDOEQ()
  {
    return fieldSWDOEQ.getBigDecimal();
  }

  /**
  * Set field SWDEXR using a String value.
  */
  public void setSWDEXR(String newvalue)
  {
    fieldSWDEXR.setString(newvalue);
  }

  /**
  * Get value of field SWDEXR as a String.
  */
  public String getSWDEXR()
  {
    return fieldSWDEXR.getString();
  }

  /**
  * Set numeric field SWDEXR using a BigDecimal value.
  */
  public void setSWDEXR(BigDecimal newvalue)
  {
    fieldSWDEXR.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field SWDEXR as a BigDecimal.
  */
  public BigDecimal getBigDecimalSWDEXR()
  {
    return fieldSWDEXR.getBigDecimal();
  }

  /**
  * Set field SWDVAL using a String value.
  */
  public void setSWDVAL(String newvalue)
  {
    fieldSWDVAL.setString(newvalue);
  }

  /**
  * Get value of field SWDVAL as a String.
  */
  public String getSWDVAL()
  {
    return fieldSWDVAL.getString();
  }

  /**
  * Set field SWDNME using a String value.
  */
  public void setSWDNME(String newvalue)
  {
    fieldSWDNME.setString(newvalue);
  }

  /**
  * Get value of field SWDNME as a String.
  */
  public String getSWDNME()
  {
    return fieldSWDNME.getString();
  }

  /**
  * Set field SWDREC using a String value.
  */
  public void setSWDREC(String newvalue)
  {
    fieldSWDREC.setString(newvalue);
  }

  /**
  * Get value of field SWDREC as a String.
  */
  public String getSWDREC()
  {
    return fieldSWDREC.getString();
  }

  /**
  * Set numeric field SWDREC using a BigDecimal value.
  */
  public void setSWDREC(BigDecimal newvalue)
  {
    fieldSWDREC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field SWDREC as a BigDecimal.
  */
  public BigDecimal getBigDecimalSWDREC()
  {
    return fieldSWDREC.getBigDecimal();
  }

  /**
  * Set field SWDOPE using a String value.
  */
  public void setSWDOPE(String newvalue)
  {
    fieldSWDOPE.setString(newvalue);
  }

  /**
  * Get value of field SWDOPE as a String.
  */
  public String getSWDOPE()
  {
    return fieldSWDOPE.getString();
  }

}
