package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from EWD0008DS physical file definition.
* 
* File level identifier is 1030122161434.
* Record format level identifier is 623C806EC8272.
*/

public class EWD0008DSMessage extends MessageRecord
{
  final static String fldnames[] = {
                                     "EWDUSR",
                                     "EWDSCA",
                                     "EWDSBK",
                                     "EWDSPR",
                                     "EWDTYP",
                                     "EWDCDE",
                                     "EWDCCY",
                                     "EWDDSC",
                                     "EWDOPE"
                                   };
  final static String tnames[] = {
                                   "EWDUSR",
                                   "EWDSCA",
                                   "EWDSBK",
                                   "EWDSPR",
                                   "EWDTYP",
                                   "EWDCDE",
                                   "EWDCCY",
                                   "EWDDSC",
                                   "EWDOPE"
                                 };
  final static String fid = "1030122161434";
  final static String rid = "623C806EC8272";
  final static String fmtname = "EWD0008DS";
  final int FIELDCOUNT = 9;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldEWDUSR = null;
  private CharacterField fieldEWDSCA = null;
  private CharacterField fieldEWDSBK = null;
  private CharacterField fieldEWDSPR = null;
  private CharacterField fieldEWDTYP = null;
  private CharacterField fieldEWDCDE = null;
  private CharacterField fieldEWDCCY = null;
  private CharacterField fieldEWDDSC = null;
  private CharacterField fieldEWDOPE = null;

  /**
  * Constructor for EWD0008DSMessage.
  */
  public EWD0008DSMessage()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 65;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldEWDUSR =
    new CharacterField(message, HEADERSIZE + 0, 10, "EWDUSR");
    fields[1] = fieldEWDSCA =
    new CharacterField(message, HEADERSIZE + 10, 2, "EWDSCA");
    fields[2] = fieldEWDSBK =
    new CharacterField(message, HEADERSIZE + 12, 2, "EWDSBK");
    fields[3] = fieldEWDSPR =
    new CharacterField(message, HEADERSIZE + 14, 4, "EWDSPR");
    fields[4] = fieldEWDTYP =
    new CharacterField(message, HEADERSIZE + 18, 4, "EWDTYP");
    fields[5] = fieldEWDCDE =
    new CharacterField(message, HEADERSIZE + 22, 4, "EWDCDE");
    fields[6] = fieldEWDCCY =
    new CharacterField(message, HEADERSIZE + 26, 3, "EWDCCY");
    fields[7] = fieldEWDDSC =
    new CharacterField(message, HEADERSIZE + 29, 35, "EWDDSC");
    fields[8] = fieldEWDOPE =
    new CharacterField(message, HEADERSIZE + 64, 1, "EWDOPE");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field EWDUSR using a String value.
  */
  public void setEWDUSR(String newvalue)
  {
    fieldEWDUSR.setString(newvalue);
  }

  /**
  * Get value of field EWDUSR as a String.
  */
  public String getEWDUSR()
  {
    return fieldEWDUSR.getString();
  }

  /**
  * Set field EWDSCA using a String value.
  */
  public void setEWDSCA(String newvalue)
  {
    fieldEWDSCA.setString(newvalue);
  }

  /**
  * Get value of field EWDSCA as a String.
  */
  public String getEWDSCA()
  {
    return fieldEWDSCA.getString();
  }

  /**
  * Set field EWDSBK using a String value.
  */
  public void setEWDSBK(String newvalue)
  {
    fieldEWDSBK.setString(newvalue);
  }

  /**
  * Get value of field EWDSBK as a String.
  */
  public String getEWDSBK()
  {
    return fieldEWDSBK.getString();
  }

  /**
  * Set field EWDSPR using a String value.
  */
  public void setEWDSPR(String newvalue)
  {
    fieldEWDSPR.setString(newvalue);
  }

  /**
  * Get value of field EWDSPR as a String.
  */
  public String getEWDSPR()
  {
    return fieldEWDSPR.getString();
  }

  /**
  * Set field EWDTYP using a String value.
  */
  public void setEWDTYP(String newvalue)
  {
    fieldEWDTYP.setString(newvalue);
  }

  /**
  * Get value of field EWDTYP as a String.
  */
  public String getEWDTYP()
  {
    return fieldEWDTYP.getString();
  }

  /**
  * Set field EWDCDE using a String value.
  */
  public void setEWDCDE(String newvalue)
  {
    fieldEWDCDE.setString(newvalue);
  }

  /**
  * Get value of field EWDCDE as a String.
  */
  public String getEWDCDE()
  {
    return fieldEWDCDE.getString();
  }

  /**
  * Set field EWDCCY using a String value.
  */
  public void setEWDCCY(String newvalue)
  {
    fieldEWDCCY.setString(newvalue);
  }

  /**
  * Get value of field EWDCCY as a String.
  */
  public String getEWDCCY()
  {
    return fieldEWDCCY.getString();
  }

  /**
  * Set field EWDDSC using a String value.
  */
  public void setEWDDSC(String newvalue)
  {
    fieldEWDDSC.setString(newvalue);
  }

  /**
  * Get value of field EWDDSC as a String.
  */
  public String getEWDDSC()
  {
    return fieldEWDDSC.getString();
  }

  /**
  * Set field EWDOPE using a String value.
  */
  public void setEWDOPE(String newvalue)
  {
    fieldEWDOPE.setString(newvalue);
  }

  /**
  * Get value of field EWDOPE as a String.
  */
  public String getEWDOPE()
  {
    return fieldEWDOPE.getString();
  }

}
