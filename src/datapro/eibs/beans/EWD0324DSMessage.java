package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from EWD0324DS physical file definition.
* 
* File level identifier is 1060822183951.
* Record format level identifier is 3EF5CE578A614.
*/

public class EWD0324DSMessage extends MessageRecord
{
  final static String fldnames[] = {
                                     "RWDUSR",
                                     "RWDTYP",
                                     "RWDFRC",
                                     "SWDBNK",
                                     "SWDTYP",
                                     "SWDDSC",
                                     "SWDTNR",
                                     "SWDTNU",
                                     "SWDPER",
                                     "SWDREC",
                                     "SWDOPE"
                                   };
  final static String tnames[] = {
                                   "RWDUSR",
                                   "RWDTYP",
                                   "RWDFRC",
                                   "SWDBNK",
                                   "SWDTYP",
                                   "SWDDSC",
                                   "SWDTNR",
                                   "SWDTNU",
                                   "SWDPER",
                                   "SWDREC",
                                   "SWDOPE"
                                 };
  final static String fid = "1060822183951";
  final static String rid = "3EF5CE578A614";
  final static String fmtname = "EWD0324DS";
  final int FIELDCOUNT = 11;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldRWDUSR = null;
  private CharacterField fieldRWDTYP = null;
  private DecimalField fieldRWDFRC = null;
  private CharacterField fieldSWDBNK = null;
  private CharacterField fieldSWDTYP = null;
  private CharacterField fieldSWDDSC = null;
  private DecimalField fieldSWDTNR = null;
  private DecimalField fieldSWDTNU = null;
  private DecimalField fieldSWDPER = null;
  private DecimalField fieldSWDREC = null;
  private CharacterField fieldSWDOPE = null;

  /**
  * Constructor for EWD0324DSMessage.
  */
  public EWD0324DSMessage()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 87;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldRWDUSR =
    new CharacterField(message, HEADERSIZE + 0, 10, "RWDUSR");
    fields[1] = fieldRWDTYP =
    new CharacterField(message, HEADERSIZE + 10, 1, "RWDTYP");
    fields[2] = fieldRWDFRC =
    new DecimalField(message, HEADERSIZE + 11, 8, 0, "RWDFRC");
    fields[3] = fieldSWDBNK =
    new CharacterField(message, HEADERSIZE + 19, 2, "SWDBNK");
    fields[4] = fieldSWDTYP =
    new CharacterField(message, HEADERSIZE + 21, 4, "SWDTYP");
    fields[5] = fieldSWDDSC =
    new CharacterField(message, HEADERSIZE + 25, 35, "SWDDSC");
    fields[6] = fieldSWDTNR =
    new DecimalField(message, HEADERSIZE + 60, 5, 0, "SWDTNR");
    fields[7] = fieldSWDTNU =
    new DecimalField(message, HEADERSIZE + 65, 5, 0, "SWDTNU");
    fields[8] = fieldSWDPER =
    new DecimalField(message, HEADERSIZE + 70, 8, 3, "SWDPER");
    fields[9] = fieldSWDREC =
    new DecimalField(message, HEADERSIZE + 78, 8, 0, "SWDREC");
    fields[10] = fieldSWDOPE =
    new CharacterField(message, HEADERSIZE + 86, 1, "SWDOPE");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field RWDUSR using a String value.
  */
  public void setRWDUSR(String newvalue)
  {
    fieldRWDUSR.setString(newvalue);
  }

  /**
  * Get value of field RWDUSR as a String.
  */
  public String getRWDUSR()
  {
    return fieldRWDUSR.getString();
  }

  /**
  * Set field RWDTYP using a String value.
  */
  public void setRWDTYP(String newvalue)
  {
    fieldRWDTYP.setString(newvalue);
  }

  /**
  * Get value of field RWDTYP as a String.
  */
  public String getRWDTYP()
  {
    return fieldRWDTYP.getString();
  }

  /**
  * Set field RWDFRC using a String value.
  */
  public void setRWDFRC(String newvalue)
  {
    fieldRWDFRC.setString(newvalue);
  }

  /**
  * Get value of field RWDFRC as a String.
  */
  public String getRWDFRC()
  {
    return fieldRWDFRC.getString();
  }

  /**
  * Set numeric field RWDFRC using a BigDecimal value.
  */
  public void setRWDFRC(BigDecimal newvalue)
  {
    fieldRWDFRC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field RWDFRC as a BigDecimal.
  */
  public BigDecimal getBigDecimalRWDFRC()
  {
    return fieldRWDFRC.getBigDecimal();
  }

  /**
  * Set field SWDBNK using a String value.
  */
  public void setSWDBNK(String newvalue)
  {
    fieldSWDBNK.setString(newvalue);
  }

  /**
  * Get value of field SWDBNK as a String.
  */
  public String getSWDBNK()
  {
    return fieldSWDBNK.getString();
  }

  /**
  * Set field SWDTYP using a String value.
  */
  public void setSWDTYP(String newvalue)
  {
    fieldSWDTYP.setString(newvalue);
  }

  /**
  * Get value of field SWDTYP as a String.
  */
  public String getSWDTYP()
  {
    return fieldSWDTYP.getString();
  }

  /**
  * Set field SWDDSC using a String value.
  */
  public void setSWDDSC(String newvalue)
  {
    fieldSWDDSC.setString(newvalue);
  }

  /**
  * Get value of field SWDDSC as a String.
  */
  public String getSWDDSC()
  {
    return fieldSWDDSC.getString();
  }

  /**
  * Set field SWDTNR using a String value.
  */
  public void setSWDTNR(String newvalue)
  {
    fieldSWDTNR.setString(newvalue);
  }

  /**
  * Get value of field SWDTNR as a String.
  */
  public String getSWDTNR()
  {
    return fieldSWDTNR.getString();
  }

  /**
  * Set numeric field SWDTNR using a BigDecimal value.
  */
  public void setSWDTNR(BigDecimal newvalue)
  {
    fieldSWDTNR.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field SWDTNR as a BigDecimal.
  */
  public BigDecimal getBigDecimalSWDTNR()
  {
    return fieldSWDTNR.getBigDecimal();
  }

  /**
  * Set field SWDTNU using a String value.
  */
  public void setSWDTNU(String newvalue)
  {
    fieldSWDTNU.setString(newvalue);
  }

  /**
  * Get value of field SWDTNU as a String.
  */
  public String getSWDTNU()
  {
    return fieldSWDTNU.getString();
  }

  /**
  * Set numeric field SWDTNU using a BigDecimal value.
  */
  public void setSWDTNU(BigDecimal newvalue)
  {
    fieldSWDTNU.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field SWDTNU as a BigDecimal.
  */
  public BigDecimal getBigDecimalSWDTNU()
  {
    return fieldSWDTNU.getBigDecimal();
  }

  /**
  * Set field SWDPER using a String value.
  */
  public void setSWDPER(String newvalue)
  {
    fieldSWDPER.setString(newvalue);
  }

  /**
  * Get value of field SWDPER as a String.
  */
  public String getSWDPER()
  {
    return fieldSWDPER.getString();
  }

  /**
  * Set numeric field SWDPER using a BigDecimal value.
  */
  public void setSWDPER(BigDecimal newvalue)
  {
    fieldSWDPER.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field SWDPER as a BigDecimal.
  */
  public BigDecimal getBigDecimalSWDPER()
  {
    return fieldSWDPER.getBigDecimal();
  }

  /**
  * Set field SWDREC using a String value.
  */
  public void setSWDREC(String newvalue)
  {
    fieldSWDREC.setString(newvalue);
  }

  /**
  * Get value of field SWDREC as a String.
  */
  public String getSWDREC()
  {
    return fieldSWDREC.getString();
  }

  /**
  * Set numeric field SWDREC using a BigDecimal value.
  */
  public void setSWDREC(BigDecimal newvalue)
  {
    fieldSWDREC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field SWDREC as a BigDecimal.
  */
  public BigDecimal getBigDecimalSWDREC()
  {
    return fieldSWDREC.getBigDecimal();
  }

  /**
  * Set field SWDOPE using a String value.
  */
  public void setSWDOPE(String newvalue)
  {
    fieldSWDOPE.setString(newvalue);
  }

  /**
  * Get value of field SWDOPE as a String.
  */
  public String getSWDOPE()
  {
    return fieldSWDOPE.getString();
  }

}
