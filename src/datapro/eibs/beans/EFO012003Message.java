package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from EFO012003 physical file definition.
* 
* File level identifier is 1070813114252.
* Record format level identifier is 4081994D33D15.
*/

public class EFO012003Message extends MessageRecord
{
  final static String fldnames[] = {
                                     "H03USERID",
                                     "H03PROGRM",
                                     "H03TIMSYS",
                                     "H03SCRCOD",
                                     "H03OPECOD",
                                     "H03FLGMAS",
                                     "H03FLGWK1",
                                     "H03FLGWK2",
                                     "H03FLGWK3",
                                     "E03APCBNK",
                                     "E03APCCDE",
                                     "E03APCCCY",
                                     "E03APCTYP",
                                     "E03APCCDT",
                                     "E03APCDSC",
                                     "E03NUMREC",
                                     "E03INDOPE"
                                   };
  final static String tnames[] = {
                                   "H03USERID",
                                   "H03PROGRM",
                                   "H03TIMSYS",
                                   "H03SCRCOD",
                                   "H03OPECOD",
                                   "H03FLGMAS",
                                   "H03FLGWK1",
                                   "H03FLGWK2",
                                   "H03FLGWK3",
                                   "E03APCBNK",
                                   "E03APCCDE",
                                   "E03APCCCY",
                                   "E03APCTYP",
                                   "E03APCCDT",
                                   "E03APCDSC",
                                   "E03NUMREC",
                                   "E03INDOPE"
                                 };
  final static String fid = "1070813114252";
  final static String rid = "4081994D33D15";
  final static String fmtname = "EFO012003";
  final int FIELDCOUNT = 17;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldH03USERID = null;
  private CharacterField fieldH03PROGRM = null;
  private CharacterField fieldH03TIMSYS = null;
  private CharacterField fieldH03SCRCOD = null;
  private CharacterField fieldH03OPECOD = null;
  private CharacterField fieldH03FLGMAS = null;
  private CharacterField fieldH03FLGWK1 = null;
  private CharacterField fieldH03FLGWK2 = null;
  private CharacterField fieldH03FLGWK3 = null;
  private CharacterField fieldE03APCBNK = null;
  private CharacterField fieldE03APCCDE = null;
  private CharacterField fieldE03APCCCY = null;
  private CharacterField fieldE03APCTYP = null;
  private CharacterField fieldE03APCCDT = null;
  private CharacterField fieldE03APCDSC = null;
  private DecimalField fieldE03NUMREC = null;
  private CharacterField fieldE03INDOPE = null;

  /**
  * Constructor for EFO012003Message.
  */
  public EFO012003Message()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 142;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldH03USERID =
    new CharacterField(message, HEADERSIZE + 0, 10, "H03USERID");
    fields[1] = fieldH03PROGRM =
    new CharacterField(message, HEADERSIZE + 10, 10, "H03PROGRM");
    fields[2] = fieldH03TIMSYS =
    new CharacterField(message, HEADERSIZE + 20, 12, "H03TIMSYS");
    fields[3] = fieldH03SCRCOD =
    new CharacterField(message, HEADERSIZE + 32, 2, "H03SCRCOD");
    fields[4] = fieldH03OPECOD =
    new CharacterField(message, HEADERSIZE + 34, 4, "H03OPECOD");
    fields[5] = fieldH03FLGMAS =
    new CharacterField(message, HEADERSIZE + 38, 1, "H03FLGMAS");
    fields[6] = fieldH03FLGWK1 =
    new CharacterField(message, HEADERSIZE + 39, 1, "H03FLGWK1");
    fields[7] = fieldH03FLGWK2 =
    new CharacterField(message, HEADERSIZE + 40, 1, "H03FLGWK2");
    fields[8] = fieldH03FLGWK3 =
    new CharacterField(message, HEADERSIZE + 41, 1, "H03FLGWK3");
    fields[9] = fieldE03APCBNK =
    new CharacterField(message, HEADERSIZE + 42, 2, "E03APCBNK");
    fields[10] = fieldE03APCCDE =
    new CharacterField(message, HEADERSIZE + 44, 4, "E03APCCDE");
    fields[11] = fieldE03APCCCY =
    new CharacterField(message, HEADERSIZE + 48, 3, "E03APCCCY");
    fields[12] = fieldE03APCTYP =
    new CharacterField(message, HEADERSIZE + 51, 3, "E03APCTYP");
    fields[13] = fieldE03APCCDT =
    new CharacterField(message, HEADERSIZE + 54, 1, "E03APCCDT");
    fields[14] = fieldE03APCDSC =
    new CharacterField(message, HEADERSIZE + 55, 78, "E03APCDSC");
    fields[15] = fieldE03NUMREC =
    new DecimalField(message, HEADERSIZE + 133, 8, 0, "E03NUMREC");
    fields[16] = fieldE03INDOPE =
    new CharacterField(message, HEADERSIZE + 141, 1, "E03INDOPE");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field H03USERID using a String value.
  */
  public void setH03USERID(String newvalue)
  {
    fieldH03USERID.setString(newvalue);
  }

  /**
  * Get value of field H03USERID as a String.
  */
  public String getH03USERID()
  {
    return fieldH03USERID.getString();
  }

  /**
  * Set field H03PROGRM using a String value.
  */
  public void setH03PROGRM(String newvalue)
  {
    fieldH03PROGRM.setString(newvalue);
  }

  /**
  * Get value of field H03PROGRM as a String.
  */
  public String getH03PROGRM()
  {
    return fieldH03PROGRM.getString();
  }

  /**
  * Set field H03TIMSYS using a String value.
  */
  public void setH03TIMSYS(String newvalue)
  {
    fieldH03TIMSYS.setString(newvalue);
  }

  /**
  * Get value of field H03TIMSYS as a String.
  */
  public String getH03TIMSYS()
  {
    return fieldH03TIMSYS.getString();
  }

  /**
  * Set field H03SCRCOD using a String value.
  */
  public void setH03SCRCOD(String newvalue)
  {
    fieldH03SCRCOD.setString(newvalue);
  }

  /**
  * Get value of field H03SCRCOD as a String.
  */
  public String getH03SCRCOD()
  {
    return fieldH03SCRCOD.getString();
  }

  /**
  * Set field H03OPECOD using a String value.
  */
  public void setH03OPECOD(String newvalue)
  {
    fieldH03OPECOD.setString(newvalue);
  }

  /**
  * Get value of field H03OPECOD as a String.
  */
  public String getH03OPECOD()
  {
    return fieldH03OPECOD.getString();
  }

  /**
  * Set field H03FLGMAS using a String value.
  */
  public void setH03FLGMAS(String newvalue)
  {
    fieldH03FLGMAS.setString(newvalue);
  }

  /**
  * Get value of field H03FLGMAS as a String.
  */
  public String getH03FLGMAS()
  {
    return fieldH03FLGMAS.getString();
  }

  /**
  * Set field H03FLGWK1 using a String value.
  */
  public void setH03FLGWK1(String newvalue)
  {
    fieldH03FLGWK1.setString(newvalue);
  }

  /**
  * Get value of field H03FLGWK1 as a String.
  */
  public String getH03FLGWK1()
  {
    return fieldH03FLGWK1.getString();
  }

  /**
  * Set field H03FLGWK2 using a String value.
  */
  public void setH03FLGWK2(String newvalue)
  {
    fieldH03FLGWK2.setString(newvalue);
  }

  /**
  * Get value of field H03FLGWK2 as a String.
  */
  public String getH03FLGWK2()
  {
    return fieldH03FLGWK2.getString();
  }

  /**
  * Set field H03FLGWK3 using a String value.
  */
  public void setH03FLGWK3(String newvalue)
  {
    fieldH03FLGWK3.setString(newvalue);
  }

  /**
  * Get value of field H03FLGWK3 as a String.
  */
  public String getH03FLGWK3()
  {
    return fieldH03FLGWK3.getString();
  }

  /**
  * Set field E03APCBNK using a String value.
  */
  public void setE03APCBNK(String newvalue)
  {
    fieldE03APCBNK.setString(newvalue);
  }

  /**
  * Get value of field E03APCBNK as a String.
  */
  public String getE03APCBNK()
  {
    return fieldE03APCBNK.getString();
  }

  /**
  * Set field E03APCCDE using a String value.
  */
  public void setE03APCCDE(String newvalue)
  {
    fieldE03APCCDE.setString(newvalue);
  }

  /**
  * Get value of field E03APCCDE as a String.
  */
  public String getE03APCCDE()
  {
    return fieldE03APCCDE.getString();
  }

  /**
  * Set field E03APCCCY using a String value.
  */
  public void setE03APCCCY(String newvalue)
  {
    fieldE03APCCCY.setString(newvalue);
  }

  /**
  * Get value of field E03APCCCY as a String.
  */
  public String getE03APCCCY()
  {
    return fieldE03APCCCY.getString();
  }

  /**
  * Set field E03APCTYP using a String value.
  */
  public void setE03APCTYP(String newvalue)
  {
    fieldE03APCTYP.setString(newvalue);
  }

  /**
  * Get value of field E03APCTYP as a String.
  */
  public String getE03APCTYP()
  {
    return fieldE03APCTYP.getString();
  }

  /**
  * Set field E03APCCDT using a String value.
  */
  public void setE03APCCDT(String newvalue)
  {
    fieldE03APCCDT.setString(newvalue);
  }

  /**
  * Get value of field E03APCCDT as a String.
  */
  public String getE03APCCDT()
  {
    return fieldE03APCCDT.getString();
  }

  /**
  * Set field E03APCDSC using a String value.
  */
  public void setE03APCDSC(String newvalue)
  {
    fieldE03APCDSC.setString(newvalue);
  }

  /**
  * Get value of field E03APCDSC as a String.
  */
  public String getE03APCDSC()
  {
    return fieldE03APCDSC.getString();
  }

  /**
  * Set field E03NUMREC using a String value.
  */
  public void setE03NUMREC(String newvalue)
  {
    fieldE03NUMREC.setString(newvalue);
  }

  /**
  * Get value of field E03NUMREC as a String.
  */
  public String getE03NUMREC()
  {
    return fieldE03NUMREC.getString();
  }

  /**
  * Set numeric field E03NUMREC using a BigDecimal value.
  */
  public void setE03NUMREC(BigDecimal newvalue)
  {
    fieldE03NUMREC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E03NUMREC as a BigDecimal.
  */
  public BigDecimal getBigDecimalE03NUMREC()
  {
    return fieldE03NUMREC.getBigDecimal();
  }

  /**
  * Set field E03INDOPE using a String value.
  */
  public void setE03INDOPE(String newvalue)
  {
    fieldE03INDOPE.setString(newvalue);
  }

  /**
  * Get value of field E03INDOPE as a String.
  */
  public String getE03INDOPE()
  {
    return fieldE03INDOPE.getString();
  }

}
