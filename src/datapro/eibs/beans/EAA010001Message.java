package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from EAA010001 physical file definition.
* 
* File level identifier is 1040626160224.
* Record format level identifier is 4E5449FB8F3CD.
*/

public class EAA010001Message extends MessageRecord
{
  final static String fldnames[] = {
                                     "H01USERID",
                                     "H01PROGRM",
                                     "H01TIMSYS",
                                     "H01SCRCOD",
                                     "H01OPECOD",
                                     "H01FLGMAS",
                                     "H01FLGWK1",
                                     "H01FLGWK2",
                                     "H01FLGWK3",
                                     "E01AACACC",
                                     "E01AACSELT",
                                     "E01AADLCOD",
                                     "E01AACTRC",
                                     "E01AADESC",
                                     "E01AACCST",
                                     "E01AACOPE"
                                   };
  final static String tnames[] = {
                                   "H01USERID",
                                   "H01PROGRM",
                                   "H01TIMSYS",
                                   "H01SCRCOD",
                                   "H01OPECOD",
                                   "H01FLGMAS",
                                   "H01FLGWK1",
                                   "H01FLGWK2",
                                   "H01FLGWK3",
                                   "E01AACACC",
                                   "E01AACSELT",
                                   "E01AADLCOD",
                                   "E01AACTRC",
                                   "E01AADESC",
                                   "E01AACCST",
                                   "E01AACOPE"
                                 };
  final static String fid = "1040626160224";
  final static String rid = "4E5449FB8F3CD";
  final static String fmtname = "EAA010001";
  final int FIELDCOUNT = 16;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldH01USERID = null;
  private CharacterField fieldH01PROGRM = null;
  private CharacterField fieldH01TIMSYS = null;
  private CharacterField fieldH01SCRCOD = null;
  private CharacterField fieldH01OPECOD = null;
  private CharacterField fieldH01FLGMAS = null;
  private CharacterField fieldH01FLGWK1 = null;
  private CharacterField fieldH01FLGWK2 = null;
  private CharacterField fieldH01FLGWK3 = null;
  private DecimalField fieldE01AACACC = null;
  private CharacterField fieldE01AACSELT = null;
  private CharacterField fieldE01AADLCOD = null;
  private CharacterField fieldE01AACTRC = null;
  private CharacterField fieldE01AADESC = null;
  private DecimalField fieldE01AACCST = null;
  private CharacterField fieldE01AACOPE = null;

  /**
  * Constructor for EAA010001Message.
  */
  public EAA010001Message()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 104;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldH01USERID =
    new CharacterField(message, HEADERSIZE + 0, 10, "H01USERID");
    fields[1] = fieldH01PROGRM =
    new CharacterField(message, HEADERSIZE + 10, 10, "H01PROGRM");
    fields[2] = fieldH01TIMSYS =
    new CharacterField(message, HEADERSIZE + 20, 12, "H01TIMSYS");
    fields[3] = fieldH01SCRCOD =
    new CharacterField(message, HEADERSIZE + 32, 2, "H01SCRCOD");
    fields[4] = fieldH01OPECOD =
    new CharacterField(message, HEADERSIZE + 34, 4, "H01OPECOD");
    fields[5] = fieldH01FLGMAS =
    new CharacterField(message, HEADERSIZE + 38, 1, "H01FLGMAS");
    fields[6] = fieldH01FLGWK1 =
    new CharacterField(message, HEADERSIZE + 39, 1, "H01FLGWK1");
    fields[7] = fieldH01FLGWK2 =
    new CharacterField(message, HEADERSIZE + 40, 1, "H01FLGWK2");
    fields[8] = fieldH01FLGWK3 =
    new CharacterField(message, HEADERSIZE + 41, 1, "H01FLGWK3");
    fields[9] = fieldE01AACACC =
    new DecimalField(message, HEADERSIZE + 42, 13, 0, "E01AACACC");
    fields[10] = fieldE01AACSELT =
    new CharacterField(message, HEADERSIZE + 55, 1, "E01AACSELT");
    fields[11] = fieldE01AADLCOD =
    new CharacterField(message, HEADERSIZE + 56, 1, "E01AADLCOD");
    fields[12] = fieldE01AACTRC =
    new CharacterField(message, HEADERSIZE + 57, 2, "E01AACTRC");
    fields[13] = fieldE01AADESC =
    new CharacterField(message, HEADERSIZE + 59, 35, "E01AADESC");
    fields[14] = fieldE01AACCST =
    new DecimalField(message, HEADERSIZE + 94, 9, 3, "E01AACCST");
    fields[15] = fieldE01AACOPE =
    new CharacterField(message, HEADERSIZE + 103, 1, "E01AACOPE");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field H01USERID using a String value.
  */
  public void setH01USERID(String newvalue)
  {
    fieldH01USERID.setString(newvalue);
  }

  /**
  * Get value of field H01USERID as a String.
  */
  public String getH01USERID()
  {
    return fieldH01USERID.getString();
  }

  /**
  * Set field H01PROGRM using a String value.
  */
  public void setH01PROGRM(String newvalue)
  {
    fieldH01PROGRM.setString(newvalue);
  }

  /**
  * Get value of field H01PROGRM as a String.
  */
  public String getH01PROGRM()
  {
    return fieldH01PROGRM.getString();
  }

  /**
  * Set field H01TIMSYS using a String value.
  */
  public void setH01TIMSYS(String newvalue)
  {
    fieldH01TIMSYS.setString(newvalue);
  }

  /**
  * Get value of field H01TIMSYS as a String.
  */
  public String getH01TIMSYS()
  {
    return fieldH01TIMSYS.getString();
  }

  /**
  * Set field H01SCRCOD using a String value.
  */
  public void setH01SCRCOD(String newvalue)
  {
    fieldH01SCRCOD.setString(newvalue);
  }

  /**
  * Get value of field H01SCRCOD as a String.
  */
  public String getH01SCRCOD()
  {
    return fieldH01SCRCOD.getString();
  }

  /**
  * Set field H01OPECOD using a String value.
  */
  public void setH01OPECOD(String newvalue)
  {
    fieldH01OPECOD.setString(newvalue);
  }

  /**
  * Get value of field H01OPECOD as a String.
  */
  public String getH01OPECOD()
  {
    return fieldH01OPECOD.getString();
  }

  /**
  * Set field H01FLGMAS using a String value.
  */
  public void setH01FLGMAS(String newvalue)
  {
    fieldH01FLGMAS.setString(newvalue);
  }

  /**
  * Get value of field H01FLGMAS as a String.
  */
  public String getH01FLGMAS()
  {
    return fieldH01FLGMAS.getString();
  }

  /**
  * Set field H01FLGWK1 using a String value.
  */
  public void setH01FLGWK1(String newvalue)
  {
    fieldH01FLGWK1.setString(newvalue);
  }

  /**
  * Get value of field H01FLGWK1 as a String.
  */
  public String getH01FLGWK1()
  {
    return fieldH01FLGWK1.getString();
  }

  /**
  * Set field H01FLGWK2 using a String value.
  */
  public void setH01FLGWK2(String newvalue)
  {
    fieldH01FLGWK2.setString(newvalue);
  }

  /**
  * Get value of field H01FLGWK2 as a String.
  */
  public String getH01FLGWK2()
  {
    return fieldH01FLGWK2.getString();
  }

  /**
  * Set field H01FLGWK3 using a String value.
  */
  public void setH01FLGWK3(String newvalue)
  {
    fieldH01FLGWK3.setString(newvalue);
  }

  /**
  * Get value of field H01FLGWK3 as a String.
  */
  public String getH01FLGWK3()
  {
    return fieldH01FLGWK3.getString();
  }

  /**
  * Set field E01AACACC using a String value.
  */
  public void setE01AACACC(String newvalue)
  {
    fieldE01AACACC.setString(newvalue);
  }

  /**
  * Get value of field E01AACACC as a String.
  */
  public String getE01AACACC()
  {
    return fieldE01AACACC.getString();
  }

  /**
  * Set numeric field E01AACACC using a BigDecimal value.
  */
  public void setE01AACACC(BigDecimal newvalue)
  {
    fieldE01AACACC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E01AACACC as a BigDecimal.
  */
  public BigDecimal getBigDecimalE01AACACC()
  {
    return fieldE01AACACC.getBigDecimal();
  }

  /**
  * Set field E01AACSELT using a String value.
  */
  public void setE01AACSELT(String newvalue)
  {
    fieldE01AACSELT.setString(newvalue);
  }

  /**
  * Get value of field E01AACSELT as a String.
  */
  public String getE01AACSELT()
  {
    return fieldE01AACSELT.getString();
  }

  /**
  * Set field E01AADLCOD using a String value.
  */
  public void setE01AADLCOD(String newvalue)
  {
    fieldE01AADLCOD.setString(newvalue);
  }

  /**
  * Get value of field E01AADLCOD as a String.
  */
  public String getE01AADLCOD()
  {
    return fieldE01AADLCOD.getString();
  }

  /**
  * Set field E01AACTRC using a String value.
  */
  public void setE01AACTRC(String newvalue)
  {
    fieldE01AACTRC.setString(newvalue);
  }

  /**
  * Get value of field E01AACTRC as a String.
  */
  public String getE01AACTRC()
  {
    return fieldE01AACTRC.getString();
  }

  /**
  * Set field E01AADESC using a String value.
  */
  public void setE01AADESC(String newvalue)
  {
    fieldE01AADESC.setString(newvalue);
  }

  /**
  * Get value of field E01AADESC as a String.
  */
  public String getE01AADESC()
  {
    return fieldE01AADESC.getString();
  }

  /**
  * Set field E01AACCST using a String value.
  */
  public void setE01AACCST(String newvalue)
  {
    fieldE01AACCST.setString(newvalue);
  }

  /**
  * Get value of field E01AACCST as a String.
  */
  public String getE01AACCST()
  {
    return fieldE01AACCST.getString();
  }

  /**
  * Set numeric field E01AACCST using a BigDecimal value.
  */
  public void setE01AACCST(BigDecimal newvalue)
  {
    fieldE01AACCST.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E01AACCST as a BigDecimal.
  */
  public BigDecimal getBigDecimalE01AACCST()
  {
    return fieldE01AACCST.getBigDecimal();
  }

  /**
  * Set field E01AACOPE using a String value.
  */
  public void setE01AACOPE(String newvalue)
  {
    fieldE01AACOPE.setString(newvalue);
  }

  /**
  * Get value of field E01AACOPE as a String.
  */
  public String getE01AACOPE()
  {
    return fieldE01AACOPE.getString();
  }

}
