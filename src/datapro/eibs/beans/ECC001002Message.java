package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from ECC001002 physical file definition.
* 
* File level identifier is 1050721135024.
* Record format level identifier is 4D7C9E72BA44A.
*/

public class ECC001002Message extends MessageRecord
{
  final static String fldnames[] = {
                                     "H02USERID",
                                     "H02PROGRM",
                                     "H02TIMSYS",
                                     "H02SCRCOD",
                                     "H02OPECOD",
                                     "H02FLGMAS",
                                     "H02FLGWK1",
                                     "H02FLGWK2",
                                     "H02FLGWK3",
                                     "E02CCMACC",
                                     "E02CCMPRO",
                                     "E02CCMCUN",
                                     "E02CUSNA1",
                                     "E02CCMAST",
                                     "E02CCMLSM",
                                     "E02CCMLSD",
                                     "E02CCMLSY",
                                     "F02CCMAST",
                                     "F02CCMLSM",
                                     "F02CCMLSD",
                                     "F02CCMLSY"
                                   };
  final static String tnames[] = {
                                   "H02USERID",
                                   "H02PROGRM",
                                   "H02TIMSYS",
                                   "H02SCRCOD",
                                   "H02OPECOD",
                                   "H02FLGMAS",
                                   "H02FLGWK1",
                                   "H02FLGWK2",
                                   "H02FLGWK3",
                                   "E02CCMACC",
                                   "E02CCMPRO",
                                   "E02CCMCUN",
                                   "E02CUSNA1",
                                   "E02CCMAST",
                                   "E02CCMLSM",
                                   "E02CCMLSD",
                                   "E02CCMLSY",
                                   "F02CCMAST",
                                   "F02CCMLSM",
                                   "F02CCMLSD",
                                   "F02CCMLSY"
                                 };
  final static String fid = "1050721135024";
  final static String rid = "4D7C9E72BA44A";
  final static String fmtname = "ECC001002";
  final int FIELDCOUNT = 21;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldH02USERID = null;
  private CharacterField fieldH02PROGRM = null;
  private CharacterField fieldH02TIMSYS = null;
  private CharacterField fieldH02SCRCOD = null;
  private CharacterField fieldH02OPECOD = null;
  private CharacterField fieldH02FLGMAS = null;
  private CharacterField fieldH02FLGWK1 = null;
  private CharacterField fieldH02FLGWK2 = null;
  private CharacterField fieldH02FLGWK3 = null;
  private DecimalField fieldE02CCMACC = null;
  private CharacterField fieldE02CCMPRO = null;
  private DecimalField fieldE02CCMCUN = null;
  private CharacterField fieldE02CUSNA1 = null;
  private CharacterField fieldE02CCMAST = null;
  private DecimalField fieldE02CCMLSM = null;
  private DecimalField fieldE02CCMLSD = null;
  private DecimalField fieldE02CCMLSY = null;
  private CharacterField fieldF02CCMAST = null;
  private CharacterField fieldF02CCMLSM = null;
  private CharacterField fieldF02CCMLSD = null;
  private CharacterField fieldF02CCMLSY = null;

  /**
  * Constructor for ECC001002Message.
  */
  public ECC001002Message()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 130;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldH02USERID =
    new CharacterField(message, HEADERSIZE + 0, 10, "H02USERID");
    fields[1] = fieldH02PROGRM =
    new CharacterField(message, HEADERSIZE + 10, 10, "H02PROGRM");
    fields[2] = fieldH02TIMSYS =
    new CharacterField(message, HEADERSIZE + 20, 12, "H02TIMSYS");
    fields[3] = fieldH02SCRCOD =
    new CharacterField(message, HEADERSIZE + 32, 2, "H02SCRCOD");
    fields[4] = fieldH02OPECOD =
    new CharacterField(message, HEADERSIZE + 34, 4, "H02OPECOD");
    fields[5] = fieldH02FLGMAS =
    new CharacterField(message, HEADERSIZE + 38, 1, "H02FLGMAS");
    fields[6] = fieldH02FLGWK1 =
    new CharacterField(message, HEADERSIZE + 39, 1, "H02FLGWK1");
    fields[7] = fieldH02FLGWK2 =
    new CharacterField(message, HEADERSIZE + 40, 1, "H02FLGWK2");
    fields[8] = fieldH02FLGWK3 =
    new CharacterField(message, HEADERSIZE + 41, 1, "H02FLGWK3");
    fields[9] = fieldE02CCMACC =
    new DecimalField(message, HEADERSIZE + 42, 13, 0, "E02CCMACC");
    fields[10] = fieldE02CCMPRO =
    new CharacterField(message, HEADERSIZE + 55, 4, "E02CCMPRO");
    fields[11] = fieldE02CCMCUN =
    new DecimalField(message, HEADERSIZE + 59, 10, 0, "E02CCMCUN");
    fields[12] = fieldE02CUSNA1 =
    new CharacterField(message, HEADERSIZE + 69, 45, "E02CUSNA1");
    fields[13] = fieldE02CCMAST =
    new CharacterField(message, HEADERSIZE + 114, 1, "E02CCMAST");
    fields[14] = fieldE02CCMLSM =
    new DecimalField(message, HEADERSIZE + 115, 3, 0, "E02CCMLSM");
    fields[15] = fieldE02CCMLSD =
    new DecimalField(message, HEADERSIZE + 118, 3, 0, "E02CCMLSD");
    fields[16] = fieldE02CCMLSY =
    new DecimalField(message, HEADERSIZE + 121, 5, 0, "E02CCMLSY");
    fields[17] = fieldF02CCMAST =
    new CharacterField(message, HEADERSIZE + 126, 1, "F02CCMAST");
    fields[18] = fieldF02CCMLSM =
    new CharacterField(message, HEADERSIZE + 127, 1, "F02CCMLSM");
    fields[19] = fieldF02CCMLSD =
    new CharacterField(message, HEADERSIZE + 128, 1, "F02CCMLSD");
    fields[20] = fieldF02CCMLSY =
    new CharacterField(message, HEADERSIZE + 129, 1, "F02CCMLSY");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field H02USERID using a String value.
  */
  public void setH02USERID(String newvalue)
  {
    fieldH02USERID.setString(newvalue);
  }

  /**
  * Get value of field H02USERID as a String.
  */
  public String getH02USERID()
  {
    return fieldH02USERID.getString();
  }

  /**
  * Set field H02PROGRM using a String value.
  */
  public void setH02PROGRM(String newvalue)
  {
    fieldH02PROGRM.setString(newvalue);
  }

  /**
  * Get value of field H02PROGRM as a String.
  */
  public String getH02PROGRM()
  {
    return fieldH02PROGRM.getString();
  }

  /**
  * Set field H02TIMSYS using a String value.
  */
  public void setH02TIMSYS(String newvalue)
  {
    fieldH02TIMSYS.setString(newvalue);
  }

  /**
  * Get value of field H02TIMSYS as a String.
  */
  public String getH02TIMSYS()
  {
    return fieldH02TIMSYS.getString();
  }

  /**
  * Set field H02SCRCOD using a String value.
  */
  public void setH02SCRCOD(String newvalue)
  {
    fieldH02SCRCOD.setString(newvalue);
  }

  /**
  * Get value of field H02SCRCOD as a String.
  */
  public String getH02SCRCOD()
  {
    return fieldH02SCRCOD.getString();
  }

  /**
  * Set field H02OPECOD using a String value.
  */
  public void setH02OPECOD(String newvalue)
  {
    fieldH02OPECOD.setString(newvalue);
  }

  /**
  * Get value of field H02OPECOD as a String.
  */
  public String getH02OPECOD()
  {
    return fieldH02OPECOD.getString();
  }

  /**
  * Set field H02FLGMAS using a String value.
  */
  public void setH02FLGMAS(String newvalue)
  {
    fieldH02FLGMAS.setString(newvalue);
  }

  /**
  * Get value of field H02FLGMAS as a String.
  */
  public String getH02FLGMAS()
  {
    return fieldH02FLGMAS.getString();
  }

  /**
  * Set field H02FLGWK1 using a String value.
  */
  public void setH02FLGWK1(String newvalue)
  {
    fieldH02FLGWK1.setString(newvalue);
  }

  /**
  * Get value of field H02FLGWK1 as a String.
  */
  public String getH02FLGWK1()
  {
    return fieldH02FLGWK1.getString();
  }

  /**
  * Set field H02FLGWK2 using a String value.
  */
  public void setH02FLGWK2(String newvalue)
  {
    fieldH02FLGWK2.setString(newvalue);
  }

  /**
  * Get value of field H02FLGWK2 as a String.
  */
  public String getH02FLGWK2()
  {
    return fieldH02FLGWK2.getString();
  }

  /**
  * Set field H02FLGWK3 using a String value.
  */
  public void setH02FLGWK3(String newvalue)
  {
    fieldH02FLGWK3.setString(newvalue);
  }

  /**
  * Get value of field H02FLGWK3 as a String.
  */
  public String getH02FLGWK3()
  {
    return fieldH02FLGWK3.getString();
  }

  /**
  * Set field E02CCMACC using a String value.
  */
  public void setE02CCMACC(String newvalue)
  {
    fieldE02CCMACC.setString(newvalue);
  }

  /**
  * Get value of field E02CCMACC as a String.
  */
  public String getE02CCMACC()
  {
    return fieldE02CCMACC.getString();
  }

  /**
  * Set numeric field E02CCMACC using a BigDecimal value.
  */
  public void setE02CCMACC(BigDecimal newvalue)
  {
    fieldE02CCMACC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E02CCMACC as a BigDecimal.
  */
  public BigDecimal getBigDecimalE02CCMACC()
  {
    return fieldE02CCMACC.getBigDecimal();
  }

  /**
  * Set field E02CCMPRO using a String value.
  */
  public void setE02CCMPRO(String newvalue)
  {
    fieldE02CCMPRO.setString(newvalue);
  }

  /**
  * Get value of field E02CCMPRO as a String.
  */
  public String getE02CCMPRO()
  {
    return fieldE02CCMPRO.getString();
  }

  /**
  * Set field E02CCMCUN using a String value.
  */
  public void setE02CCMCUN(String newvalue)
  {
    fieldE02CCMCUN.setString(newvalue);
  }

  /**
  * Get value of field E02CCMCUN as a String.
  */
  public String getE02CCMCUN()
  {
    return fieldE02CCMCUN.getString();
  }

  /**
  * Set numeric field E02CCMCUN using a BigDecimal value.
  */
  public void setE02CCMCUN(BigDecimal newvalue)
  {
    fieldE02CCMCUN.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E02CCMCUN as a BigDecimal.
  */
  public BigDecimal getBigDecimalE02CCMCUN()
  {
    return fieldE02CCMCUN.getBigDecimal();
  }

  /**
  * Set field E02CUSNA1 using a String value.
  */
  public void setE02CUSNA1(String newvalue)
  {
    fieldE02CUSNA1.setString(newvalue);
  }

  /**
  * Get value of field E02CUSNA1 as a String.
  */
  public String getE02CUSNA1()
  {
    return fieldE02CUSNA1.getString();
  }

  /**
  * Set field E02CCMAST using a String value.
  */
  public void setE02CCMAST(String newvalue)
  {
    fieldE02CCMAST.setString(newvalue);
  }

  /**
  * Get value of field E02CCMAST as a String.
  */
  public String getE02CCMAST()
  {
    return fieldE02CCMAST.getString();
  }

  /**
  * Set field E02CCMLSM using a String value.
  */
  public void setE02CCMLSM(String newvalue)
  {
    fieldE02CCMLSM.setString(newvalue);
  }

  /**
  * Get value of field E02CCMLSM as a String.
  */
  public String getE02CCMLSM()
  {
    return fieldE02CCMLSM.getString();
  }

  /**
  * Set numeric field E02CCMLSM using a BigDecimal value.
  */
  public void setE02CCMLSM(BigDecimal newvalue)
  {
    fieldE02CCMLSM.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E02CCMLSM as a BigDecimal.
  */
  public BigDecimal getBigDecimalE02CCMLSM()
  {
    return fieldE02CCMLSM.getBigDecimal();
  }

  /**
  * Set field E02CCMLSD using a String value.
  */
  public void setE02CCMLSD(String newvalue)
  {
    fieldE02CCMLSD.setString(newvalue);
  }

  /**
  * Get value of field E02CCMLSD as a String.
  */
  public String getE02CCMLSD()
  {
    return fieldE02CCMLSD.getString();
  }

  /**
  * Set numeric field E02CCMLSD using a BigDecimal value.
  */
  public void setE02CCMLSD(BigDecimal newvalue)
  {
    fieldE02CCMLSD.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E02CCMLSD as a BigDecimal.
  */
  public BigDecimal getBigDecimalE02CCMLSD()
  {
    return fieldE02CCMLSD.getBigDecimal();
  }

  /**
  * Set field E02CCMLSY using a String value.
  */
  public void setE02CCMLSY(String newvalue)
  {
    fieldE02CCMLSY.setString(newvalue);
  }

  /**
  * Get value of field E02CCMLSY as a String.
  */
  public String getE02CCMLSY()
  {
    return fieldE02CCMLSY.getString();
  }

  /**
  * Set numeric field E02CCMLSY using a BigDecimal value.
  */
  public void setE02CCMLSY(BigDecimal newvalue)
  {
    fieldE02CCMLSY.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E02CCMLSY as a BigDecimal.
  */
  public BigDecimal getBigDecimalE02CCMLSY()
  {
    return fieldE02CCMLSY.getBigDecimal();
  }

  /**
  * Set field F02CCMAST using a String value.
  */
  public void setF02CCMAST(String newvalue)
  {
    fieldF02CCMAST.setString(newvalue);
  }

  /**
  * Get value of field F02CCMAST as a String.
  */
  public String getF02CCMAST()
  {
    return fieldF02CCMAST.getString();
  }

  /**
  * Set field F02CCMLSM using a String value.
  */
  public void setF02CCMLSM(String newvalue)
  {
    fieldF02CCMLSM.setString(newvalue);
  }

  /**
  * Get value of field F02CCMLSM as a String.
  */
  public String getF02CCMLSM()
  {
    return fieldF02CCMLSM.getString();
  }

  /**
  * Set field F02CCMLSD using a String value.
  */
  public void setF02CCMLSD(String newvalue)
  {
    fieldF02CCMLSD.setString(newvalue);
  }

  /**
  * Get value of field F02CCMLSD as a String.
  */
  public String getF02CCMLSD()
  {
    return fieldF02CCMLSD.getString();
  }

  /**
  * Set field F02CCMLSY using a String value.
  */
  public void setF02CCMLSY(String newvalue)
  {
    fieldF02CCMLSY.setString(newvalue);
  }

  /**
  * Get value of field F02CCMLSY as a String.
  */
  public String getF02CCMLSY()
  {
    return fieldF02CCMLSY.getString();
  }

}
