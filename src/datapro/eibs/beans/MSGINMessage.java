package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from MSGIN physical file definition.
* 
* File level identifier is 1050421185940.
* Record format level identifier is 2E0B9230B5924.
*/

public class MSGINMessage extends MessageRecord
{
  final static String fldnames[] = {
                                     "CHANNEL",
                                     "USERCODE",
                                     "TRXCODE",
                                     "PAYMENT",
                                     "YEAR",
                                     "MONTH",
                                     "DAY",
                                     "HOUR",
                                     "MINUTE",
                                     "SECOND",
                                     "TOREVERSE",
                                     "OFFLINE",
                                     "SUPERVISOR",
                                     "PASSBOOK",
                                     "CLIENTCODE",
                                     "DEBITACC",
                                     "CREDITACC",
                                     "AMOUNT",
                                     "CHECK"
                                   };
  final static String tnames[] = {
                                   "CHANNEL",
                                   "USERCODE",
                                   "TRXCODE",
                                   "PAYMENT",
                                   "YEAR",
                                   "MONTH",
                                   "DAY",
                                   "HOUR",
                                   "MINUTE",
                                   "SECOND",
                                   "TOREVERSE",
                                   "OFFLINE",
                                   "SUPERVISOR",
                                   "PASSBOOK",
                                   "CLIENTCODE",
                                   "DEBITACC",
                                   "CREDITACC",
                                   "AMOUNT",
                                   "CHECK"
                                 };
  final static String fid = "1050421185940";
  final static String rid = "2E0B9230B5924";
  final static String fmtname = "MSGIN";
  final int FIELDCOUNT = 19;
  private static Hashtable tlookup = new Hashtable();
  private DecimalField fieldCHANNEL = null;
  private CharacterField fieldUSERCODE = null;
  private DecimalField fieldTRXCODE = null;
  private CharacterField fieldPAYMENT = null;
  private DecimalField fieldYEAR = null;
  private DecimalField fieldMONTH = null;
  private DecimalField fieldDAY = null;
  private DecimalField fieldHOUR = null;
  private DecimalField fieldMINUTE = null;
  private DecimalField fieldSECOND = null;
  private CharacterField fieldTOREVERSE = null;
  private CharacterField fieldOFFLINE = null;
  private CharacterField fieldSUPERVISOR = null;
  private CharacterField fieldPASSBOOK = null;
  private DecimalField fieldCLIENTCODE = null;
  private DecimalField fieldDEBITACC = null;
  private DecimalField fieldCREDITACC = null;
  private DecimalField fieldAMOUNT = null;
  private DecimalField fieldCHECK = null;

  /**
  * Constructor for MSGINMessage.
  */
  public MSGINMessage()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 138;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldCHANNEL =
    new DecimalField(message, HEADERSIZE + 0, 2, 0, "CHANNEL");
    fields[1] = fieldUSERCODE =
    new CharacterField(message, HEADERSIZE + 2, 10, "USERCODE");
    fields[2] = fieldTRXCODE =
    new DecimalField(message, HEADERSIZE + 12, 4, 0, "TRXCODE");
    fields[3] = fieldPAYMENT =
    new CharacterField(message, HEADERSIZE + 16, 1, "PAYMENT");
    fields[4] = fieldYEAR =
    new DecimalField(message, HEADERSIZE + 17, 5, 0, "YEAR");
    fields[5] = fieldMONTH =
    new DecimalField(message, HEADERSIZE + 22, 3, 0, "MONTH");
    fields[6] = fieldDAY =
    new DecimalField(message, HEADERSIZE + 25, 3, 0, "DAY");
    fields[7] = fieldHOUR =
    new DecimalField(message, HEADERSIZE + 28, 3, 0, "HOUR");
    fields[8] = fieldMINUTE =
    new DecimalField(message, HEADERSIZE + 31, 3, 0, "MINUTE");
    fields[9] = fieldSECOND =
    new DecimalField(message, HEADERSIZE + 34, 3, 0, "SECOND");
    fields[10] = fieldTOREVERSE =
    new CharacterField(message, HEADERSIZE + 37, 1, "TOREVERSE");
    fields[11] = fieldOFFLINE =
    new CharacterField(message, HEADERSIZE + 38, 1, "OFFLINE");
    fields[12] = fieldSUPERVISOR =
    new CharacterField(message, HEADERSIZE + 39, 10, "SUPERVISOR");
    fields[13] = fieldPASSBOOK =
    new CharacterField(message, HEADERSIZE + 49, 1, "PASSBOOK");
    fields[14] = fieldCLIENTCODE =
    new DecimalField(message, HEADERSIZE + 50, 17, 0, "CLIENTCODE");
    fields[15] = fieldDEBITACC =
    new DecimalField(message, HEADERSIZE + 67, 21, 0, "DEBITACC");
    fields[16] = fieldCREDITACC =
    new DecimalField(message, HEADERSIZE + 88, 21, 0, "CREDITACC");
    fields[17] = fieldAMOUNT =
    new DecimalField(message, HEADERSIZE + 109, 17, 2, "AMOUNT");
    fields[18] = fieldCHECK =
    new DecimalField(message, HEADERSIZE + 126, 12, 0, "CHECK");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field CHANNEL using a String value.
  */
  public void setCHANNEL(String newvalue)
  {
    fieldCHANNEL.setString(newvalue);
  }

  /**
  * Get value of field CHANNEL as a String.
  */
  public String getCHANNEL()
  {
    return fieldCHANNEL.getString();
  }

  /**
  * Set numeric field CHANNEL using a BigDecimal value.
  */
  public void setCHANNEL(BigDecimal newvalue)
  {
    fieldCHANNEL.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field CHANNEL as a BigDecimal.
  */
  public BigDecimal getBigDecimalCHANNEL()
  {
    return fieldCHANNEL.getBigDecimal();
  }

  /**
  * Set field USERCODE using a String value.
  */
  public void setUSERCODE(String newvalue)
  {
    fieldUSERCODE.setString(newvalue);
  }

  /**
  * Get value of field USERCODE as a String.
  */
  public String getUSERCODE()
  {
    return fieldUSERCODE.getString();
  }

  /**
  * Set field TRXCODE using a String value.
  */
  public void setTRXCODE(String newvalue)
  {
    fieldTRXCODE.setString(newvalue);
  }

  /**
  * Get value of field TRXCODE as a String.
  */
  public String getTRXCODE()
  {
    return fieldTRXCODE.getString();
  }

  /**
  * Set numeric field TRXCODE using a BigDecimal value.
  */
  public void setTRXCODE(BigDecimal newvalue)
  {
    fieldTRXCODE.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field TRXCODE as a BigDecimal.
  */
  public BigDecimal getBigDecimalTRXCODE()
  {
    return fieldTRXCODE.getBigDecimal();
  }

  /**
  * Set field PAYMENT using a String value.
  */
  public void setPAYMENT(String newvalue)
  {
    fieldPAYMENT.setString(newvalue);
  }

  /**
  * Get value of field PAYMENT as a String.
  */
  public String getPAYMENT()
  {
    return fieldPAYMENT.getString();
  }

  /**
  * Set field YEAR using a String value.
  */
  public void setYEAR(String newvalue)
  {
    fieldYEAR.setString(newvalue);
  }

  /**
  * Get value of field YEAR as a String.
  */
  public String getYEAR()
  {
    return fieldYEAR.getString();
  }

  /**
  * Set numeric field YEAR using a BigDecimal value.
  */
  public void setYEAR(BigDecimal newvalue)
  {
    fieldYEAR.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field YEAR as a BigDecimal.
  */
  public BigDecimal getBigDecimalYEAR()
  {
    return fieldYEAR.getBigDecimal();
  }

  /**
  * Set field MONTH using a String value.
  */
  public void setMONTH(String newvalue)
  {
    fieldMONTH.setString(newvalue);
  }

  /**
  * Get value of field MONTH as a String.
  */
  public String getMONTH()
  {
    return fieldMONTH.getString();
  }

  /**
  * Set numeric field MONTH using a BigDecimal value.
  */
  public void setMONTH(BigDecimal newvalue)
  {
    fieldMONTH.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field MONTH as a BigDecimal.
  */
  public BigDecimal getBigDecimalMONTH()
  {
    return fieldMONTH.getBigDecimal();
  }

  /**
  * Set field DAY using a String value.
  */
  public void setDAY(String newvalue)
  {
    fieldDAY.setString(newvalue);
  }

  /**
  * Get value of field DAY as a String.
  */
  public String getDAY()
  {
    return fieldDAY.getString();
  }

  /**
  * Set numeric field DAY using a BigDecimal value.
  */
  public void setDAY(BigDecimal newvalue)
  {
    fieldDAY.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field DAY as a BigDecimal.
  */
  public BigDecimal getBigDecimalDAY()
  {
    return fieldDAY.getBigDecimal();
  }

  /**
  * Set field HOUR using a String value.
  */
  public void setHOUR(String newvalue)
  {
    fieldHOUR.setString(newvalue);
  }

  /**
  * Get value of field HOUR as a String.
  */
  public String getHOUR()
  {
    return fieldHOUR.getString();
  }

  /**
  * Set numeric field HOUR using a BigDecimal value.
  */
  public void setHOUR(BigDecimal newvalue)
  {
    fieldHOUR.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field HOUR as a BigDecimal.
  */
  public BigDecimal getBigDecimalHOUR()
  {
    return fieldHOUR.getBigDecimal();
  }

  /**
  * Set field MINUTE using a String value.
  */
  public void setMINUTE(String newvalue)
  {
    fieldMINUTE.setString(newvalue);
  }

  /**
  * Get value of field MINUTE as a String.
  */
  public String getMINUTE()
  {
    return fieldMINUTE.getString();
  }

  /**
  * Set numeric field MINUTE using a BigDecimal value.
  */
  public void setMINUTE(BigDecimal newvalue)
  {
    fieldMINUTE.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field MINUTE as a BigDecimal.
  */
  public BigDecimal getBigDecimalMINUTE()
  {
    return fieldMINUTE.getBigDecimal();
  }

  /**
  * Set field SECOND using a String value.
  */
  public void setSECOND(String newvalue)
  {
    fieldSECOND.setString(newvalue);
  }

  /**
  * Get value of field SECOND as a String.
  */
  public String getSECOND()
  {
    return fieldSECOND.getString();
  }

  /**
  * Set numeric field SECOND using a BigDecimal value.
  */
  public void setSECOND(BigDecimal newvalue)
  {
    fieldSECOND.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field SECOND as a BigDecimal.
  */
  public BigDecimal getBigDecimalSECOND()
  {
    return fieldSECOND.getBigDecimal();
  }

  /**
  * Set field TOREVERSE using a String value.
  */
  public void setTOREVERSE(String newvalue)
  {
    fieldTOREVERSE.setString(newvalue);
  }

  /**
  * Get value of field TOREVERSE as a String.
  */
  public String getTOREVERSE()
  {
    return fieldTOREVERSE.getString();
  }

  /**
  * Set field OFFLINE using a String value.
  */
  public void setOFFLINE(String newvalue)
  {
    fieldOFFLINE.setString(newvalue);
  }

  /**
  * Get value of field OFFLINE as a String.
  */
  public String getOFFLINE()
  {
    return fieldOFFLINE.getString();
  }

  /**
  * Set field SUPERVISOR using a String value.
  */
  public void setSUPERVISOR(String newvalue)
  {
    fieldSUPERVISOR.setString(newvalue);
  }

  /**
  * Get value of field SUPERVISOR as a String.
  */
  public String getSUPERVISOR()
  {
    return fieldSUPERVISOR.getString();
  }

  /**
  * Set field PASSBOOK using a String value.
  */
  public void setPASSBOOK(String newvalue)
  {
    fieldPASSBOOK.setString(newvalue);
  }

  /**
  * Get value of field PASSBOOK as a String.
  */
  public String getPASSBOOK()
  {
    return fieldPASSBOOK.getString();
  }

  /**
  * Set field CLIENTCODE using a String value.
  */
  public void setCLIENTCODE(String newvalue)
  {
    fieldCLIENTCODE.setString(newvalue);
  }

  /**
  * Get value of field CLIENTCODE as a String.
  */
  public String getCLIENTCODE()
  {
    return fieldCLIENTCODE.getString();
  }

  /**
  * Set numeric field CLIENTCODE using a BigDecimal value.
  */
  public void setCLIENTCODE(BigDecimal newvalue)
  {
    fieldCLIENTCODE.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field CLIENTCODE as a BigDecimal.
  */
  public BigDecimal getBigDecimalCLIENTCODE()
  {
    return fieldCLIENTCODE.getBigDecimal();
  }

  /**
  * Set field DEBITACC using a String value.
  */
  public void setDEBITACC(String newvalue)
  {
    fieldDEBITACC.setString(newvalue);
  }

  /**
  * Get value of field DEBITACC as a String.
  */
  public String getDEBITACC()
  {
    return fieldDEBITACC.getString();
  }

  /**
  * Set numeric field DEBITACC using a BigDecimal value.
  */
  public void setDEBITACC(BigDecimal newvalue)
  {
    fieldDEBITACC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field DEBITACC as a BigDecimal.
  */
  public BigDecimal getBigDecimalDEBITACC()
  {
    return fieldDEBITACC.getBigDecimal();
  }

  /**
  * Set field CREDITACC using a String value.
  */
  public void setCREDITACC(String newvalue)
  {
    fieldCREDITACC.setString(newvalue);
  }

  /**
  * Get value of field CREDITACC as a String.
  */
  public String getCREDITACC()
  {
    return fieldCREDITACC.getString();
  }

  /**
  * Set numeric field CREDITACC using a BigDecimal value.
  */
  public void setCREDITACC(BigDecimal newvalue)
  {
    fieldCREDITACC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field CREDITACC as a BigDecimal.
  */
  public BigDecimal getBigDecimalCREDITACC()
  {
    return fieldCREDITACC.getBigDecimal();
  }

  /**
  * Set field AMOUNT using a String value.
  */
  public void setAMOUNT(String newvalue)
  {
    fieldAMOUNT.setString(newvalue);
  }

  /**
  * Get value of field AMOUNT as a String.
  */
  public String getAMOUNT()
  {
    return fieldAMOUNT.getString();
  }

  /**
  * Set numeric field AMOUNT using a BigDecimal value.
  */
  public void setAMOUNT(BigDecimal newvalue)
  {
    fieldAMOUNT.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field AMOUNT as a BigDecimal.
  */
  public BigDecimal getBigDecimalAMOUNT()
  {
    return fieldAMOUNT.getBigDecimal();
  }

  /**
  * Set field CHECK using a String value.
  */
  public void setCHECK(String newvalue)
  {
    fieldCHECK.setString(newvalue);
  }

  /**
  * Get value of field CHECK as a String.
  */
  public String getCHECK()
  {
    return fieldCHECK.getString();
  }

  /**
  * Set numeric field CHECK using a BigDecimal value.
  */
  public void setCHECK(BigDecimal newvalue)
  {
    fieldCHECK.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field CHECK as a BigDecimal.
  */
  public BigDecimal getBigDecimalCHECK()
  {
    return fieldCHECK.getBigDecimal();
  }

}
