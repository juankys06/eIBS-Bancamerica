package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from EWD0016DS physical file definition.
* 
* File level identifier is 1030121192018.
* Record format level identifier is 50529820A09F8.
*/

public class EWD0016DSMessage extends MessageRecord
{
  final static String fldnames[] = {
                                     "EWDSAC",
                                     "EWDNUM",
                                     "EWDNME",
                                     "EWDCO1",
                                     "EWDCO2",
                                     "EWDCO3",
                                     "EWDOPE"
                                   };
  final static String tnames[] = {
                                   "EWDSAC",
                                   "EWDNUM",
                                   "EWDNME",
                                   "EWDCO1",
                                   "EWDCO2",
                                   "EWDCO3",
                                   "EWDOPE"
                                 };
  final static String fid = "1030121192018";
  final static String rid = "50529820A09F8";
  final static String fmtname = "EWD0016DS";
  final int FIELDCOUNT = 7;
  private static Hashtable tlookup = new Hashtable();
  private DecimalField fieldEWDSAC = null;
  private DecimalField fieldEWDNUM = null;
  private CharacterField fieldEWDNME = null;
  private DecimalField fieldEWDCO1 = null;
  private DecimalField fieldEWDCO2 = null;
  private DecimalField fieldEWDCO3 = null;
  private CharacterField fieldEWDOPE = null;

  /**
  * Constructor for EWD0016DSMessage.
  */
  public EWD0016DSMessage()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 74;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldEWDSAC =
    new DecimalField(message, HEADERSIZE + 0, 13, 0, "EWDSAC");
    fields[1] = fieldEWDNUM =
    new DecimalField(message, HEADERSIZE + 13, 6, 0, "EWDNUM");
    fields[2] = fieldEWDNME =
    new CharacterField(message, HEADERSIZE + 19, 45, "EWDNME");
    fields[3] = fieldEWDCO1 =
    new DecimalField(message, HEADERSIZE + 64, 3, 0, "EWDCO1");
    fields[4] = fieldEWDCO2 =
    new DecimalField(message, HEADERSIZE + 67, 3, 0, "EWDCO2");
    fields[5] = fieldEWDCO3 =
    new DecimalField(message, HEADERSIZE + 70, 3, 0, "EWDCO3");
    fields[6] = fieldEWDOPE =
    new CharacterField(message, HEADERSIZE + 73, 1, "EWDOPE");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field EWDSAC using a String value.
  */
  public void setEWDSAC(String newvalue)
  {
    fieldEWDSAC.setString(newvalue);
  }

  /**
  * Get value of field EWDSAC as a String.
  */
  public String getEWDSAC()
  {
    return fieldEWDSAC.getString();
  }

  /**
  * Set numeric field EWDSAC using a BigDecimal value.
  */
  public void setEWDSAC(BigDecimal newvalue)
  {
    fieldEWDSAC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EWDSAC as a BigDecimal.
  */
  public BigDecimal getBigDecimalEWDSAC()
  {
    return fieldEWDSAC.getBigDecimal();
  }

  /**
  * Set field EWDNUM using a String value.
  */
  public void setEWDNUM(String newvalue)
  {
    fieldEWDNUM.setString(newvalue);
  }

  /**
  * Get value of field EWDNUM as a String.
  */
  public String getEWDNUM()
  {
    return fieldEWDNUM.getString();
  }

  /**
  * Set numeric field EWDNUM using a BigDecimal value.
  */
  public void setEWDNUM(BigDecimal newvalue)
  {
    fieldEWDNUM.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EWDNUM as a BigDecimal.
  */
  public BigDecimal getBigDecimalEWDNUM()
  {
    return fieldEWDNUM.getBigDecimal();
  }

  /**
  * Set field EWDNME using a String value.
  */
  public void setEWDNME(String newvalue)
  {
    fieldEWDNME.setString(newvalue);
  }

  /**
  * Get value of field EWDNME as a String.
  */
  public String getEWDNME()
  {
    return fieldEWDNME.getString();
  }

  /**
  * Set field EWDCO1 using a String value.
  */
  public void setEWDCO1(String newvalue)
  {
    fieldEWDCO1.setString(newvalue);
  }

  /**
  * Get value of field EWDCO1 as a String.
  */
  public String getEWDCO1()
  {
    return fieldEWDCO1.getString();
  }

  /**
  * Set numeric field EWDCO1 using a BigDecimal value.
  */
  public void setEWDCO1(BigDecimal newvalue)
  {
    fieldEWDCO1.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EWDCO1 as a BigDecimal.
  */
  public BigDecimal getBigDecimalEWDCO1()
  {
    return fieldEWDCO1.getBigDecimal();
  }

  /**
  * Set field EWDCO2 using a String value.
  */
  public void setEWDCO2(String newvalue)
  {
    fieldEWDCO2.setString(newvalue);
  }

  /**
  * Get value of field EWDCO2 as a String.
  */
  public String getEWDCO2()
  {
    return fieldEWDCO2.getString();
  }

  /**
  * Set numeric field EWDCO2 using a BigDecimal value.
  */
  public void setEWDCO2(BigDecimal newvalue)
  {
    fieldEWDCO2.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EWDCO2 as a BigDecimal.
  */
  public BigDecimal getBigDecimalEWDCO2()
  {
    return fieldEWDCO2.getBigDecimal();
  }

  /**
  * Set field EWDCO3 using a String value.
  */
  public void setEWDCO3(String newvalue)
  {
    fieldEWDCO3.setString(newvalue);
  }

  /**
  * Get value of field EWDCO3 as a String.
  */
  public String getEWDCO3()
  {
    return fieldEWDCO3.getString();
  }

  /**
  * Set numeric field EWDCO3 using a BigDecimal value.
  */
  public void setEWDCO3(BigDecimal newvalue)
  {
    fieldEWDCO3.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EWDCO3 as a BigDecimal.
  */
  public BigDecimal getBigDecimalEWDCO3()
  {
    return fieldEWDCO3.getBigDecimal();
  }

  /**
  * Set field EWDOPE using a String value.
  */
  public void setEWDOPE(String newvalue)
  {
    fieldEWDOPE.setString(newvalue);
  }

  /**
  * Get value of field EWDOPE as a String.
  */
  public String getEWDOPE()
  {
    return fieldEWDOPE.getString();
  }

}
