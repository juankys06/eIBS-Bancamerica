package datapro.eibs.invest;

import java.io.*;
import java.net.*;
import java.beans.Beans;
import javax.servlet.*;
import javax.servlet.http.*;
import datapro.eibs.beans.*;

import datapro.eibs.sockets.*;

/**
* Commissions Table.
* <p>
*  Creation date: (11/19/02 6:08:55 PM)
*  Last Update :  (03/04/03 5:27 PM)
* <p>
* This servlet manages creation,maintenance, inquiry ,and deletion of the commissions tables  
* is call from the list generated by datapro.eibs.invest.JSEWD0312P           
* @author David Mavilla
* @version 1.0.3
* @see datapro.eibs.beans.EIE000001Message
* @see datapro.eibs.invest.JSEWD0312PMessage
* 
*/

public class JSEIE0000 extends datapro.eibs.master.SuperServlet {

	// Action 
	protected static final  int A_MAINTENANCE = 2;

	protected static final int A_ENTER_NEW = 200;
	protected static final int A_ENTER_MAINT = 400;
	protected static final int A_ENTER_DELETE = 600;
	protected static final int A_ENTER_INQUIRY = 800;

	protected String LangPath = "S";

	/**
	 * JSEIE00000 constructor comment.
	 */
	public JSEIE0000() {
		super();
	}

	/**
	 * This method was created by Orestes Garcia.
	 */
	public void destroy() {

		flexLog("free resources used by JSEIE00000");

	}
	/**
	 * This method was created by David Mavilla.
	 */
	public void init(ServletConfig config) throws ServletException {
		super.init(config);
	}
	
	/**
	* <p>
	* New Commission Table : 
	* <p>
	* 	 <ul>
	*    <li><b>Description :</b> Opening a new commissions table
	* 	 <li><b>Screen identifier :</b> A_ENTER_NEW, value =  200
	* 	 <li><b>Method :</b> protected  void procActionEnterNew(mc,user,req,res,ses)
	* 	 <li><b>Beans  :</b> EIE000001Message (invComm)
	* 	 <li><b>Pages  :</b>
	* 		<ul>
	*     Not errors :
	* 	    <li>	1. EIE0000_inv_bonds_basic.jsp (Bonds case)
	* 	    <li>    2. EIE0000_inv_stocks_basic.jsp(rest of cases)
	* 	    <li>	Errors :"servlet/datapro.eibs.invest.JSEWD0312P?SCREEN=1"
	*       </ul>
	* 	 <li><b>Parameters :</b>
	* 	 <li>   DOCTYP : Document type(Bond, equity, etc) is mandatory and sets E01COMTYP 
	* 	 <li>   TABLE  : Table Number for the new table this parameter  sets E01COMTBL
	* 	 <li>   CODE   : Customer Number sets E01COMCUN
	* 	 <li>Operation Code on H01OPECOD :0001
	*    </ul>
	* <p>
	*/
	protected  void procActionEnterNew(
		MessageContext mc,
		ESS0030DSMessage user,
		HttpServletRequest req,
		HttpServletResponse res,
		HttpSession ses)
		throws ServletException, IOException {

		MessageRecord newmessage = null;
		EIE000001Message msgComm = null;
		ELEERRMessage msgError = null;
		UserPos userPO = null;
		boolean IsNotError = false;

		try {
			msgError = new ELEERRMessage();
		} catch (Exception ex) {
			flexLog("Error: " + ex);
		}

		userPO = (datapro.eibs.beans.UserPos) ses.getAttribute("userPO");

		String opCode = null;
		String CODE = "";

		// Send Initial data
		try {
			msgComm = (EIE000001Message) mc.getMessageRecord("EIE000001");
			msgComm.setH01USERID(user.getH01USR());
			msgComm.setH01PROGRM("EIE0000");
			msgComm.setH01TIMSYS(getTimeStamp());
			msgComm.setH01SCRCOD("01");
			msgComm.setH01OPECOD("0001");

			try {
				msgComm.setE01COMTBL(req.getParameter("TABLE"));
			} catch (Exception e) {
				msgComm.setE01COMTBL("0");
			}

			try {
				msgComm.setE01COMTYP(req.getParameter("DOCTYP"));
			} catch (Exception e) {
				msgComm.setE01COMTYP("0");
			}

			try {
				msgComm.setE01COMCUN(req.getParameter("CODE"));
			} catch (Exception e) {
			}

			msgComm.send();
			msgComm.destroy();
			flexLog("EIE000001 Message Sent");
		} catch (Exception e) {
			e.printStackTrace();
			flexLog("Error: " + e);
			throw new RuntimeException("Socket Communication Error");
		}

		// Receive Error Message
		try {
			newmessage = mc.receiveMessage();

			if (newmessage.getFormatName().equals("ELEERR")) {
				msgError = (ELEERRMessage) newmessage;
				IsNotError = msgError.getERRNUM().equals("0");
				flexLog("IsNotError = " + IsNotError);
				showERROR(msgError);
			} else
				flexLog("Message " + newmessage.getFormatName() + " received.");

		} catch (Exception e) {
			e.printStackTrace();
			flexLog("Error: " + e);
			throw new RuntimeException("Socket Communication Error");
		}

		// Receive Data
		try {
			newmessage = mc.receiveMessage();

			if (newmessage.getFormatName().equals("EIE000001")) {
				try {
					msgComm =new EIE000001Message();
				} catch (Exception ex) {
					flexLog("Error: " + ex);
				}

				msgComm = (EIE000001Message) newmessage;

				flexLog("Putting java beans into the session");
				ses.setAttribute("error", msgError);
				ses.setAttribute("invComm", msgComm);

				if (IsNotError) { // There are no errors
					if (msgComm.getE01COMTYP().equals("BND")) {
						try {
							flexLog(
								"About to call Page: "
									+ LangPath
									+ "EIE0000_inv_bonds_basic.jsp");
							callPage(
								LangPath + "EIE0000_inv_bonds_basic.jsp",
								req,
								res);
						} catch (Exception e) {
							flexLog("Exception calling page " + e);
						}
					} else {
						try {
							flexLog(
								"About to call Page: "
									+ LangPath
									+ "EIE0000_inv_stocks_basic.jsp");
							callPage(
								LangPath + "EIE0000_inv_stocks_basic.jsp",
								req,
								res);
						} catch (Exception e) {
							flexLog("Exception calling page " + e);
						}
					}
				} else { // There are errors
					res.sendRedirect(super.srctx + 
						"/servlet/datapro.eibs.invest.JSEWD0312P?SCREEN=1");
				}
			} else
				flexLog("Message " + newmessage.getFormatName() + " received.");

		} catch (Exception e) {
			e.printStackTrace();
			flexLog("Error: " + e);
			throw new RuntimeException("Socket Communication Error");
		}
	}

	/**
	* <p> 
	* Maintenance Commission Table : 
	* <p>
	*  <ul>
	*  <li><b>Description :</b> Maintenance  an existing commissions table
	*  <li><b>Screen identifier</b>  : A_ENTER_MAINT , value =  400
	*  <li><b>Method </b> : procActionEnterMaint(mc,msgUser,req,res,session);
	*  <li><b>Beans  :</b> EIE000001.class (invComm)
	*  <li><b>Pages  :</b>Not errors :
	*  <li> 1. EIE0000_inv_bonds_basic.jsp (Bonds case)
	*  <li> 2. EIE0000_inv_stocks_basic.jsp(rest of cases)
	*  <li>Errors :"/servlet/datapro.eibs.invest.JSEWD0312P?SCREEN=1"
	*  <li><b>Parameters :</b>
	*  <li>DOCTYP : Document type(Bond, equity, etc) is mandatory and sets E01COMTYP 
	*  <li>TABLE  : Table Number for the new table this parameter  sets E01COMTBL
	*  <li>CODE   : Customer Number sets E01COMCUN
	*  <li>Operation Code on H01OPECOD :0002
	*  </ul>
	* <p>
	 
	 */

	protected  void procActionEnterMaint(
		MessageContext mc,
		ESS0030DSMessage user,
		HttpServletRequest req,
		HttpServletResponse res,
		HttpSession ses)
		throws ServletException, IOException {

		MessageRecord newmessage = null;
		EIE000001Message msgComm = null;
		ELEERRMessage msgError = null;
		UserPos userPO = null;
		boolean IsNotError = false;

		try {
			msgError = new ELEERRMessage();
		} catch (Exception ex) {
			flexLog("Error: " + ex);
		}

		userPO = (datapro.eibs.beans.UserPos) ses.getAttribute("userPO");

		String opCode = null;

		// Send Initial data
		try {
			msgComm = (EIE000001Message) mc.getMessageRecord("EIE000001");
			msgComm.setH01USERID(user.getH01USR());
			msgComm.setH01PROGRM("EIE0000");
			msgComm.setH01TIMSYS(getTimeStamp());
			msgComm.setH01SCRCOD("01");
			msgComm.setH01OPECOD("0002");

			try {
				msgComm.setE01COMTBL(req.getParameter("TABLE"));
			} catch (Exception e) {
				msgComm.setE01COMTBL("0");
			}

			try {
				msgComm.setE01COMTYP(req.getParameter("DOCTYP"));
			} catch (Exception e) {
				msgComm.setE01COMTYP("0");
			}

			try {
				msgComm.setE01COMCUN(req.getParameter("CODE"));
			} catch (Exception e) {
				msgComm.setE01COMCUN("");
			}

			msgComm.send();
			msgComm.destroy();
			flexLog("EIE000001 Message Sent");
		} catch (Exception e) {
			e.printStackTrace();
			flexLog("Error: " + e);
			throw new RuntimeException("Socket Communication Error");
		}

		// Receive Error Message
		try {
			newmessage = mc.receiveMessage();

			if (newmessage.getFormatName().equals("ELEERR")) {
				msgError = (ELEERRMessage) newmessage;
				IsNotError = msgError.getERRNUM().equals("0");
				flexLog("IsNotError = " + IsNotError);
				showERROR(msgError);
			} else
				flexLog("Message " + newmessage.getFormatName() + " received.");

		} catch (Exception e) {
			e.printStackTrace();
			flexLog("Error: " + e);
			throw new RuntimeException("Socket Communication Error");
		}

		// Receive Data
		try {
			newmessage = mc.receiveMessage();

			if (newmessage.getFormatName().equals("EIE000001")) {
				try {
					msgComm = new EIE000001Message();
				} catch (Exception ex) {
					flexLog("Error: " + ex);
				}

				msgComm = (EIE000001Message) newmessage;

				flexLog("Putting java beans into the session");
				ses.setAttribute("error", msgError);
				ses.setAttribute("invComm", msgComm);

				if (IsNotError) { // There are no errors
					if (msgComm.getE01COMTYP().equals("BND")) {
						try {
							flexLog(
								"About to call Page: "
									+ LangPath
									+ "EIE0000_inv_bonds_basic.jsp");
							callPage(
								LangPath + "EIE0000_inv_bonds_basic.jsp",
								req,
								res);
						} catch (Exception e) {
							flexLog("Exception calling page " + e);
						}
					} else {
						try {
							flexLog(
								"About to call Page: "
									+ LangPath
									+ "EIE0000_inv_stocks_basic.jsp");
							callPage(
								LangPath + "EIE0000_inv_stocks_basic.jsp",
								req,
								res);
						} catch (Exception e) {
							flexLog("Exception calling page " + e);
						}
					}
				} else { // There are errors
					res.sendRedirect(super.srctx + 
						"/servlet/datapro.eibs.invest.JSEWD0312P?SCREEN=1");
				}
			} else
				flexLog("Message " + newmessage.getFormatName() + " received.");

		} catch (Exception e) {
			e.printStackTrace();
			flexLog("Error: " + e);
			throw new RuntimeException("Socket Communication Error");
		}
	}
/**
 * <p>
 *  Inquiry Commission Table
 * <p>
 * <ul>
 * <li><b>Description :</b> Inquiries  an existing commissions table
 * <li><b>Screen identifier</b>  : A_ENTER_INQUIRY , value =  800
 * <li><b>Method </b> : procActionEnterInquiry(mc,msgUser,req,res,session);
 * <li><b>Beans  :</b> EIE000001.class (invComm)
 * <li><b>Pages  :</b>Not errors :
 * <li> 1. EIE0000_inv_inq_bonds_basic.jsp (Bonds case)
 * <li> 2. EIE0000_inv_inq_stocks_basic.jsp(rest of cases)
 * <li> Errors : "/servlet/datapro.eibs.invest.JSEWD0312P?SCREEN=1"
 * <li><b>Parameters :</b>
 * <li>DOCTYP : Document type(Bond, equity, etc) is mandatory and sets E01COMTYP 
 * <li>TABLE  : Table Number for the new table this parameter  sets E01COMTBL
 * <li>CODE   : Customer Number sets E01COMCUN
 * <li>Operation Code on H01OPECOD :0003
 * </ul>
 * <p>
 */
	protected  void procActionEnterInquiry(
		MessageContext mc,
		ESS0030DSMessage user,
		HttpServletRequest req,
		HttpServletResponse res,
		HttpSession ses)
		throws ServletException, IOException {

		MessageRecord newmessage = null;
		EIE000001Message msgComm = null;
		ELEERRMessage msgError = null;
		UserPos userPO = null;
		boolean IsNotError = false;

		try {
			msgError = new ELEERRMessage();
		} catch (Exception ex) {
			flexLog("Error: " + ex);
		}

		userPO = (datapro.eibs.beans.UserPos) ses.getAttribute("userPO");

		String opCode = null;

		// Send Initial data
		try {
			msgComm = (EIE000001Message) mc.getMessageRecord("EIE000001");
			msgComm.setH01USERID(user.getH01USR());
			msgComm.setH01PROGRM("EIE0000");
			msgComm.setH01TIMSYS(getTimeStamp());
			msgComm.setH01SCRCOD("01");
			msgComm.setH01OPECOD("0003");

			try {
				msgComm.setE01COMTBL(req.getParameter("TABLE"));
			} catch (Exception e) {
				msgComm.setE01COMTBL("0");
			}

			try {
				msgComm.setE01COMTYP(req.getParameter("DOCTYP"));
			} catch (Exception e) {
				msgComm.setE01COMTYP("0");
			}

			try {
				msgComm.setE01COMCUN(req.getParameter("CODE"));
			} catch (Exception e) {
				msgComm.setE01COMCUN("");
			}

			msgComm.send();
			msgComm.destroy();
			flexLog("EIE000001 Message Sent");
		} catch (Exception e) {
			e.printStackTrace();
			flexLog("Error: " + e);
			throw new RuntimeException("Socket Communication Error");
		}

		// Receive Error Message
		try {
			newmessage = mc.receiveMessage();

			if (newmessage.getFormatName().equals("ELEERR")) {
				msgError = (ELEERRMessage) newmessage;
				IsNotError = msgError.getERRNUM().equals("0");
				flexLog("IsNotError = " + IsNotError);
				showERROR(msgError);
			} else
				flexLog("Message " + newmessage.getFormatName() + " received.");

		} catch (Exception e) {
			e.printStackTrace();
			flexLog("Error: " + e);
			throw new RuntimeException("Socket Communication Error");
		}

		// Receive Data
		try {
			newmessage = mc.receiveMessage();

			if (newmessage.getFormatName().equals("EIE000001")) {
				try {
					msgComm = new EIE000001Message();
				} catch (Exception ex) {
					flexLog("Error: " + ex);
				}

				msgComm = (EIE000001Message) newmessage;

				flexLog("Putting java beans into the session");
				ses.setAttribute("error", msgError);
				ses.setAttribute("invComm", msgComm);

				if (IsNotError) { // There are no errors
					if (msgComm.getE01COMTYP().equals("BND")) {
						try {
							flexLog(
								"About to call Page: "
									+ LangPath
									+ "EIE0000_inv_inq_bonds_basic.jsp");
							callPage(
								LangPath + "EIE0000_inv_inq_bonds_basic.jsp",
								req,
								res);
						} catch (Exception e) {
							flexLog("Exception calling page " + e);
						}
					} else {
						try {
							flexLog(
								"About to call Page: "
									+ LangPath
									+ "EIE0000_inv_inq_stocks_basic.jsp");
							callPage(
								LangPath + "EIE0000_inv_inq_stocks_basic.jsp",
								req,
								res);
						} catch (Exception e) {
							flexLog("Exception calling page " + e);
						}
					}
				} else { // There are errors
					res.sendRedirect(super.srctx + 
						"/servlet/datapro.eibs.invest.JSEWD0312P?SCREEN=1");
				}
			} else
				flexLog("Message " + newmessage.getFormatName() + " received.");

		} catch (Exception e) {
			e.printStackTrace();
			flexLog("Error: " + e);
			throw new RuntimeException("Socket Communication Error");
		}
	}

/**
* <p>
* Delete Commission Table :
* <p>
* <ul>  	
* <li><b>Description :</b> Delete  an existing commissions table
* <li><b>Screen identifier</b>  : A_ENTER_DELETE , value =  600
* <li><b>Method </b> : procActionEnterInquiry(mc,msgUser,req,res,session);
* <li><b>Beans  :</b> EIE000001.class (invComm)
* <li><b>Pages  :</b>Not errors :
* <li>1. EIE0000_inv_del_confirm.jsp
* <li>Errors : /servlet/datapro.eibs.invest.JSEWD0312P?SCREEN=1
* <li><b>Parameters :</b>
* <li>DOCTYP : Document type(Bond, equity, etc) is mandatory and sets E01COMTYP 
* <li>TABLE  : Table Number for the new table this parameter  sets E01COMTBL
* <li>CODE   : Customer Number sets E01COMCUN
* <li>Operation Code on H01OPECOD :0004
* </ul>
* <p>

 */
	protected  void procActionEnterDelete(
		MessageContext mc,
		ESS0030DSMessage user,
		HttpServletRequest req,
		HttpServletResponse res,
		HttpSession ses)
		throws ServletException, IOException {

		MessageRecord newmessage = null;
		EIE000001Message msgComm = null;
		ELEERRMessage msgError = null;
		UserPos userPO = null;
		boolean IsNotError = false;

		try {
			msgError = new ELEERRMessage();
		} catch (Exception ex) {
			flexLog("Error: " + ex);
		}

		userPO = (datapro.eibs.beans.UserPos) ses.getAttribute("userPO");

		String opCode = null;

		// Send Initial data
		try {
			msgComm = (EIE000001Message) mc.getMessageRecord("EIE000001");
			msgComm.setH01USERID(user.getH01USR());
			msgComm.setH01PROGRM("EIE0000");
			msgComm.setH01TIMSYS(getTimeStamp());
			msgComm.setH01SCRCOD("01");
			msgComm.setH01OPECOD("0004");

			try {
				msgComm.setE01COMTBL(req.getParameter("TABLE"));
			} catch (Exception e) {
				msgComm.setE01COMTBL("0");
			}

			try {
				msgComm.setE01COMTYP(req.getParameter("DOCTYP"));
			} catch (Exception e) {
				msgComm.setE01COMTYP("0");
			}

			try {
				msgComm.setE01COMCUN(req.getParameter("CODE"));
			} catch (Exception e) {
				msgComm.setE01COMCUN("");
			}

			msgComm.send();
			msgComm.destroy();
			flexLog("EIE000001 Message Sent");
		} catch (Exception e) {
			e.printStackTrace();
			flexLog("Error: " + e);
			throw new RuntimeException("Socket Communication Error");
		}

		// Receive Error Message
		try {
			newmessage = mc.receiveMessage();

			if (newmessage.getFormatName().equals("ELEERR")) {
				msgError = (ELEERRMessage) newmessage;
				IsNotError = msgError.getERRNUM().equals("0");
				flexLog("IsNotError = " + IsNotError);
				showERROR(msgError);
			} else
				flexLog("Message " + newmessage.getFormatName() + " received.");

		} catch (Exception e) {
			e.printStackTrace();
			flexLog("Error: " + e);
			throw new RuntimeException("Socket Communication Error");
		}

		// Receive Data
		try {
			newmessage = mc.receiveMessage();

			if (newmessage.getFormatName().equals("EIE000001")) {
				try {
					msgComm = new EIE000001Message();
				} catch (Exception ex) {
					flexLog("Error: " + ex);
				}

				msgComm = (EIE000001Message) newmessage;

				userPO.setIdentifier(msgComm.getE01COMTBL());

				flexLog("Putting java beans into the session");
				ses.setAttribute("error", msgError);
				ses.setAttribute("invComm", msgComm);
				ses.setAttribute("userPO", userPO);

				if (IsNotError) { // There are no errors
					try {
						flexLog(
							"About to call Page: "
								+ LangPath
								+ "EIE0000_inv_del_confirm.jsp");
						callPage(
							LangPath + "EIE0000_inv_del_confirm.jsp",
							req,
							res);
					} catch (Exception e) {
						flexLog("Exception calling page " + e);
					}
				} else { // There are errors
					res.sendRedirect(super.srctx + 
						"/servlet/datapro.eibs.invest.JSEWD0312P?SCREEN=1");
				}
			} else
				flexLog("Message " + newmessage.getFormatName() + " received.");

		} catch (Exception e) {
			e.printStackTrace();
			flexLog("Error: " + e);
			throw new RuntimeException("Socket Communication Error");
		}
	}

	/**
	* <p>
	* Validation and Saving
	* <p>
	* <ul> 
	* <li><b>Description :</b> For validation and saving of commission tables
	* <li><b>Screen identifier</b>  : A_MAINTENANCE  , value =  2
	* <li><b>Method </b> : procActionMaintenance((mc,msgUser,req,res,session);
	* <li><b>Beans  :</b> EIE000001.class (invComm)
	* <li><b>Pages  :</b>
	* <li>   Not errors : 1. EIV0000_inv_confirm.jsp
	* <li>	 Errors : 
	* <li>   1. EIE0000_inv_bonds_basic.jsp (Bonds case)
	* <li>	 2. EIE0000_inv_stocks_basic.jsp(rest of cases)
	* <li><b>Parameters :</b>
	* <li>DOCTYP : Document type(Bond, equity, etc) is mandatory and sets E01COMTYP 
	* <li>TABLE  : Table Number for the new table this parameter  sets E01COMTBL
	* <li>CODE   : Customer Number sets E01COMCUN
	* <li>Operation Code on H01OPECOD :0005
	* </ul>
	* <p>

	 */
	protected  void procActionMaintenance(
		MessageContext mc,
		ESS0030DSMessage user,
		HttpServletRequest req,
		HttpServletResponse res,
		HttpSession ses)
		throws ServletException, IOException {

		MessageRecord newmessage = null;
		EIE000001Message msgComm = null;
		ELEERRMessage msgError = null;
		UserPos userPO = null;
		boolean IsNotError = false;

		try {
			msgError = new ELEERRMessage();
		} catch (Exception ex) {
			flexLog("Error: " + ex);
		}

		userPO = (datapro.eibs.beans.UserPos) ses.getAttribute("userPO");

		// Send Initial data
		try {
			flexLog("Send Initial Data");
			msgComm = (EIE000001Message) ses.getAttribute("invComm");
			//msgComm = (EFE0120DSMessage)mc.getMessageRecord("EFE0120DS");
			msgComm.setH01USERID(user.getH01USR());
			msgComm.setH01PROGRM("EIE000001");
			msgComm.setH01TIMSYS(getTimeStamp());
			msgComm.setH01SCRCOD("01");
			msgComm.setH01OPECOD("0005");

			// all the fields here
			java.util.Enumeration enu = msgComm.fieldEnumeration();
			MessageField field = null;
			String value = null;
			while (enu.hasMoreElements()) {
				field = (MessageField) enu.nextElement();
				try {
					value =
						req.getParameter(field.getTag()).toUpperCase().trim();
					if (value != null) {
						field.setString(value);
					}
				} catch (Exception e) {
				}
			}

			//msgComm.send();
			mc.sendMessage(msgComm);
			msgComm.destroy();
			flexLog("EIE000001 Message Sent");
		} catch (Exception e) {
			e.printStackTrace();
			flexLog("Error: " + e);
			throw new RuntimeException("Socket Communication Error");
		}

		// Receive Error Message
		try {
			newmessage = mc.receiveMessage();

			if (newmessage.getFormatName().equals("ELEERR")) {
				msgError = (ELEERRMessage) newmessage;
				IsNotError = msgError.getERRNUM().equals("0");
				flexLog("IsNotError = " + IsNotError);
				showERROR(msgError);
			} else
				flexLog("Message " + newmessage.getFormatName() + " received.");

		} catch (Exception e) {
			e.printStackTrace();
			flexLog("Error: " + e);
			throw new RuntimeException("Socket Communication Error");
		}

		// Receive Data
		try {
			newmessage = mc.receiveMessage();

			try {
				msgComm = new EIE000001Message();
			} catch (Exception ex) {
				flexLog("Error: " + ex);
			}

			msgComm = (EIE000001Message) newmessage;
			// showESD008004(msgComm);

			userPO.setIdentifier(msgComm.getE01COMTBL());

			flexLog("Putting java beans into the session");
			ses.setAttribute("error", msgError);
			ses.setAttribute("invComm", msgComm);
			ses.setAttribute("userPO", userPO);

			if (IsNotError) { // There are no errors
				try {
					flexLog(
						"About to call Page: "
							+ LangPath
							+ "EIV0000_inv_confirm.jsp");
					callPage(LangPath + "EIV0000_inv_confirm.jsp", req, res);
				} catch (Exception e) {
					flexLog("Exception calling page " + e);
				}
			} else { // There are errors
				if (msgComm.getE01COMTYP().equals("BND")) {
					try {
						flexLog(
							"About to call Page: "
								+ LangPath
								+ "EIE0000_inv_bonds_basic.jsp");
						callPage(
							LangPath + "EIE0000_inv_bonds_basic.jsp",
							req,
							res);
					} catch (Exception e) {
						flexLog("Exception calling page " + e);
					}
				} else {
					try {
						flexLog(
							"About to call Page: "
								+ LangPath
								+ "EIE0000_inv_stocks_basic.jsp");
						callPage(
							LangPath + "EIE0000_inv_stocks_basic.jsp",
							req,
							res);
					} catch (Exception e) {
						flexLog("Exception calling page " + e);
					}
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
			flexLog("Error: " + e);
			throw new RuntimeException("Socket Communication Error");
		}

	}
	public void service(HttpServletRequest req, HttpServletResponse res)
		throws ServletException, IOException {

		Socket s = null;
		MessageContext mc = null;

		ESS0030DSMessage msgUser = null;
		HttpSession session = null;

		session = (HttpSession) req.getSession(false);

		if (session == null) {
			try {
				res.setContentType("text/html");
				printLogInAgain(res.getWriter());
			} catch (Exception e) {
				e.printStackTrace();
				flexLog("Exception ocurred. Exception = " + e);
			}
		} else {

			int screen = A_ENTER_MAINT;

			try {

				msgUser =
					(datapro.eibs.beans.ESS0030DSMessage) session.getAttribute(
						"currUser");

				// Here we should get the path from the user profile
				LangPath = super.rootPath + msgUser.getE01LAN() + "/";

				try {
					flexLog("Opennig Socket Connection");
					s = new Socket(super.hostIP, getInitSocket(req) + 1);
					s.setSoTimeout(super.sckTimeOut);
					mc =
						new MessageContext(
							new DataInputStream(
								new BufferedInputStream(s.getInputStream())),
							new DataOutputStream(
								new BufferedOutputStream(s.getOutputStream())),
							"datapro.eibs.beans");

					try {
						screen = Integer.parseInt(req.getParameter("SCREEN"));
					} catch (Exception e) {
						flexLog("Screen set to default value");
					}

					switch (screen) {

						// Action
						case A_MAINTENANCE :
							procActionMaintenance(
								mc,
								msgUser,
								req,
								res,
								session);
							break;

						case A_ENTER_NEW :
							procActionEnterNew(mc, msgUser, req, res, session);
							break;
						case A_ENTER_MAINT :
							procActionEnterMaint(
								mc,
								msgUser,
								req,
								res,
								session);
							break;
						case A_ENTER_DELETE :
							procActionEnterDelete(
								mc,
								msgUser,
								req,
								res,
								session);
							break;
						case A_ENTER_INQUIRY :
							procActionEnterInquiry(
								mc,
								msgUser,
								req,
								res,
								session);
							break;
							// END Entering

						default :
							res.sendRedirect(super.srctx + LangPath + super.devPage);
							break;
					}

			} catch (Exception e) {
				e.printStackTrace();
				int sck = getInitSocket(req) + 1;
				flexLog("Socket not Open(Port " + sck + "). Error: " + e);
				res.sendRedirect(super.srctx + LangPath + super.sckNotOpenPage);
				//return;
			} finally {
				s.close();
			}
				} catch (Exception e) {
					flexLog("Error: " + e);
					res.sendRedirect(super.srctx + LangPath + super.sckNotRespondPage);
				}

		}

	}

	protected void showERROR(ELEERRMessage m) {
		if (logType != NONE) {

			flexLog("ERROR received.");

			flexLog("ERROR number:" + m.getERRNUM());
			flexLog("ERR001 = " + m.getERNU01() + " desc: " + m.getERDS01());
			flexLog("ERR002 = " + m.getERNU02() + " desc: " + m.getERDS02());
			flexLog("ERR003 = " + m.getERNU03() + " desc: " + m.getERDS03());
			flexLog("ERR004 = " + m.getERNU04() + " desc: " + m.getERDS04());
			flexLog("ERR005 = " + m.getERNU05() + " desc: " + m.getERDS05());
			flexLog("ERR006 = " + m.getERNU06() + " desc: " + m.getERDS06());
			flexLog("ERR007 = " + m.getERNU07() + " desc: " + m.getERDS07());
			flexLog("ERR008 = " + m.getERNU08() + " desc: " + m.getERDS08());
			flexLog("ERR009 = " + m.getERNU09() + " desc: " + m.getERDS09());
			flexLog("ERR010 = " + m.getERNU10() + " desc: " + m.getERDS10());

		}
	}

}
